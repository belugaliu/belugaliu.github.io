{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","path":"medias/avatar.png","modified":0,"renderable":1},{"_id":"source/images/2023/gitlab_bigcodes/directory_file.png","path":"images/2023/gitlab_bigcodes/directory_file.png","modified":0,"renderable":0},{"_id":"source/images/2023/gitlab_bigcodes/directory_image.png","path":"images/2023/gitlab_bigcodes/directory_image.png","modified":0,"renderable":0},{"_id":"source/images/2023/gitlab_bigcodes/git_compress.png","path":"images/2023/gitlab_bigcodes/git_compress.png","modified":0,"renderable":0},{"_id":"source/images/2023/gitlab_bigcodes/git_xpack.png","path":"images/2023/gitlab_bigcodes/git_xpack.png","modified":0,"renderable":0},{"_id":"source/images/2023/gitlab_bigcodes/log_for_bfg.png","path":"images/2023/gitlab_bigcodes/log_for_bfg.png","modified":0,"renderable":0},{"_id":"source/images/2023/gitlab_bigcodes/gitcode_compare.png","path":"images/2023/gitlab_bigcodes/gitcode_compare.png","modified":0,"renderable":0},{"_id":"source/images/2023/npm_link_vuex_watch/link.png","path":"images/2023/npm_link_vuex_watch/link.png","modified":0,"renderable":0},{"_id":"source/sitemap.xml","path":"sitemap.xml","modified":0,"renderable":0},{"_id":"source/images/2024/a4_table_dinggao/4A2.jpg","path":"images/2024/a4_table_dinggao/4A2.jpg","modified":0,"renderable":0},{"_id":"source/images/2024/a4_table_dinggao/A41.jpg","path":"images/2024/a4_table_dinggao/A41.jpg","modified":0,"renderable":0},{"_id":"source/images/2024/notinmind_systemexit/12.png","path":"images/2024/notinmind_systemexit/12.png","modified":0,"renderable":0},{"_id":"source/images/2024/notinmind_systemexit/3641708614410_.pic.jpg","path":"images/2024/notinmind_systemexit/3641708614410_.pic.jpg","modified":0,"renderable":0},{"_id":"source/images/2024/notinmind_systemexit/cocall61708612842881.jpg","path":"images/2024/notinmind_systemexit/cocall61708612842881.jpg","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/JVM_1.png","path":"images/2024/jvm/JVM_1.png","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/JVM_2.jpeg","path":"images/2024/jvm/JVM_2.jpeg","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/JVM_3.jpeg","path":"images/2024/jvm/JVM_3.jpeg","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/JVM_4.jpeg","path":"images/2024/jvm/JVM_4.jpeg","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/JVM_5.png","path":"images/2024/jvm/JVM_5.png","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/jvm_7.png","path":"images/2024/jvm/jvm_7.png","modified":0,"renderable":0},{"_id":"source/images/2024/opencv_tesseract_answerarea/openCV_1.jpg","path":"images/2024/opencv_tesseract_answerarea/openCV_1.jpg","modified":0,"renderable":0},{"_id":"source/images/2024/opencv_tesseract_answerarea/openCV_2.png","path":"images/2024/opencv_tesseract_answerarea/openCV_2.png","modified":0,"renderable":0},{"_id":"source/images/2024/jvm/JVM_6.png","path":"images/2024/jvm/JVM_6.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404/index.md","hash":"e37277f4a6f686fbd241cf890089b5eca21a6a31","modified":1680009227278},{"_id":"source/_data/friends.json","hash":"9d4f6d212ead154d47931d5536630b24dbef8c7f","modified":1680190616579},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1679651638092},{"_id":"source/about/index.md","hash":"4316fbfcf30e6050e6d5bada500151cb8cef45a2","modified":1680009006228},{"_id":"source/contact/index.md","hash":"d38360d9920249ed5a4c56168e5e23f00ccd3412","modified":1680009050427},{"_id":"source/.DS_Store","hash":"ef6d7e8d67efb24da1545fa8f850f4268c1435d5","modified":1684827798959},{"_id":"source/_posts/gitlab-上和项目大仓库说再见.md","hash":"0aaa53a60fa9c88a45308dbf90de3ed7fa2886bd","modified":1679894551540},{"_id":"source/tags/index.md","hash":"49103f24965edb299738de44f46d801bf7ebad23","modified":1680008956223},{"_id":"source/friends/index.md","hash":"643259616377126485b1ef91e7d42e668ce900a9","modified":1680009081832},{"_id":"source/categories/index.md","hash":"8377ade4df03538f1aaeceeda602653ae3cd815a","modified":1680008956218},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1679980516278},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1679980516278},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"5cdfd4f9c39957e8fd3ff0a6bdf148851dde30e6","modified":1680012918542},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"9c35a786d3dffc708f75d8a68b85b64dffa35572","modified":1679980516279},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1679980516279},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1679980516279},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1679980516279},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b64f4a8963e1e7ef4f4e574f24bfb1b05a041ab3","modified":1680190186467},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1679980516279},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1679980516279},{"_id":"themes/hexo-theme-matery/layout/.DS_Store","hash":"cc9874dbebadbeffd75b8654b2eae978de87693f","modified":1679981169358},{"_id":"themes/hexo-theme-matery/README.md","hash":"d64f79581eaf7b2ce8205209de8b01311db41832","modified":1679980516278},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1679980516279},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1679980516279},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1679980516280},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"2bcc302ad5bf0e52f00b62bea2cba79d33e81aee","modified":1679984098000},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"aa2bff5b5abb9b95c976208fe97d9e8d40d30b94","modified":1679981169362},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1679980516279},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"4765267aafe2871a2fdaeccd1598890219bd7d71","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1679980516280},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1679980516281},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1679980516282},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1679980516283},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1679980516283},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1679980516284},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1679980516284},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1679980516284},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1679980516285},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1679980516284},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"e4a478c91cd6750a9f18b65b914ff0b316fb08b3","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1679980516286},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1679980516283},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1679980516287},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1679980516286},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1679980516287},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1679980516287},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1679980516287},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1679980516287},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/libs/.DS_Store","hash":"e90eb448c7eafb71f99f74ad39fe652875ee1988","modified":1679981169364},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1679980516325},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"5cfd93c7b6d037cd640e5e56fa235ac07178f166","modified":1679981169361},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"fd2dfb6c0ad82d348e2db4fff6a0e9aaa2cc5701","modified":1680022612372},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1679980516328},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1679980516338},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1679980516289},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1679980516288},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1679980516295},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1679980516295},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1679980516298},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1679980516298},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1679980516301},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1679980516301},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1679980516301},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1679980516301},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1679980516303},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1679980516313},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1679980516317},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1679980516316},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1679980516318},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1679980516321},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1679980516321},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1679980516322},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1679980516323},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1679980516328},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1679980516328},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1679980516328},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1679980516328},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1679980516329},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1679980516330},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1679980516331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1679980516331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1679980516332},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1679980516332},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1679980516333},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1679980516336},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1679980516337},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1679980516337},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1679980516333},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1679980516337},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1679980516341},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1679980516342},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1679980516291},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1679980516291},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1679980516293},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1679980516294},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1679980516303},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1679980516303},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1679980516303},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1679980516321},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1679980516321},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1679980516298},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1679980516301},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1679980516302},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"e803a04a34fdec380867e6573b4550ba403d33ed","modified":1680023608529},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"ca13b9c5814bfd9f6c0782983f75e9b7d0db04eb","modified":1680024537009},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"1fc0f79a626c445d1ec6fab65f03644f3a0fa987","modified":1680024328337},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1679980516329},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1679980516329},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1679980516330},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1679980516330},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1679980516330},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1679980516331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1679980516331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1679980516332},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1679980516331},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1679980516336},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1679980516337},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1679980516338},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1679980516291},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1679980516289},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1679980516329},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1679980516295},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1679980516304},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1679980516304},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1679980516323},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1679980516325},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"4596b0866c939c37d7bc540524d93d5498bb9ce7","modified":1680023989233},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"81de79816b4335fcb80583b9b64ebb444e36565e","modified":1680025340204},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"dfae57227c72cf46c6d40084e9d0c511e3230ff6","modified":1680025622450},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1679980516340},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1679980516289},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1679980516293},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1679980516290},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1679980516287},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1679980516324},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"773df78363d46464bb0cb24845255b98062684a2","modified":1680025100383},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1679980516341},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1679980516293},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1679980516322},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1679980516320},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1679980516339},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1679980516298},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1679980516300},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1679980516316},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1679980516313},{"_id":"themes/hexo-theme-matery/source/medias/avatar.png","hash":"549bb25c14be2b8f5122243d83a67a3d2a4a4f8f","modified":1680026028231},{"_id":"source/images/2023/gitlab_bigcodes/directory_file.png","hash":"4430bfed3e41d9d483fc33e59324777527b4d8c9","modified":1680085491649},{"_id":"source/_posts/gitlab 上和项目大仓库说再见.md","hash":"d65727fc4975b035cdd5bdd598f75f5b67c5f666","modified":1708738270429},{"_id":"source/images/2023/gitlab_bigcodes/git_xpack.png","hash":"26997bb680da23b4c09f461e75ab253b29867bcd","modified":1680086061312},{"_id":"source/images/2023/gitlab_bigcodes/git_compress.png","hash":"d990c9e82a866c04faf8ac73bc776a62f9414f4b","modified":1680085554339},{"_id":"source/images/2023/gitlab_bigcodes/directory_image.png","hash":"a1cd61c65c0d06f8519b6a65912f51f705d9984b","modified":1680067070748},{"_id":"source/images/2023/gitlab_bigcodes/log_for_bfg.png","hash":"bbd05a1c0abde675e90603f8cc63888779a8309d","modified":1680086132793},{"_id":"source/images/2023/gitlab_bigcodes/gitcode_compare.png","hash":"9e1403b83cc05af4bafb75001354d10c6a59ebb5","modified":1680085581945},{"_id":"source/_posts/npm-link-VUEX-watch-怎么不生效.md","hash":"9d3119e20a0d306e925604d8de9d4b260800435e","modified":1708231493178},{"_id":"source/images/2023/npm_link_vuex_watch/link.png","hash":"f1b259722015c10b5a76dd30d9da21a80abf50c4","modified":1680434615106},{"_id":"source/_posts/json-工具我应该怎么选.md","hash":"04319afd2f9b0a1a4329bb51f4550850642462f3","modified":1708231525041},{"_id":"source/_posts/spring-boot-security-OAuth2应用实现.md","hash":"4388d50e8f2d23114e381a27aeeb5a1852e8b2ff","modified":1708231456209},{"_id":"source/_posts/spring-security中遇见的耗时小坑.md","hash":"492dad14ff0df76cfaa9cfc26db7e336a2165181","modified":1708231468240},{"_id":"source/_posts/images/2023/gitlab_bigcodes/directory_file.png","hash":"4430bfed3e41d9d483fc33e59324777527b4d8c9","modified":1680085491649},{"_id":"source/_posts/images/2023/gitlab_bigcodes/git_xpack.png","hash":"26997bb680da23b4c09f461e75ab253b29867bcd","modified":1680086061312},{"_id":"source/sitemap.xml","hash":"bd90b542c98e81bc71621be83bec42dd78ac3c71","modified":1682100647375},{"_id":"source/google60989aa152131adb.html","hash":"266789a874db691cbaa4b483e2de77f2fc818f88","modified":1682100647375},{"_id":"source/_posts/images/2023/npm_link_vuex_watch/link.png","hash":"f1b259722015c10b5a76dd30d9da21a80abf50c4","modified":1680434615106},{"_id":"source/_posts/images/2023/gitlab_bigcodes/gitcode_compare.png","hash":"9e1403b83cc05af4bafb75001354d10c6a59ebb5","modified":1680085581945},{"_id":"source/_posts/images/2023/gitlab_bigcodes/log_for_bfg.png","hash":"bbd05a1c0abde675e90603f8cc63888779a8309d","modified":1680086132793},{"_id":"source/_posts/images/2023/gitlab_bigcodes/git_compress.png","hash":"d990c9e82a866c04faf8ac73bc776a62f9414f4b","modified":1680085554338},{"_id":"source/_posts/images/2023/gitlab_bigcodes/directory_image.png","hash":"a1cd61c65c0d06f8519b6a65912f51f705d9984b","modified":1680067070748},{"_id":"source/_posts/Redis-分布式锁你续约了吗.md","hash":"aa38315296d660dcdc2686f8e1bf9a6749ec849a","modified":1708231476054},{"_id":"source/_posts/出乎意外的-系统宕机.md","hash":"255784d963a0bd9ca8e13ead1c5b0fb322f24bdf","modified":1708615668735},{"_id":"source/_posts/JVM-的垃圾回收器们.md","hash":"497028e8deb5fd51666ed9707557e433efa81c8b","modified":1711085641235},{"_id":"source/_posts/A4-图纸上绘画-定高-表格.md","hash":"12461c3d7e158d3536666923da336041e6429c69","modified":1709555013445},{"_id":"source/_posts/怎么实现-mybatis-自动设置创建时间更新时间.md","hash":"e6ce4b7452efaf8b3ec922de4713377a24039788","modified":1708231456183},{"_id":"source/_posts/java-通过-OpenCV-提取答题卡选择题答案.md","hash":"3f337297d2f087308d74ed1f25af41614d5a3a75","modified":1708738270404},{"_id":"source/_posts/images/.DS_Store","hash":"3c4e9cbbba79f807db10233812eb2f53bdab08d5","modified":1708615260061},{"_id":"source/_posts/images/2024/.DS_Store","hash":"5104f78dfa35225d9f59e7b83e2645668e5becad","modified":1708616673336},{"_id":"source/images/2024/jvm/JVM_1.png","hash":"e0fda0fa3cafdc891af31b8aebb469ed0b4d191a","modified":1710205570725},{"_id":"source/images/2024/jvm/jvm_7.png","hash":"d0c35c59504316e3ec8421042473b8540bf5a018","modified":1711004259350},{"_id":"source/images/2024/opencv_tesseract_answerarea/openCV_2.png","hash":"f19c9ef7b6587b025cd75bb2b9f55cdf04a75d1a","modified":1708700702006},{"_id":"source/_posts/images/2024/opencv_tesseract_answerarea/openCV_2.png","hash":"f19c9ef7b6587b025cd75bb2b9f55cdf04a75d1a","modified":1708700702006},{"_id":"source/_posts/images/2024/jvm/JVM_1.png","hash":"e0fda0fa3cafdc891af31b8aebb469ed0b4d191a","modified":1710205570725},{"_id":"source/_posts/images/2024/jvm/jvm_7.png","hash":"d0c35c59504316e3ec8421042473b8540bf5a018","modified":1711004259350},{"_id":"source/images/2024/a4_table_dinggao/4A2.jpg","hash":"717ffc7e0a2ad1a041d108dac062cef3dda11864","modified":1709477726179},{"_id":"source/images/2024/notinmind_systemexit/3641708614410_.pic.jpg","hash":"92def9bfc2d6c478885edf74e6be37c311c48565","modified":1708614411196},{"_id":"source/images/2024/jvm/JVM_5.png","hash":"da352ab393e1843138c9a856d084dcb8ec3db04d","modified":1711000891750},{"_id":"source/_posts/images/2024/a4_table_dinggao/4A2.jpg","hash":"717ffc7e0a2ad1a041d108dac062cef3dda11864","modified":1709477726179},{"_id":"source/images/2024/jvm/JVM_6.png","hash":"27727d51be5db9b4b578f04ebb67cc2eae1e6eda","modified":1711001113937},{"_id":"source/_posts/images/2024/notinmind_systemexit/3641708614410_.pic.jpg","hash":"92def9bfc2d6c478885edf74e6be37c311c48565","modified":1708614411197},{"_id":"source/_posts/images/2024/jvm/JVM_5.png","hash":"da352ab393e1843138c9a856d084dcb8ec3db04d","modified":1711000891750},{"_id":"source/_posts/images/2024/jvm/JVM_6.png","hash":"27727d51be5db9b4b578f04ebb67cc2eae1e6eda","modified":1711001113937},{"_id":"source/images/2024/a4_table_dinggao/A41.jpg","hash":"7322a6be81b3a22b6a438c58754e2e16ad061aba","modified":1709477669136},{"_id":"source/images/2024/notinmind_systemexit/cocall61708612842881.jpg","hash":"8b412c2e49597901c081a2c5d5d1f6bbb9af474d","modified":1708613237693},{"_id":"source/images/2024/notinmind_systemexit/12.png","hash":"dc56dc51f2ea82b9b668816553af8d1b9fa6ac36","modified":1708615190321},{"_id":"source/images/2024/opencv_tesseract_answerarea/openCV_1.jpg","hash":"8ddf27b985413d4e5d33e766e97891533497c860","modified":1708700633645},{"_id":"source/_posts/images/2024/a4_table_dinggao/A41.jpg","hash":"7322a6be81b3a22b6a438c58754e2e16ad061aba","modified":1709477669136},{"_id":"source/_posts/images/2024/notinmind_systemexit/cocall61708612842881.jpg","hash":"8b412c2e49597901c081a2c5d5d1f6bbb9af474d","modified":1708613237693},{"_id":"source/_posts/images/2024/notinmind_systemexit/12.png","hash":"dc56dc51f2ea82b9b668816553af8d1b9fa6ac36","modified":1708615190322},{"_id":"source/_posts/images/2024/opencv_tesseract_answerarea/openCV_1.jpg","hash":"8ddf27b985413d4e5d33e766e97891533497c860","modified":1708700633645},{"_id":"source/images/2024/jvm/JVM_2.jpeg","hash":"bc7a03dd6a28ab87fbf03a48dd46ba6be0b495a7","modified":1710206070833},{"_id":"source/_posts/images/2024/jvm/JVM_2.jpeg","hash":"bc7a03dd6a28ab87fbf03a48dd46ba6be0b495a7","modified":1710206070833},{"_id":"source/images/2024/jvm/JVM_4.jpeg","hash":"624edd33787f04cb12d86c1f73ffc6d34a18876b","modified":1710218211841},{"_id":"source/_posts/images/2024/jvm/JVM_4.jpeg","hash":"624edd33787f04cb12d86c1f73ffc6d34a18876b","modified":1710218211841},{"_id":"source/images/2024/jvm/JVM_3.jpeg","hash":"1147793fb57e2f9c80714bb45591eb2c80b1307e","modified":1710206339851},{"_id":"source/_posts/images/2024/jvm/JVM_3.jpeg","hash":"1147793fb57e2f9c80714bb45591eb2c80b1307e","modified":1710206339851}],"Category":[{"name":"tools","_id":"clfsi5qcx0003g9660tk982mp"},{"name":"npm","_id":"clfzbkh910001jn669p08ds62"},{"name":"spring-security","_id":"cls1thesm0004wt66csxc6kkn"},{"name":"分布式锁","_id":"cls1u7p9e00018h66ao1ma1pg"},{"name":"code","_id":"clu285vm200014tc0at406kml"},{"name":"选型","_id":"clu285vm700084tc0ej2172s3"},{"name":"基础","_id":"clu287msr000177c0g8z949kn"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}],"Page":[{"title":"404","date":"2023-03-28T13:12:54.000Z","type":"404","layout":"404","desciption":"Oops~我崩溃了！找不到你想要的页面:(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2023-03-28 21:12:54\ntype: \"404\"\nlayout: \"404\"\ndesciption: \"Oops~我崩溃了！找不到你想要的页面:(\"\n---\n","updated":"2023-03-28T13:13:47.278Z","path":"404/index.html","comments":1,"_id":"clfsi5qcs0000g9669yld0ldi","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2023-03-28T13:09:43.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-03-28 21:09:43\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2023-03-28T13:10:06.228Z","path":"about/index.html","comments":1,"_id":"clfsi5qcw0002g9669c484gu7","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2023-03-28T13:10:24.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2023-03-28 21:10:24\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2023-03-28T13:10:50.427Z","path":"contact/index.html","comments":1,"_id":"clfsi5qcy0005g966946nfqo9","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2023-03-24T10:10:54.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-03-24 18:10:54\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-03-28T13:09:16.218Z","path":"categories/index.html","comments":1,"_id":"clfsi5qcy0006g9668jp77yn5","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2023-03-28T13:11:03.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2023-03-28 21:11:03\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2023-03-28T13:11:21.832Z","path":"friends/index.html","comments":1,"_id":"clfsi5qcz0007g9660oyrc3y3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2023-03-27T05:08:46.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-27 13:08:46\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2023-03-28T13:09:16.223Z","path":"tags/index.html","comments":1,"_id":"clfsi5qcz0009g966818ie4bg","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"}]}},"excerpt":"","more":""},{"_content":"google-site-verification: google60989aa152131adb.html","source":"google60989aa152131adb.html","raw":"google-site-verification: google60989aa152131adb.html","date":"2023-04-21T18:10:47.375Z","updated":"2023-04-21T18:10:47.375Z","path":"google60989aa152131adb.html","title":"","comments":1,"layout":"page","_id":"cls1thesi0000wt66ggztb11u","content":"google-site-verification: google60989aa152131adb.html","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"google-site-verification: google60989aa152131adb.html"}],"Post":[{"title":"gitlab 上和项目大仓库说再见","date":"2023-03-27T05:00:03.000Z","_content":"## :cat: 背景\n\n`git clone` 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 `gitlab` 代码仓库减负。\n\n### :dog: 基础知识\n\n项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + `.git` （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 [treesize free](https://www.jam-software.com/treesize_free) / [SpaceSniffer](http://www.uderzo.it/main_products/space_sniffer/download_alt.html) 工具，linux 可以用命令 `du -h –max-depth=1 *`，mac 命令 `du -h -d 1 *` ），一般 `.git` 目录下文件大小 >= 项目文件大小。意味着，项目整体下载空间占用 >= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了**共享备份存储空间**是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。\n\n### :fish: 拯救 git 仓库\n\n对于需求文档类项目而言，建议用 `git lfs` 做大文件管理（此处 `git lfs` 不做过多介绍，请点击[链接](https://git-lfs.github.com/)了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。\n\n> :bulb: 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库\n\n### :whale: 分析 git 大仓库\n\n- windows 上使用 `TreeSize Free`  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，`.git` 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件**git 原理**找答案。\n\n  ![](images/2023/gitlab_bigcodes/directory_image.png)\n\n- 使用 `git verify-pack`  命令运行  `git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10` ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 `git Bash Here ` 运行。\n\n  ![](images/2023/gitlab_bigcodes/git_xpack.png)\n\n- 使用命令 `git rev-list` 运行 `git rev-list --objects --all|grep  hashId ` 定位大文件路径。此处，处理文件大小超过 100 MB。\n\n  ![](images/2023/gitlab_bigcodes/directory_file.png)\n\n- 按照路径和 `git log` 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 `xxxx.asf` 和 `xxx.asf` 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 `git revert` 还原到删除前的 commitId 版本。所以，清理原则就是需要**明确**哪些文件要删除，没有机会还原的话，就删除吧。\n\n  > :bulb: 有重命名/移动目录需求，请使用 `git mv`  命令，而达到目录变更及命名功能。不要使用 `git mv` 和 `git add` 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。\n\n## :dolphin: 如何清理\n> 在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。\n\n目前，主要有两种方法：\n\n- git 原生支持的 `filter-branch` 分支文件，命令 `git filter-branch --force --tree-filter 'rm -f path/to/big_file.mpg' HEAD` 。（不推荐。对于超多 commit 的项目，`filter-branch` 慢的怀疑人生，小编就是从 `git filter-branch` 放弃，转投 `BFG`）\n\n-  `BFG` 工具\n\n    - 执行命令 `git clone --mirror git-repository-url`  clone git 仓库\n\n    - 执行命令 `java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files '{xxx.asf,xxx.asf}' thunisoft-mvd.git`。\n\n      > `BFG` 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 `thunisoft-mvd.git.bfg-report\\2020-07-17\\16-14-13\\object-id-map.old-new.txt` 中 \n      > 此时，`.git/objects` 下的  `pack/xxxxx.pack`  文件会被解压为  n 个 `git objects` 对象文件\n\n    ![](images/2023/gitlab_bigcodes/log_for_bfg.png)\n\n- 执行命令 `git reflog expire --expire=now --all && git gc --prune=now --aggressive` ，将 git object 对象压缩。而后，执行命令 `git push` 推送远端。\n\n  > 注意：推送之前解除仓库的 `Protected Branches` 的配置\n\n\n  ![](images/2023/gitlab_bigcodes/git_compress.png)\n\n\n- 请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 `.git` 会更大，因为除了 `git gc` 重新生成的 `pack` 文件之外，还有本地本身老的 `pack` 文件。\n\n**最终和派生项目对比，除 `.git` 目录外其他相同。**\n\n![](images/2023/gitlab_bigcodes/gitcode_compare.png)\n\n**为什么存在不到 1 KB 的文件？因为，本项目使用 `git lfs` 做了大文件管理，使用 `git lfs pull` 可以从远端拉下 1 KB 映射的原文件**\n**<font color=\"red\">清理完成，2.4 GB -> 1.1 GB 的转身</font>**\n\n## :lion: 特别说明\n\n- 项目使用 `git lfs` 管理大文件之后，使用 `BFG` 清理完对项目本身没有任何影响。照样，可以使用 `git lfs` 命令管理文件。\n- 真实项目在清理前，请先按照本文先 `clone` 出一份，熟悉一下清理流程，更有底气。\n\n## :horse: 附录\n\n- [git 原理-阮一峰](http://www.ruanyifeng.com/blog/2018/10/git-internals.html)\n- [git 原理](https://zhuanlan.zhihu.com/p/45510461)\n- [git 大文件清理-github](https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file)\n- [git 大文件清理-gitlab](http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md)，目前不用上传 `object-id-map.old-new.txt` 文件，走 “开始清理” 这步骤\n- [git BFG](https://rtyley.github.io/bfg-repo-cleaner/)\n- [git 练习场](https://learngitbranching.js.org/?locale=zh_CN)\n- [git 学习文档](https://git-scm.com/book/zh/v2)\n","source":"_posts/gitlab 上和项目大仓库说再见.md","raw":"---\ntitle: gitlab 上和项目大仓库说再见\ndate: 2023-03-27 13:00:03\ncategories:\n- tools\ntags:\n- 杂项\n- tools\n- gitlab\n- BFG\n---\n## :cat: 背景\n\n`git clone` 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 `gitlab` 代码仓库减负。\n\n### :dog: 基础知识\n\n项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + `.git` （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 [treesize free](https://www.jam-software.com/treesize_free) / [SpaceSniffer](http://www.uderzo.it/main_products/space_sniffer/download_alt.html) 工具，linux 可以用命令 `du -h –max-depth=1 *`，mac 命令 `du -h -d 1 *` ），一般 `.git` 目录下文件大小 >= 项目文件大小。意味着，项目整体下载空间占用 >= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了**共享备份存储空间**是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。\n\n### :fish: 拯救 git 仓库\n\n对于需求文档类项目而言，建议用 `git lfs` 做大文件管理（此处 `git lfs` 不做过多介绍，请点击[链接](https://git-lfs.github.com/)了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。\n\n> :bulb: 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库\n\n### :whale: 分析 git 大仓库\n\n- windows 上使用 `TreeSize Free`  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，`.git` 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件**git 原理**找答案。\n\n  ![](images/2023/gitlab_bigcodes/directory_image.png)\n\n- 使用 `git verify-pack`  命令运行  `git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10` ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 `git Bash Here ` 运行。\n\n  ![](images/2023/gitlab_bigcodes/git_xpack.png)\n\n- 使用命令 `git rev-list` 运行 `git rev-list --objects --all|grep  hashId ` 定位大文件路径。此处，处理文件大小超过 100 MB。\n\n  ![](images/2023/gitlab_bigcodes/directory_file.png)\n\n- 按照路径和 `git log` 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 `xxxx.asf` 和 `xxx.asf` 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 `git revert` 还原到删除前的 commitId 版本。所以，清理原则就是需要**明确**哪些文件要删除，没有机会还原的话，就删除吧。\n\n  > :bulb: 有重命名/移动目录需求，请使用 `git mv`  命令，而达到目录变更及命名功能。不要使用 `git mv` 和 `git add` 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。\n\n## :dolphin: 如何清理\n> 在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。\n\n目前，主要有两种方法：\n\n- git 原生支持的 `filter-branch` 分支文件，命令 `git filter-branch --force --tree-filter 'rm -f path/to/big_file.mpg' HEAD` 。（不推荐。对于超多 commit 的项目，`filter-branch` 慢的怀疑人生，小编就是从 `git filter-branch` 放弃，转投 `BFG`）\n\n-  `BFG` 工具\n\n    - 执行命令 `git clone --mirror git-repository-url`  clone git 仓库\n\n    - 执行命令 `java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files '{xxx.asf,xxx.asf}' thunisoft-mvd.git`。\n\n      > `BFG` 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 `thunisoft-mvd.git.bfg-report\\2020-07-17\\16-14-13\\object-id-map.old-new.txt` 中 \n      > 此时，`.git/objects` 下的  `pack/xxxxx.pack`  文件会被解压为  n 个 `git objects` 对象文件\n\n    ![](images/2023/gitlab_bigcodes/log_for_bfg.png)\n\n- 执行命令 `git reflog expire --expire=now --all && git gc --prune=now --aggressive` ，将 git object 对象压缩。而后，执行命令 `git push` 推送远端。\n\n  > 注意：推送之前解除仓库的 `Protected Branches` 的配置\n\n\n  ![](images/2023/gitlab_bigcodes/git_compress.png)\n\n\n- 请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 `.git` 会更大，因为除了 `git gc` 重新生成的 `pack` 文件之外，还有本地本身老的 `pack` 文件。\n\n**最终和派生项目对比，除 `.git` 目录外其他相同。**\n\n![](images/2023/gitlab_bigcodes/gitcode_compare.png)\n\n**为什么存在不到 1 KB 的文件？因为，本项目使用 `git lfs` 做了大文件管理，使用 `git lfs pull` 可以从远端拉下 1 KB 映射的原文件**\n**<font color=\"red\">清理完成，2.4 GB -> 1.1 GB 的转身</font>**\n\n## :lion: 特别说明\n\n- 项目使用 `git lfs` 管理大文件之后，使用 `BFG` 清理完对项目本身没有任何影响。照样，可以使用 `git lfs` 命令管理文件。\n- 真实项目在清理前，请先按照本文先 `clone` 出一份，熟悉一下清理流程，更有底气。\n\n## :horse: 附录\n\n- [git 原理-阮一峰](http://www.ruanyifeng.com/blog/2018/10/git-internals.html)\n- [git 原理](https://zhuanlan.zhihu.com/p/45510461)\n- [git 大文件清理-github](https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file)\n- [git 大文件清理-gitlab](http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md)，目前不用上传 `object-id-map.old-new.txt` 文件，走 “开始清理” 这步骤\n- [git BFG](https://rtyley.github.io/bfg-repo-cleaner/)\n- [git 练习场](https://learngitbranching.js.org/?locale=zh_CN)\n- [git 学习文档](https://git-scm.com/book/zh/v2)\n","slug":"gitlab 上和项目大仓库说再见","published":1,"updated":"2024-02-24T01:31:10.429Z","_id":"clfzan0gs0000hv66745a8rfv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"cat-背景\"><a href=\"#cat-背景\" class=\"headerlink\" title=\":cat: 背景\"></a><span class=\"github-emoji\"><span>🐱</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 背景</h2><p><code>git clone</code> 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 <code>gitlab</code> 代码仓库减负。</p>\n<h3 id=\"dog-基础知识\"><a href=\"#dog-基础知识\" class=\"headerlink\" title=\":dog: 基础知识\"></a><span class=\"github-emoji\"><span>🐶</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 基础知识</h3><p>项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + <code>.git</code> （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 <a href=\"https://www.jam-software.com/treesize_free\">treesize free</a> / <a href=\"http://www.uderzo.it/main_products/space_sniffer/download_alt.html\">SpaceSniffer</a> 工具，linux 可以用命令 <code>du -h –max-depth=1 *</code>，mac 命令 <code>du -h -d 1 *</code> ），一般 <code>.git</code> 目录下文件大小 &gt;= 项目文件大小。意味着，项目整体下载空间占用 &gt;= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了<strong>共享备份存储空间</strong>是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。</p>\n<h3 id=\"fish-拯救-git-仓库\"><a href=\"#fish-拯救-git-仓库\" class=\"headerlink\" title=\":fish: 拯救 git 仓库\"></a><span class=\"github-emoji\"><span>🐟</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 拯救 git 仓库</h3><p>对于需求文档类项目而言，建议用 <code>git lfs</code> 做大文件管理（此处 <code>git lfs</code> 不做过多介绍，请点击<a href=\"https://git-lfs.github.com/\">链接</a>了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。</p>\n<blockquote>\n<p><span class=\"github-emoji\"><span>💡</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库</p>\n</blockquote>\n<h3 id=\"whale-分析-git-大仓库\"><a href=\"#whale-分析-git-大仓库\" class=\"headerlink\" title=\":whale: 分析 git 大仓库\"></a><span class=\"github-emoji\"><span>🐳</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 分析 git 大仓库</h3><ul>\n<li><p>windows 上使用 <code>TreeSize Free</code>  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，<code>.git</code> 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件<strong>git 原理</strong>找答案。</p>\n<p><img src=\"/images/2023/gitlab_bigcodes/directory_image.png\"></p>\n</li>\n<li><p>使用 <code>git verify-pack</code>  命令运行  <code>git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10</code> ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 <code>git Bash Here </code> 运行。</p>\n<p><img src=\"/images/2023/gitlab_bigcodes/git_xpack.png\"></p>\n</li>\n<li><p>使用命令 <code>git rev-list</code> 运行 <code>git rev-list --objects --all|grep  hashId </code> 定位大文件路径。此处，处理文件大小超过 100 MB。</p>\n<p><img src=\"/images/2023/gitlab_bigcodes/directory_file.png\"></p>\n</li>\n<li><p>按照路径和 <code>git log</code> 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 <code>xxxx.asf</code> 和 <code>xxx.asf</code> 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 <code>git revert</code> 还原到删除前的 commitId 版本。所以，清理原则就是需要<strong>明确</strong>哪些文件要删除，没有机会还原的话，就删除吧。</p>\n<blockquote>\n<p><span class=\"github-emoji\"><span>💡</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 有重命名/移动目录需求，请使用 <code>git mv</code>  命令，而达到目录变更及命名功能。不要使用 <code>git mv</code> 和 <code>git add</code> 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"dolphin-如何清理\"><a href=\"#dolphin-如何清理\" class=\"headerlink\" title=\":dolphin: 如何清理\"></a><span class=\"github-emoji\"><span>🐬</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 如何清理</h2><blockquote>\n<p>在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。</p>\n</blockquote>\n<p>目前，主要有两种方法：</p>\n<ul>\n<li><p>git 原生支持的 <code>filter-branch</code> 分支文件，命令 <code>git filter-branch --force --tree-filter 'rm -f path/to/big_file.mpg' HEAD</code> 。（不推荐。对于超多 commit 的项目，<code>filter-branch</code> 慢的怀疑人生，小编就是从 <code>git filter-branch</code> 放弃，转投 <code>BFG</code>）</p>\n</li>\n<li><p><code>BFG</code> 工具</p>\n<ul>\n<li><p>执行命令 <code>git clone --mirror git-repository-url</code>  clone git 仓库</p>\n</li>\n<li><p>执行命令 <code>java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files '{xxx.asf,xxx.asf}' thunisoft-mvd.git</code>。</p>\n<blockquote>\n<p><code>BFG</code> 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 <code>thunisoft-mvd.git.bfg-report\\2020-07-17\\16-14-13\\object-id-map.old-new.txt</code> 中<br>此时，<code>.git/objects</code> 下的  <code>pack/xxxxx.pack</code>  文件会被解压为  n 个 <code>git objects</code> 对象文件</p>\n</blockquote>\n</li>\n</ul>\n<p>  <img src=\"/images/2023/gitlab_bigcodes/log_for_bfg.png\"></p>\n</li>\n<li><p>执行命令 <code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code> ，将 git object 对象压缩。而后，执行命令 <code>git push</code> 推送远端。</p>\n<blockquote>\n<p>注意：推送之前解除仓库的 <code>Protected Branches</code> 的配置</p>\n</blockquote>\n</li>\n</ul>\n<p>  <img src=\"/images/2023/gitlab_bigcodes/git_compress.png\"></p>\n<ul>\n<li>请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 <code>.git</code> 会更大，因为除了 <code>git gc</code> 重新生成的 <code>pack</code> 文件之外，还有本地本身老的 <code>pack</code> 文件。</li>\n</ul>\n<p><strong>最终和派生项目对比，除 <code>.git</code> 目录外其他相同。</strong></p>\n<p><img src=\"/images/2023/gitlab_bigcodes/gitcode_compare.png\"></p>\n<p><strong>为什么存在不到 1 KB 的文件？因为，本项目使用 <code>git lfs</code> 做了大文件管理，使用 <code>git lfs pull</code> 可以从远端拉下 1 KB 映射的原文件</strong><br><strong><font color=\"red\">清理完成，2.4 GB -&gt; 1.1 GB 的转身</font></strong></p>\n<h2 id=\"lion-特别说明\"><a href=\"#lion-特别说明\" class=\"headerlink\" title=\":lion: 特别说明\"></a><span class=\"github-emoji\"><span>🦁</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 特别说明</h2><ul>\n<li>项目使用 <code>git lfs</code> 管理大文件之后，使用 <code>BFG</code> 清理完对项目本身没有任何影响。照样，可以使用 <code>git lfs</code> 命令管理文件。</li>\n<li>真实项目在清理前，请先按照本文先 <code>clone</code> 出一份，熟悉一下清理流程，更有底气。</li>\n</ul>\n<h2 id=\"horse-附录\"><a href=\"#horse-附录\" class=\"headerlink\" title=\":horse: 附录\"></a><span class=\"github-emoji\"><span>🐴</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 附录</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/10/git-internals.html\">git 原理-阮一峰</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/45510461\">git 原理</a></li>\n<li><a href=\"https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file\">git 大文件清理-github</a></li>\n<li><a href=\"http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md\">git 大文件清理-gitlab</a>，目前不用上传 <code>object-id-map.old-new.txt</code> 文件，走 “开始清理” 这步骤</li>\n<li><a href=\"https://rtyley.github.io/bfg-repo-cleaner/\">git BFG</a></li>\n<li><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">git 练习场</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\">git 学习文档</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"cat-背景\"><a href=\"#cat-背景\" class=\"headerlink\" title=\":cat: 背景\"></a>:cat: 背景</h2><p><code>git clone</code> 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 <code>gitlab</code> 代码仓库减负。</p>\n<h3 id=\"dog-基础知识\"><a href=\"#dog-基础知识\" class=\"headerlink\" title=\":dog: 基础知识\"></a>:dog: 基础知识</h3><p>项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + <code>.git</code> （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 <a href=\"https://www.jam-software.com/treesize_free\">treesize free</a> / <a href=\"http://www.uderzo.it/main_products/space_sniffer/download_alt.html\">SpaceSniffer</a> 工具，linux 可以用命令 <code>du -h –max-depth=1 *</code>，mac 命令 <code>du -h -d 1 *</code> ），一般 <code>.git</code> 目录下文件大小 &gt;= 项目文件大小。意味着，项目整体下载空间占用 &gt;= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了<strong>共享备份存储空间</strong>是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。</p>\n<h3 id=\"fish-拯救-git-仓库\"><a href=\"#fish-拯救-git-仓库\" class=\"headerlink\" title=\":fish: 拯救 git 仓库\"></a>:fish: 拯救 git 仓库</h3><p>对于需求文档类项目而言，建议用 <code>git lfs</code> 做大文件管理（此处 <code>git lfs</code> 不做过多介绍，请点击<a href=\"https://git-lfs.github.com/\">链接</a>了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。</p>\n<blockquote>\n<p>:bulb: 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库</p>\n</blockquote>\n<h3 id=\"whale-分析-git-大仓库\"><a href=\"#whale-分析-git-大仓库\" class=\"headerlink\" title=\":whale: 分析 git 大仓库\"></a>:whale: 分析 git 大仓库</h3><ul>\n<li><p>windows 上使用 <code>TreeSize Free</code>  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，<code>.git</code> 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件<strong>git 原理</strong>找答案。</p>\n<p><img src=\"/images/2023/gitlab_bigcodes/directory_image.png\"></p>\n</li>\n<li><p>使用 <code>git verify-pack</code>  命令运行  <code>git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10</code> ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 <code>git Bash Here </code> 运行。</p>\n<p><img src=\"/images/2023/gitlab_bigcodes/git_xpack.png\"></p>\n</li>\n<li><p>使用命令 <code>git rev-list</code> 运行 <code>git rev-list --objects --all|grep  hashId </code> 定位大文件路径。此处，处理文件大小超过 100 MB。</p>\n<p><img src=\"/images/2023/gitlab_bigcodes/directory_file.png\"></p>\n</li>\n<li><p>按照路径和 <code>git log</code> 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 <code>xxxx.asf</code> 和 <code>xxx.asf</code> 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 <code>git revert</code> 还原到删除前的 commitId 版本。所以，清理原则就是需要<strong>明确</strong>哪些文件要删除，没有机会还原的话，就删除吧。</p>\n<blockquote>\n<p>:bulb: 有重命名/移动目录需求，请使用 <code>git mv</code>  命令，而达到目录变更及命名功能。不要使用 <code>git mv</code> 和 <code>git add</code> 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"dolphin-如何清理\"><a href=\"#dolphin-如何清理\" class=\"headerlink\" title=\":dolphin: 如何清理\"></a>:dolphin: 如何清理</h2><blockquote>\n<p>在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。</p>\n</blockquote>\n<p>目前，主要有两种方法：</p>\n<ul>\n<li><p>git 原生支持的 <code>filter-branch</code> 分支文件，命令 <code>git filter-branch --force --tree-filter &#39;rm -f path/to/big_file.mpg&#39; HEAD</code> 。（不推荐。对于超多 commit 的项目，<code>filter-branch</code> 慢的怀疑人生，小编就是从 <code>git filter-branch</code> 放弃，转投 <code>BFG</code>）</p>\n</li>\n<li><p><code>BFG</code> 工具</p>\n<ul>\n<li><p>执行命令 <code>git clone --mirror git-repository-url</code>  clone git 仓库</p>\n</li>\n<li><p>执行命令 <code>java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files &#39;&#123;xxx.asf,xxx.asf&#125;&#39; thunisoft-mvd.git</code>。</p>\n<blockquote>\n<p><code>BFG</code> 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 <code>thunisoft-mvd.git.bfg-report\\2020-07-17\\16-14-13\\object-id-map.old-new.txt</code> 中<br>此时，<code>.git/objects</code> 下的  <code>pack/xxxxx.pack</code>  文件会被解压为  n 个 <code>git objects</code> 对象文件</p>\n</blockquote>\n</li>\n</ul>\n<p>  <img src=\"/images/2023/gitlab_bigcodes/log_for_bfg.png\"></p>\n</li>\n<li><p>执行命令 <code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code> ，将 git object 对象压缩。而后，执行命令 <code>git push</code> 推送远端。</p>\n<blockquote>\n<p>注意：推送之前解除仓库的 <code>Protected Branches</code> 的配置</p>\n</blockquote>\n</li>\n</ul>\n<p>  <img src=\"/images/2023/gitlab_bigcodes/git_compress.png\"></p>\n<ul>\n<li>请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 <code>.git</code> 会更大，因为除了 <code>git gc</code> 重新生成的 <code>pack</code> 文件之外，还有本地本身老的 <code>pack</code> 文件。</li>\n</ul>\n<p><strong>最终和派生项目对比，除 <code>.git</code> 目录外其他相同。</strong></p>\n<p><img src=\"/images/2023/gitlab_bigcodes/gitcode_compare.png\"></p>\n<p><strong>为什么存在不到 1 KB 的文件？因为，本项目使用 <code>git lfs</code> 做了大文件管理，使用 <code>git lfs pull</code> 可以从远端拉下 1 KB 映射的原文件</strong><br><strong><font color=\"red\">清理完成，2.4 GB -&gt; 1.1 GB 的转身</font></strong></p>\n<h2 id=\"lion-特别说明\"><a href=\"#lion-特别说明\" class=\"headerlink\" title=\":lion: 特别说明\"></a>:lion: 特别说明</h2><ul>\n<li>项目使用 <code>git lfs</code> 管理大文件之后，使用 <code>BFG</code> 清理完对项目本身没有任何影响。照样，可以使用 <code>git lfs</code> 命令管理文件。</li>\n<li>真实项目在清理前，请先按照本文先 <code>clone</code> 出一份，熟悉一下清理流程，更有底气。</li>\n</ul>\n<h2 id=\"horse-附录\"><a href=\"#horse-附录\" class=\"headerlink\" title=\":horse: 附录\"></a>:horse: 附录</h2><ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2018/10/git-internals.html\">git 原理-阮一峰</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/45510461\">git 原理</a></li>\n<li><a href=\"https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file\">git 大文件清理-github</a></li>\n<li><a href=\"http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md\">git 大文件清理-gitlab</a>，目前不用上传 <code>object-id-map.old-new.txt</code> 文件，走 “开始清理” 这步骤</li>\n<li><a href=\"https://rtyley.github.io/bfg-repo-cleaner/\">git BFG</a></li>\n<li><a href=\"https://learngitbranching.js.org/?locale=zh_CN\">git 练习场</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\">git 学习文档</a></li>\n</ul>\n"},{"title":"npm-link VUEX watch 怎么不生效","date":"2023-04-02T11:07:36.000Z","_content":"## :cat: 背景\n\n前端项目 `package.json` 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 `npm install --save-dev xxxx` 引入方式。\n对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 `npm install` 下载包调试。\n可以选用 [npm-link 方式](https://docs.npmjs.com/cli/v9/commands/npm-link/) 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。\n最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。\n个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是**原封**不动，包括 `node_modules`（最后发现也坏在此处）。\n搜索 google 和百度都没有有效的帖子。\n\n## :tiger: 问题跟进\n\n### :one: 搞懂 VUEX store 的 watch 原理\n\n**store watch 的初始化**\n\n`vue` 初始化时，会调用 `initState` 其中，会针对本 `vue` 的 watch 完成 `initWatch` 初始化。其中初始化过程中会调用 `Vue.prototype.$watch` (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 `watch handler` 方法。\n\n```javascript\nVue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      var info = \"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\";\n      pushTarget();\n      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);\n      popTarget();\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n```\n\n在 `new Watcher` 对象第一次获取 `watcher.value` 时，触发 `watcher` 对象的 Dep 依赖。\n\n```javascript\nvar Watcher = function Watcher (vm,  expOrFn,  cb,  options,  isRenderWatcher) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // 隐藏不需要关注的代码\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n    // 隐藏不需要关注的代码\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\nWatcher.prototype.get = function get () {\n  // 指定 Dep.target 为 watcher\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    if (this.deep) {\n      traverse(value);\n    }\n    // 退出 Dep.target 的指向  \n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n// 触发真实 get 时，完成了 watcher 的 Dep 依赖\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 忽略 set\n    get: function reactiveGetter () {\n        var value = getter ? getter.call(obj) : val;\n        if (Dep.target) {\n            dep.depend();\n            if (childOb) {\n                childOb.dep.depend();\n                if (Array.isArray(value)) {\n                    dependArray(value);\n                }\n            }\n        }\n        return value\n\t}\n}\n// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n```\n\n`Dep.prototype.depend` 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 `store watch init` 的链路如下，\n\n```\ndepend (vue.common.dev.js:726)\nreactiveGetter (vue.common.dev.js:1038)\nprototypeAccessors$1.state.get (vuex.esm.js:438)\n（匿名） (vue.common.dev.js:514)\nget (vue.common.dev.js:4490)\nWatcher (vue.common.dev.js:4479)\nVue.$watch (vue.common.dev.js:4953)\ncreateWatcher (vue.common.dev.js:4913)\ninitWatch (vue.common.dev.js:4895)\ninitState (vue.common.dev.js:4656)\nVue._init (vue.common.dev.js:5010)\nVueComponent (vue.common.dev.js:5157)\ncreateComponentInstanceForVnode (vue.common.dev.js:3307)\ninit (vue.common.dev.js:3136)\n```\n\n**store watch 的触发**\n\n`this.$store.commit('xxx', xxxx)` 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。\n\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 忽略 get\n    set: function reactiveSetter (newVal) {\n        var value = getter ? getter.call(obj) : val;\n        /* eslint-disable no-self-compare */\n        if (newVal === value || (newVal !== newVal && value !== value)) {\n            return\n        }\n        /* eslint-enable no-self-compare */\n        if (customSetter) {\n            customSetter();\n        }\n        // #7981: for accessor properties without setter\n        if (getter && !setter) { return }\n        if (setter) {\n            setter.call(obj, newVal);\n        } else {\n            val = newVal;\n        }\n        childOb = !shallow && observe(newVal);\n        // 触发通知\n        dep.notify();\n    }\n});\nDep.prototype.notify = function notify () {\n  var subs = this.subs.slice();\n // 忽略不重要代码\n  for (var i = 0, l = subs.length; i < l; i++) {\n    // watcher update\n    subs[i].update();\n  }\n};\n```\n\n其中 `notify` 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 `watcher#addDep` 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。`store watch notify` 的链路如下，\n\n```\nhandler (list_left.vue:411)\ninvokeWithErrorHandling (vue.common.dev.js:1868)\nrun (vue.common.dev.js:4579)\nflushSchedulerQueue (vue.common.dev.js:4323)\n（匿名） (vue.common.dev.js:1994)\nflushCallbacks (vue.common.dev.js:1920)\nPromise.then（异步）\ntimerFunc (vue.common.dev.js:1947)\nnextTick (vue.common.dev.js:2004)\nqueueWatcher (vue.common.dev.js:4415)\nupdate (vue.common.dev.js:4555)\nnotify (vue.common.dev.js:741)\nreactiveSetter (vue.common.dev.js:1066)\nproxySetter (vue.common.dev.js:4639)\nchangeAjlb (nav.vue:431)\n```\n\n以上，**watcher init** 和 **watcher 触发** 总结来说就是这个图。\n\n![](images/2023/npm_link_vuex_watch/link.png)\n\n### :two: 为啥 npm-link 不能触发 store watch\n\n搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 `initWatcher` 的时候是否完成了 `Watcher#addDep`。\n** 结果发现，在 `Watcher.prototype.get`方法中 `pushTarget(this)`  Dep 指向 `webpack://${web_app}/./node_nodules/vue/dist/vue,common.dev.js`。\n而在 `Object.defineProperty#get` 方法中 `Dep.target` 代码 Dep 指向\n`webpack://${web_app}/${web_component}/node_modules/vue/dist/vue.common.dev.js`。 \n摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。\n\n**此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。**\n\n### :three: 如何解决问题\n\n在场景层将 vue 定义成 window 全局对象。在组件内使用 `window.Vue` 装载  vuex。自此，问题终结。修改方式：\n\n```javascript\n// 在前端应用入口文件中\nimport vue from 'vue';\nimport vuex from 'vuex';\nwindow.Vue = vue;\nvue.use(vuex);\n// 在被引用的组件入口文件中\nimport vuex from 'vuex';\nif (window.Vue) {\n    window.Vue.use(vuex);\n} else {\n    window.use(vuex);\n}\n```\n\n## :rabbit: 总结\n\n1. npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。\n2. 前端代码排查确是不如后端代码排查方便，啥 `console.warn` 都么得耗时长。\n\n## :sheep: 附件\n- [Vue源码解读之Dep,Observer和Watcher](https://segmentfault.com/a/1190000016208088)\n","source":"_posts/npm-link-VUEX-watch-怎么不生效.md","raw":"---\ntitle: npm-link VUEX watch 怎么不生效\ndate: 2023-04-02 19:07:36\ncategories:\n- code\ntags:\n- code\n- npm\n- 前端\n- npm-link\n---\n## :cat: 背景\n\n前端项目 `package.json` 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 `npm install --save-dev xxxx` 引入方式。\n对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 `npm install` 下载包调试。\n可以选用 [npm-link 方式](https://docs.npmjs.com/cli/v9/commands/npm-link/) 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。\n最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。\n个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是**原封**不动，包括 `node_modules`（最后发现也坏在此处）。\n搜索 google 和百度都没有有效的帖子。\n\n## :tiger: 问题跟进\n\n### :one: 搞懂 VUEX store 的 watch 原理\n\n**store watch 的初始化**\n\n`vue` 初始化时，会调用 `initState` 其中，会针对本 `vue` 的 watch 完成 `initWatch` 初始化。其中初始化过程中会调用 `Vue.prototype.$watch` (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 `watch handler` 方法。\n\n```javascript\nVue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      var info = \"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\";\n      pushTarget();\n      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);\n      popTarget();\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n```\n\n在 `new Watcher` 对象第一次获取 `watcher.value` 时，触发 `watcher` 对象的 Dep 依赖。\n\n```javascript\nvar Watcher = function Watcher (vm,  expOrFn,  cb,  options,  isRenderWatcher) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // 隐藏不需要关注的代码\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n    // 隐藏不需要关注的代码\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\nWatcher.prototype.get = function get () {\n  // 指定 Dep.target 为 watcher\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    if (this.deep) {\n      traverse(value);\n    }\n    // 退出 Dep.target 的指向  \n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n// 触发真实 get 时，完成了 watcher 的 Dep 依赖\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 忽略 set\n    get: function reactiveGetter () {\n        var value = getter ? getter.call(obj) : val;\n        if (Dep.target) {\n            dep.depend();\n            if (childOb) {\n                childOb.dep.depend();\n                if (Array.isArray(value)) {\n                    dependArray(value);\n                }\n            }\n        }\n        return value\n\t}\n}\n// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n```\n\n`Dep.prototype.depend` 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 `store watch init` 的链路如下，\n\n```\ndepend (vue.common.dev.js:726)\nreactiveGetter (vue.common.dev.js:1038)\nprototypeAccessors$1.state.get (vuex.esm.js:438)\n（匿名） (vue.common.dev.js:514)\nget (vue.common.dev.js:4490)\nWatcher (vue.common.dev.js:4479)\nVue.$watch (vue.common.dev.js:4953)\ncreateWatcher (vue.common.dev.js:4913)\ninitWatch (vue.common.dev.js:4895)\ninitState (vue.common.dev.js:4656)\nVue._init (vue.common.dev.js:5010)\nVueComponent (vue.common.dev.js:5157)\ncreateComponentInstanceForVnode (vue.common.dev.js:3307)\ninit (vue.common.dev.js:3136)\n```\n\n**store watch 的触发**\n\n`this.$store.commit('xxx', xxxx)` 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。\n\n```javascript\nObject.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    // 忽略 get\n    set: function reactiveSetter (newVal) {\n        var value = getter ? getter.call(obj) : val;\n        /* eslint-disable no-self-compare */\n        if (newVal === value || (newVal !== newVal && value !== value)) {\n            return\n        }\n        /* eslint-enable no-self-compare */\n        if (customSetter) {\n            customSetter();\n        }\n        // #7981: for accessor properties without setter\n        if (getter && !setter) { return }\n        if (setter) {\n            setter.call(obj, newVal);\n        } else {\n            val = newVal;\n        }\n        childOb = !shallow && observe(newVal);\n        // 触发通知\n        dep.notify();\n    }\n});\nDep.prototype.notify = function notify () {\n  var subs = this.subs.slice();\n // 忽略不重要代码\n  for (var i = 0, l = subs.length; i < l; i++) {\n    // watcher update\n    subs[i].update();\n  }\n};\n```\n\n其中 `notify` 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 `watcher#addDep` 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。`store watch notify` 的链路如下，\n\n```\nhandler (list_left.vue:411)\ninvokeWithErrorHandling (vue.common.dev.js:1868)\nrun (vue.common.dev.js:4579)\nflushSchedulerQueue (vue.common.dev.js:4323)\n（匿名） (vue.common.dev.js:1994)\nflushCallbacks (vue.common.dev.js:1920)\nPromise.then（异步）\ntimerFunc (vue.common.dev.js:1947)\nnextTick (vue.common.dev.js:2004)\nqueueWatcher (vue.common.dev.js:4415)\nupdate (vue.common.dev.js:4555)\nnotify (vue.common.dev.js:741)\nreactiveSetter (vue.common.dev.js:1066)\nproxySetter (vue.common.dev.js:4639)\nchangeAjlb (nav.vue:431)\n```\n\n以上，**watcher init** 和 **watcher 触发** 总结来说就是这个图。\n\n![](images/2023/npm_link_vuex_watch/link.png)\n\n### :two: 为啥 npm-link 不能触发 store watch\n\n搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 `initWatcher` 的时候是否完成了 `Watcher#addDep`。\n** 结果发现，在 `Watcher.prototype.get`方法中 `pushTarget(this)`  Dep 指向 `webpack://${web_app}/./node_nodules/vue/dist/vue,common.dev.js`。\n而在 `Object.defineProperty#get` 方法中 `Dep.target` 代码 Dep 指向\n`webpack://${web_app}/${web_component}/node_modules/vue/dist/vue.common.dev.js`。 \n摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。\n\n**此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。**\n\n### :three: 如何解决问题\n\n在场景层将 vue 定义成 window 全局对象。在组件内使用 `window.Vue` 装载  vuex。自此，问题终结。修改方式：\n\n```javascript\n// 在前端应用入口文件中\nimport vue from 'vue';\nimport vuex from 'vuex';\nwindow.Vue = vue;\nvue.use(vuex);\n// 在被引用的组件入口文件中\nimport vuex from 'vuex';\nif (window.Vue) {\n    window.Vue.use(vuex);\n} else {\n    window.use(vuex);\n}\n```\n\n## :rabbit: 总结\n\n1. npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。\n2. 前端代码排查确是不如后端代码排查方便，啥 `console.warn` 都么得耗时长。\n\n## :sheep: 附件\n- [Vue源码解读之Dep,Observer和Watcher](https://segmentfault.com/a/1190000016208088)\n","slug":"npm-link-VUEX-watch-怎么不生效","published":1,"updated":"2024-02-18T04:44:53.178Z","_id":"clfzbkh8y0000jn66bdl53b4s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"cat-背景\"><a href=\"#cat-背景\" class=\"headerlink\" title=\":cat: 背景\"></a><span class=\"github-emoji\"><span>🐱</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 背景</h2><p>前端项目 <code>package.json</code> 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 <code>npm install --save-dev xxxx</code> 引入方式。<br>对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 <code>npm install</code> 下载包调试。<br>可以选用 <a href=\"https://docs.npmjs.com/cli/v9/commands/npm-link/\">npm-link 方式</a> 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。<br>最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。<br>个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是<strong>原封</strong>不动，包括 <code>node_modules</code>（最后发现也坏在此处）。<br>搜索 google 和百度都没有有效的帖子。</p>\n<h2 id=\"tiger-问题跟进\"><a href=\"#tiger-问题跟进\" class=\"headerlink\" title=\":tiger: 问题跟进\"></a><span class=\"github-emoji\"><span>🐯</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 问题跟进</h2><h3 id=\"one-搞懂-VUEX-store-的-watch-原理\"><a href=\"#one-搞懂-VUEX-store-的-watch-原理\" class=\"headerlink\" title=\":one: 搞懂 VUEX store 的 watch 原理\"></a><span class=\"github-emoji\"><span>1⃣</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 搞懂 VUEX store 的 watch 原理</h3><p><strong>store watch 的初始化</strong></p>\n<p><code>vue</code> 初始化时，会调用 <code>initState</code> 其中，会针对本 <code>vue</code> 的 watch 完成 <code>initWatch</code> 初始化。其中初始化过程中会调用 <code>Vue.prototype.$watch</code> (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 <code>watch handler</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">expOrFn<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">createWatcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> expOrFn<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    options <span class=\"token operator\">=</span> options <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> expOrFn<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"callback for immediate watcher \\\"\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">invokeWithErrorHandling</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>watcher<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unwatchFn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      watcher<span class=\"token punctuation\">.</span><span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 <code>new Watcher</code> 对象第一次获取 <code>watcher.value</code> 时，触发 <code>watcher</code> 对象的 Dep 依赖。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Watcher</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Watcher</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span>  expOrFn<span class=\"token punctuation\">,</span>  cb<span class=\"token punctuation\">,</span>  options<span class=\"token punctuation\">,</span>  isRenderWatcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRenderWatcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vm<span class=\"token punctuation\">.</span>_watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  vm<span class=\"token punctuation\">.</span>_watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 隐藏不需要关注的代码</span>\n  <span class=\"token comment\">// parse expression for getter</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> expOrFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> expOrFn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> <span class=\"token function\">parsePath</span><span class=\"token punctuation\">(</span>expOrFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> noop<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 隐藏不需要关注的代码</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy\n    <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 指定 Dep.target 为 watcher</span>\n  <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"getter for watcher \\\"\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> e\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 退出 Dep.target 的指向  </span>\n    <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cleanupDeps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 触发真实 get 时，完成了 watcher 的 Dep 依赖</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 忽略 set</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> getter <span class=\"token operator\">?</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childOb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                childOb<span class=\"token punctuation\">.</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">dependArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> value\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。</span>\n<span class=\"token class-name\">Dep</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">depend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">depend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">addDep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联</span>\n<span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addDep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addDep</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dep</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> dep<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDepIds<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDepIds<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDeps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>depIds<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">addSub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Dep.prototype.depend</code> 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 <code>store watch init</code> 的链路如下，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">depend (vue.common.dev.js:726)\nreactiveGetter (vue.common.dev.js:1038)\nprototypeAccessors$1.state.get (vuex.esm.js:438)\n（匿名） (vue.common.dev.js:514)\nget (vue.common.dev.js:4490)\nWatcher (vue.common.dev.js:4479)\nVue.$watch (vue.common.dev.js:4953)\ncreateWatcher (vue.common.dev.js:4913)\ninitWatch (vue.common.dev.js:4895)\ninitState (vue.common.dev.js:4656)\nVue._init (vue.common.dev.js:5010)\nVueComponent (vue.common.dev.js:5157)\ncreateComponentInstanceForVnode (vue.common.dev.js:3307)\ninit (vue.common.dev.js:3136)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>store watch 的触发</strong></p>\n<p><code>this.$store.commit('xxx', xxxx)</code> 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 忽略 get</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveSetter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> getter <span class=\"token operator\">?</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* eslint-disable no-self-compare */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newVal <span class=\"token operator\">===</span> value <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>newVal <span class=\"token operator\">!==</span> newVal <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* eslint-enable no-self-compare */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customSetter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">customSetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// #7981: for accessor properties without setter</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getter <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>setter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            val <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        childOb <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>shallow <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 触发通知</span>\n        dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Dep</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">notify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> subs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 忽略不重要代码</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> subs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// watcher update</span>\n    subs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 <code>notify</code> 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 <code>watcher#addDep</code> 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。<code>store watch notify</code> 的链路如下，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">handler (list_left.vue:411)\ninvokeWithErrorHandling (vue.common.dev.js:1868)\nrun (vue.common.dev.js:4579)\nflushSchedulerQueue (vue.common.dev.js:4323)\n（匿名） (vue.common.dev.js:1994)\nflushCallbacks (vue.common.dev.js:1920)\nPromise.then（异步）\ntimerFunc (vue.common.dev.js:1947)\nnextTick (vue.common.dev.js:2004)\nqueueWatcher (vue.common.dev.js:4415)\nupdate (vue.common.dev.js:4555)\nnotify (vue.common.dev.js:741)\nreactiveSetter (vue.common.dev.js:1066)\nproxySetter (vue.common.dev.js:4639)\nchangeAjlb (nav.vue:431)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上，<strong>watcher init</strong> 和 <strong>watcher 触发</strong> 总结来说就是这个图。</p>\n<p><img src=\"/images/2023/npm_link_vuex_watch/link.png\"></p>\n<h3 id=\"two-为啥-npm-link-不能触发-store-watch\"><a href=\"#two-为啥-npm-link-不能触发-store-watch\" class=\"headerlink\" title=\":two: 为啥 npm-link 不能触发 store watch\"></a><span class=\"github-emoji\"><span>2⃣</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 为啥 npm-link 不能触发 store watch</h3><p>搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 <code>initWatcher</code> 的时候是否完成了 <code>Watcher#addDep</code>。<br>** 结果发现，在 <code>Watcher.prototype.get</code>方法中 <code>pushTarget(this)</code>  Dep 指向 <code>webpack://${web_app}/./node_nodules/vue/dist/vue,common.dev.js</code>。<br>而在 <code>Object.defineProperty#get</code> 方法中 <code>Dep.target</code> 代码 Dep 指向<br><code>webpack://${web_app}/${web_component}/node_modules/vue/dist/vue.common.dev.js</code>。<br>摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。</p>\n<p><strong>此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。</strong></p>\n<h3 id=\"three-如何解决问题\"><a href=\"#three-如何解决问题\" class=\"headerlink\" title=\":three: 如何解决问题\"></a><span class=\"github-emoji\"><span>3⃣</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 如何解决问题</h3><p>在场景层将 vue 定义成 window 全局对象。在组件内使用 <code>window.Vue</code> 装载  vuex。自此，问题终结。修改方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在前端应用入口文件中</span>\n<span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>Vue <span class=\"token operator\">=</span> vue<span class=\"token punctuation\">;</span>\nvue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在被引用的组件入口文件中</span>\n<span class=\"token keyword\">import</span> vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Vue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rabbit-总结\"><a href=\"#rabbit-总结\" class=\"headerlink\" title=\":rabbit: 总结\"></a><span class=\"github-emoji\"><span>🐰</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 总结</h2><ol>\n<li>npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。</li>\n<li>前端代码排查确是不如后端代码排查方便，啥 <code>console.warn</code> 都么得耗时长。</li>\n</ol>\n<h2 id=\"sheep-附件\"><a href=\"#sheep-附件\" class=\"headerlink\" title=\":sheep: 附件\"></a><span class=\"github-emoji\"><span>🐑</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 附件</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000016208088\">Vue源码解读之Dep,Observer和Watcher</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"cat-背景\"><a href=\"#cat-背景\" class=\"headerlink\" title=\":cat: 背景\"></a>:cat: 背景</h2><p>前端项目 <code>package.json</code> 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 <code>npm install --save-dev xxxx</code> 引入方式。<br>对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 <code>npm install</code> 下载包调试。<br>可以选用 <a href=\"https://docs.npmjs.com/cli/v9/commands/npm-link/\">npm-link 方式</a> 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。<br>最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。<br>个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是<strong>原封</strong>不动，包括 <code>node_modules</code>（最后发现也坏在此处）。<br>搜索 google 和百度都没有有效的帖子。</p>\n<h2 id=\"tiger-问题跟进\"><a href=\"#tiger-问题跟进\" class=\"headerlink\" title=\":tiger: 问题跟进\"></a>:tiger: 问题跟进</h2><h3 id=\"one-搞懂-VUEX-store-的-watch-原理\"><a href=\"#one-搞懂-VUEX-store-的-watch-原理\" class=\"headerlink\" title=\":one: 搞懂 VUEX store 的 watch 原理\"></a>:one: 搞懂 VUEX store 的 watch 原理</h3><p><strong>store watch 的初始化</strong></p>\n<p><code>vue</code> 初始化时，会调用 <code>initState</code> 其中，会针对本 <code>vue</code> 的 watch 完成 <code>initWatch</code> 初始化。其中初始化过程中会调用 <code>Vue.prototype.$watch</code> (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 <code>watch handler</code> 方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">expOrFn<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">createWatcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> expOrFn<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    options <span class=\"token operator\">=</span> options <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    options<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> expOrFn<span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>immediate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> info <span class=\"token operator\">=</span> <span class=\"token string\">\"callback for immediate watcher \\\"\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>watcher<span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">invokeWithErrorHandling</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>watcher<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unwatchFn</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      watcher<span class=\"token punctuation\">.</span><span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 <code>new Watcher</code> 对象第一次获取 <code>watcher.value</code> 时，触发 <code>watcher</code> 对象的 Dep 依赖。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Watcher</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Watcher</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span>  expOrFn<span class=\"token punctuation\">,</span>  cb<span class=\"token punctuation\">,</span>  options<span class=\"token punctuation\">,</span>  isRenderWatcher</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRenderWatcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    vm<span class=\"token punctuation\">.</span>_watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  vm<span class=\"token punctuation\">.</span>_watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 隐藏不需要关注的代码</span>\n  <span class=\"token comment\">// parse expression for getter</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> expOrFn <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> expOrFn<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> <span class=\"token function\">parsePath</span><span class=\"token punctuation\">(</span>expOrFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> noop<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 隐藏不需要关注的代码</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lazy\n    <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 指定 Dep.target 为 watcher</span>\n  <span class=\"token function\">pushTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"getter for watcher \\\"\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>expression<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> e\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deep<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 退出 Dep.target 的指向  </span>\n    <span class=\"token function\">popTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cleanupDeps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> value\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 触发真实 get 时，完成了 watcher 的 Dep 依赖</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 忽略 set</span>\n    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> getter <span class=\"token operator\">?</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>childOb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                childOb<span class=\"token punctuation\">.</span>dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">dependArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> value\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。</span>\n<span class=\"token class-name\">Dep</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">depend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">depend</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">addDep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联</span>\n<span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addDep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addDep</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dep</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> dep<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDepIds<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDepIds<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>newDeps<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>depIds<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      dep<span class=\"token punctuation\">.</span><span class=\"token function\">addSub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Dep.prototype.depend</code> 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 <code>store watch init</code> 的链路如下，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">depend (vue.common.dev.js:726)\nreactiveGetter (vue.common.dev.js:1038)\nprototypeAccessors$1.state.get (vuex.esm.js:438)\n（匿名） (vue.common.dev.js:514)\nget (vue.common.dev.js:4490)\nWatcher (vue.common.dev.js:4479)\nVue.$watch (vue.common.dev.js:4953)\ncreateWatcher (vue.common.dev.js:4913)\ninitWatch (vue.common.dev.js:4895)\ninitState (vue.common.dev.js:4656)\nVue._init (vue.common.dev.js:5010)\nVueComponent (vue.common.dev.js:5157)\ncreateComponentInstanceForVnode (vue.common.dev.js:3307)\ninit (vue.common.dev.js:3136)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>store watch 的触发</strong></p>\n<p><code>this.$store.commit(&#39;xxx&#39;, xxxx)</code> 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 忽略 get</span>\n    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reactiveSetter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> getter <span class=\"token operator\">?</span> <span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* eslint-disable no-self-compare */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newVal <span class=\"token operator\">===</span> value <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>newVal <span class=\"token operator\">!==</span> newVal <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">/* eslint-enable no-self-compare */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>customSetter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">customSetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// #7981: for accessor properties without setter</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getter <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>setter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            val <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        childOb <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>shallow <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 触发通知</span>\n        dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Dep</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">notify</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">notify</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> subs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// 忽略不重要代码</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> subs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// watcher update</span>\n    subs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中 <code>notify</code> 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 <code>watcher#addDep</code> 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。<code>store watch notify</code> 的链路如下，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">handler (list_left.vue:411)\ninvokeWithErrorHandling (vue.common.dev.js:1868)\nrun (vue.common.dev.js:4579)\nflushSchedulerQueue (vue.common.dev.js:4323)\n（匿名） (vue.common.dev.js:1994)\nflushCallbacks (vue.common.dev.js:1920)\nPromise.then（异步）\ntimerFunc (vue.common.dev.js:1947)\nnextTick (vue.common.dev.js:2004)\nqueueWatcher (vue.common.dev.js:4415)\nupdate (vue.common.dev.js:4555)\nnotify (vue.common.dev.js:741)\nreactiveSetter (vue.common.dev.js:1066)\nproxySetter (vue.common.dev.js:4639)\nchangeAjlb (nav.vue:431)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上，<strong>watcher init</strong> 和 <strong>watcher 触发</strong> 总结来说就是这个图。</p>\n<p><img src=\"/images/2023/npm_link_vuex_watch/link.png\"></p>\n<h3 id=\"two-为啥-npm-link-不能触发-store-watch\"><a href=\"#two-为啥-npm-link-不能触发-store-watch\" class=\"headerlink\" title=\":two: 为啥 npm-link 不能触发 store watch\"></a>:two: 为啥 npm-link 不能触发 store watch</h3><p>搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 <code>initWatcher</code> 的时候是否完成了 <code>Watcher#addDep</code>。<br>** 结果发现，在 <code>Watcher.prototype.get</code>方法中 <code>pushTarget(this)</code>  Dep 指向 <code>webpack://$&#123;web_app&#125;/./node_nodules/vue/dist/vue,common.dev.js</code>。<br>而在 <code>Object.defineProperty#get</code> 方法中 <code>Dep.target</code> 代码 Dep 指向<br><code>webpack://$&#123;web_app&#125;/$&#123;web_component&#125;/node_modules/vue/dist/vue.common.dev.js</code>。<br>摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。</p>\n<p><strong>此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。</strong></p>\n<h3 id=\"three-如何解决问题\"><a href=\"#three-如何解决问题\" class=\"headerlink\" title=\":three: 如何解决问题\"></a>:three: 如何解决问题</h3><p>在场景层将 vue 定义成 window 全局对象。在组件内使用 <code>window.Vue</code> 装载  vuex。自此，问题终结。修改方式：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在前端应用入口文件中</span>\n<span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>Vue <span class=\"token operator\">=</span> vue<span class=\"token punctuation\">;</span>\nvue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在被引用的组件入口文件中</span>\n<span class=\"token keyword\">import</span> vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Vue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    window<span class=\"token punctuation\">.</span>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>vuex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"rabbit-总结\"><a href=\"#rabbit-总结\" class=\"headerlink\" title=\":rabbit: 总结\"></a>:rabbit: 总结</h2><ol>\n<li>npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。</li>\n<li>前端代码排查确是不如后端代码排查方便，啥 <code>console.warn</code> 都么得耗时长。</li>\n</ol>\n<h2 id=\"sheep-附件\"><a href=\"#sheep-附件\" class=\"headerlink\" title=\":sheep: 附件\"></a>:sheep: 附件</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000016208088\">Vue源码解读之Dep,Observer和Watcher</a></li>\n</ul>\n"},{"title":"json 工具我应该怎么选？","date":"2023-05-18T15:25:00.000Z","_content":"\n编程多年，其实适合项目/自己/团队才是合适的。JSON 在 B/S 应用下，作为轻量级的数据交换方式。也应运而生不少序列化反序列化的 JSON 工具包。\n比如，json-lib、fastjson、gson、jackson 等。我用过的，主要是这几个就说说我的选择场景及依据。\n\n### json-lib\n\n这是我**被迫**使用的 JSON 工具包。不是主动选择，也是因为确实觉得很坑。**首先**，序列化和反序列化耗时很慢。**其次**，`JSONObject.getXXX(key)` JSONObject\n的 get 系方法都必须要求 key 必须在 JSON 串中且非空。也就是被使用的 key 都必须是非空值，所以就逼迫设置默认值。但这样可能会导致业务被\"逼不得已\"的默认值覆盖。**第三**，`JSONObject.put(key,value)` 方法会针对 value 类型为 String 且符合 JSON 格式时，会将 value 反序列化。这个特性看似很好，其实在特定场景下，给人误导，\n以为 value 是 JSONObject 结果发现是 String。Oh my god ！！总结，坑比较多，不建议使用。\n\n### fastjson\n\n阿里巴巴出品，使用是很简单，基于类属性 get/set 来序列化和非序列化。包括也支持很多选项 `FastJsonConfig` 、 `SerializerFeature`。对研发来说，序列化反序列化使用\n起来也很简单，性能也偏好。以为应该是很受欢迎，但 github 上 issue 很多。传说中源码写的不好，也没什么注释。所以，不是最受欢迎，在中国很有地位。\n\n### jackson\n\n被 spring-web 用作默认的 `application/json` 序列化和反序列化 JSON 选型。依赖的 jar 包少，提供扩展选项/高级功能很多。对我而言，相比较 fastjson 而言，使用\n不方便。对于 String 转 Date 时，必须指定 `@JsonProperty(format='xxxx')` 格式化字段。\n\n### gson\n\ngoogle 推出 JSON 工具包，符合 JSON 格式定义，是依据属性进行序列化和反序列化，包含 public、private、protected 修饰字段。转 List、Set 集合类，相比 fastjson 支持\n的很好。但是性能相比而言会弱一些。\n\n### **如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。**\n\n","source":"_posts/json-工具我应该怎么选.md","raw":"---\ntitle: json 工具我应该怎么选？\ndate: 2023-05-18 23:25:00\ncategories:\n- 选型\ntags:\n- tools\n- 选型\n---\n\n编程多年，其实适合项目/自己/团队才是合适的。JSON 在 B/S 应用下，作为轻量级的数据交换方式。也应运而生不少序列化反序列化的 JSON 工具包。\n比如，json-lib、fastjson、gson、jackson 等。我用过的，主要是这几个就说说我的选择场景及依据。\n\n### json-lib\n\n这是我**被迫**使用的 JSON 工具包。不是主动选择，也是因为确实觉得很坑。**首先**，序列化和反序列化耗时很慢。**其次**，`JSONObject.getXXX(key)` JSONObject\n的 get 系方法都必须要求 key 必须在 JSON 串中且非空。也就是被使用的 key 都必须是非空值，所以就逼迫设置默认值。但这样可能会导致业务被\"逼不得已\"的默认值覆盖。**第三**，`JSONObject.put(key,value)` 方法会针对 value 类型为 String 且符合 JSON 格式时，会将 value 反序列化。这个特性看似很好，其实在特定场景下，给人误导，\n以为 value 是 JSONObject 结果发现是 String。Oh my god ！！总结，坑比较多，不建议使用。\n\n### fastjson\n\n阿里巴巴出品，使用是很简单，基于类属性 get/set 来序列化和非序列化。包括也支持很多选项 `FastJsonConfig` 、 `SerializerFeature`。对研发来说，序列化反序列化使用\n起来也很简单，性能也偏好。以为应该是很受欢迎，但 github 上 issue 很多。传说中源码写的不好，也没什么注释。所以，不是最受欢迎，在中国很有地位。\n\n### jackson\n\n被 spring-web 用作默认的 `application/json` 序列化和反序列化 JSON 选型。依赖的 jar 包少，提供扩展选项/高级功能很多。对我而言，相比较 fastjson 而言，使用\n不方便。对于 String 转 Date 时，必须指定 `@JsonProperty(format='xxxx')` 格式化字段。\n\n### gson\n\ngoogle 推出 JSON 工具包，符合 JSON 格式定义，是依据属性进行序列化和反序列化，包含 public、private、protected 修饰字段。转 List、Set 集合类，相比 fastjson 支持\n的很好。但是性能相比而言会弱一些。\n\n### **如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。**\n\n","slug":"json-工具我应该怎么选","published":1,"updated":"2024-02-18T04:45:25.041Z","_id":"cls1thesj0001wt66f6209cb9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>编程多年，其实适合项目/自己/团队才是合适的。JSON 在 B/S 应用下，作为轻量级的数据交换方式。也应运而生不少序列化反序列化的 JSON 工具包。<br>比如，json-lib、fastjson、gson、jackson 等。我用过的，主要是这几个就说说我的选择场景及依据。</p>\n<h3 id=\"json-lib\"><a href=\"#json-lib\" class=\"headerlink\" title=\"json-lib\"></a>json-lib</h3><p>这是我<strong>被迫</strong>使用的 JSON 工具包。不是主动选择，也是因为确实觉得很坑。<strong>首先</strong>，序列化和反序列化耗时很慢。<strong>其次</strong>，<code>JSONObject.getXXX(key)</code> JSONObject<br>的 get 系方法都必须要求 key 必须在 JSON 串中且非空。也就是被使用的 key 都必须是非空值，所以就逼迫设置默认值。但这样可能会导致业务被”逼不得已”的默认值覆盖。<strong>第三</strong>，<code>JSONObject.put(key,value)</code> 方法会针对 value 类型为 String 且符合 JSON 格式时，会将 value 反序列化。这个特性看似很好，其实在特定场景下，给人误导，<br>以为 value 是 JSONObject 结果发现是 String。Oh my god ！！总结，坑比较多，不建议使用。</p>\n<h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><p>阿里巴巴出品，使用是很简单，基于类属性 get/set 来序列化和非序列化。包括也支持很多选项 <code>FastJsonConfig</code> 、 <code>SerializerFeature</code>。对研发来说，序列化反序列化使用<br>起来也很简单，性能也偏好。以为应该是很受欢迎，但 github 上 issue 很多。传说中源码写的不好，也没什么注释。所以，不是最受欢迎，在中国很有地位。</p>\n<h3 id=\"jackson\"><a href=\"#jackson\" class=\"headerlink\" title=\"jackson\"></a>jackson</h3><p>被 spring-web 用作默认的 <code>application/json</code> 序列化和反序列化 JSON 选型。依赖的 jar 包少，提供扩展选项/高级功能很多。对我而言，相比较 fastjson 而言，使用<br>不方便。对于 String 转 Date 时，必须指定 <code>@JsonProperty(format='xxxx')</code> 格式化字段。</p>\n<h3 id=\"gson\"><a href=\"#gson\" class=\"headerlink\" title=\"gson\"></a>gson</h3><p>google 推出 JSON 工具包，符合 JSON 格式定义，是依据属性进行序列化和反序列化，包含 public、private、protected 修饰字段。转 List、Set 集合类，相比 fastjson 支持<br>的很好。但是性能相比而言会弱一些。</p>\n<h3 id=\"如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。\"><a href=\"#如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。\" class=\"headerlink\" title=\"如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。\"></a><strong>如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。</strong></h3>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<p>编程多年，其实适合项目/自己/团队才是合适的。JSON 在 B/S 应用下，作为轻量级的数据交换方式。也应运而生不少序列化反序列化的 JSON 工具包。<br>比如，json-lib、fastjson、gson、jackson 等。我用过的，主要是这几个就说说我的选择场景及依据。</p>\n<h3 id=\"json-lib\"><a href=\"#json-lib\" class=\"headerlink\" title=\"json-lib\"></a>json-lib</h3><p>这是我<strong>被迫</strong>使用的 JSON 工具包。不是主动选择，也是因为确实觉得很坑。<strong>首先</strong>，序列化和反序列化耗时很慢。<strong>其次</strong>，<code>JSONObject.getXXX(key)</code> JSONObject<br>的 get 系方法都必须要求 key 必须在 JSON 串中且非空。也就是被使用的 key 都必须是非空值，所以就逼迫设置默认值。但这样可能会导致业务被”逼不得已”的默认值覆盖。<strong>第三</strong>，<code>JSONObject.put(key,value)</code> 方法会针对 value 类型为 String 且符合 JSON 格式时，会将 value 反序列化。这个特性看似很好，其实在特定场景下，给人误导，<br>以为 value 是 JSONObject 结果发现是 String。Oh my god ！！总结，坑比较多，不建议使用。</p>\n<h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><p>阿里巴巴出品，使用是很简单，基于类属性 get/set 来序列化和非序列化。包括也支持很多选项 <code>FastJsonConfig</code> 、 <code>SerializerFeature</code>。对研发来说，序列化反序列化使用<br>起来也很简单，性能也偏好。以为应该是很受欢迎，但 github 上 issue 很多。传说中源码写的不好，也没什么注释。所以，不是最受欢迎，在中国很有地位。</p>\n<h3 id=\"jackson\"><a href=\"#jackson\" class=\"headerlink\" title=\"jackson\"></a>jackson</h3><p>被 spring-web 用作默认的 <code>application/json</code> 序列化和反序列化 JSON 选型。依赖的 jar 包少，提供扩展选项/高级功能很多。对我而言，相比较 fastjson 而言，使用<br>不方便。对于 String 转 Date 时，必须指定 <code>@JsonProperty(format=&#39;xxxx&#39;)</code> 格式化字段。</p>\n<h3 id=\"gson\"><a href=\"#gson\" class=\"headerlink\" title=\"gson\"></a>gson</h3><p>google 推出 JSON 工具包，符合 JSON 格式定义，是依据属性进行序列化和反序列化，包含 public、private、protected 修饰字段。转 List、Set 集合类，相比 fastjson 支持<br>的很好。但是性能相比而言会弱一些。</p>\n<h3 id=\"如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。\"><a href=\"#如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。\" class=\"headerlink\" title=\"如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。\"></a><strong>如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。</strong></h3>"},{"title":"spring-security中遇见的耗时小坑","date":"2023-04-10T14:01:52.000Z","_content":"\n## :pear: 背景\n\n客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。\n\n## :orange: 问题跟进\n\n### :one: 明确运维说『来回跳转』到底涉及那些地址\n\n让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 `Preserve log`（保留请求日志），就能记录浏览器『来回跳转』网络请求。\n\n```\n${应用}/login/cas?st=xxxxx\n${SSO-server}/login?service=encodeURIComponent(${应用}/login/cas)\n```\n\n就是这两个地址『来回跳转』。从这里能得做出如下推断:\n\n1. SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。\n2. 应用 `/login/cas` 请求，通过后台调用 SSO server 的 validate 接口完成 st（`service ticket`）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。\n\n总结，说明问题出在应用 `/login/cas` 请求认证中，虽然不敢相信但『事实胜于雄辩』。\n\n### :two: 在应用后端找找原因\n\n为什么上面说 `/login/cas` 不敢相信有问题，因为应用后端使用 `spring-security-cas` 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？\n\n`spring-security-cas` 组件，有几个重要组成类：\n\n- `CasAuthenticationFilter`：`CAS` 验证过滤器，`/login/cas` 请求验证入口。其中， `attemptAuthentication()` 其中包含验证方法 ，验证不通过则抛出 `AuthenticationException`。`successfulAuthentication` 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。`unsuccessfulAuthentication` 则是验证失败后执行逻辑，是重定向到 `/login` 登录请求。\n- `CasAuthenticationProvider`：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。\n- `AbstractCasProtocolUrlBasedTicketValidator`：被 `CasAuthenticationProvider` 类调用，完成调用 SSO server validate 接口验证`serviceTicket`。\n- `AbstractCasAssertionUserDetailsService`：被 `CasAuthenticationProvider` 类调用，完成用户及权限信息的装载。\n\n关键代码如下，其中会导致进入 `unsuccessfulAuthentication()` 逻辑的，是抛出 `TicketValidationException` 异常。那也就是 `ticketValidator.validate()` 、 `authenticationUserDetailsService.loadUserDetails()` 或 `userDetailsChecker.check()` 逻辑点抛出异常。\n\n```java\n// CasAuthenticationProvider\nprivate CasAuthenticationToken authenticateNow(final Authentication authentication) throws AuthenticationException {\n  try {\n    Assertion assertion = this.ticketValidator.validate(authentication.getCredentials().toString(), getServiceUrl(authentication));\n    UserDetails userDetails = loadUserByAssertion(assertion);\n    this.userDetailsChecker.check(userDetails);\n    return new CasAuthenticationToken(this.key, userDetails, authentication.getCredentials(), this.authoritiesMapper.mapAuthorities(userDetails.getAuthorities()), userDetails, assertion);\n  } catch (TicketValidationException ex) {\n    throw new BadCredentialsException(ex.getMessage, ex);\n  }\n}\nprotected UserDetails loadUserByAssertion(final Assertion assertion) {\n  final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken(assertion, \"\");\n  return this.authenticationUserDetailsService.loadUserDetails(token);\n}\n```\n而后，现场通过 `arthas` 工具代码 `watch` 命令，监听代码明确异常抛出位置。最后，是在 `authenticationUserDetailsService.loadUserDetails()` 应用自己实现类上抛出了  `UsernameNotFoundException` 异常。\n\n```java\npublic UserDetails loadUserDetails(CasAssertionAuthenticationToken token) {\n        Map<String, Object> attributes = getPrincipalAttributes(token);\n        if (MapUtils.isEmpty(attributes)) {\n            log.warn(\"{} 没有额外的元数据\", token.getName());\n            throw new UsernameNotFoundException(token.getName() + \"没有额外的元数据\");\n        }\n        String loginId = getLoginId(attributes);\n        if (StringUtils.isBlank(loginId)) {\n            log.warn(\"{} 没有登录标识\", loginId);\n            throw new UsernameNotFoundException(String.format(\"%s没有登录标识\", loginId));\n        }\n        String corpId = getCorpId(attributes);\n        UserDO userDO = loadUserDO(loginId, corpId);\n        List<GrantedAuthority> grantedAuthorities = getDefaultUserAuthorities(userDO.getId());\n        return new CommonUserDetails(userDO.getLoginId(), userDO.getPassword(), grantedAuthorities, userDO);\n    }\n```\n\n### :three: 到底是为什么有异常没有日志输出呢？\n\n最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 `AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()` 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。\n\n```java\nprotected void unsuccessfulAuthentication(HttpServletRequest request,\n\t\t\tHttpServletResponse response, AuthenticationException failed)\n\t\t\tthrows IOException, ServletException {\n\t\tSecurityContextHolder.clearContext();\n\t\t\tlogger.trace(\"Failed to process authentication request\", failed);\n\t\t\tlogger.trace(\"Cleared SecurityContextHolder\");\n\t\t\tlogger.trace(\"Handling authentication failure\");\n\t\trememberMeServices.loginFail(request, response);\n\t\tfailureHandler.onAuthenticationFailure(request, response, failed);\n\t}\n```\n\n### :banana: 未提及的基础知识\n\n- [CAS 官网](https://apereo.github.io/cas/6.6.x/index.html)\n","source":"_posts/spring-security中遇见的耗时小坑.md","raw":"---\ntitle: spring-security中遇见的耗时小坑\ndate: 2023-04-10 22:01:52\ncategories:\n- code\ntags: \n- code\n- spring-security\n- cas\n- relogin\n---\n\n## :pear: 背景\n\n客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。\n\n## :orange: 问题跟进\n\n### :one: 明确运维说『来回跳转』到底涉及那些地址\n\n让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 `Preserve log`（保留请求日志），就能记录浏览器『来回跳转』网络请求。\n\n```\n${应用}/login/cas?st=xxxxx\n${SSO-server}/login?service=encodeURIComponent(${应用}/login/cas)\n```\n\n就是这两个地址『来回跳转』。从这里能得做出如下推断:\n\n1. SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。\n2. 应用 `/login/cas` 请求，通过后台调用 SSO server 的 validate 接口完成 st（`service ticket`）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。\n\n总结，说明问题出在应用 `/login/cas` 请求认证中，虽然不敢相信但『事实胜于雄辩』。\n\n### :two: 在应用后端找找原因\n\n为什么上面说 `/login/cas` 不敢相信有问题，因为应用后端使用 `spring-security-cas` 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？\n\n`spring-security-cas` 组件，有几个重要组成类：\n\n- `CasAuthenticationFilter`：`CAS` 验证过滤器，`/login/cas` 请求验证入口。其中， `attemptAuthentication()` 其中包含验证方法 ，验证不通过则抛出 `AuthenticationException`。`successfulAuthentication` 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。`unsuccessfulAuthentication` 则是验证失败后执行逻辑，是重定向到 `/login` 登录请求。\n- `CasAuthenticationProvider`：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。\n- `AbstractCasProtocolUrlBasedTicketValidator`：被 `CasAuthenticationProvider` 类调用，完成调用 SSO server validate 接口验证`serviceTicket`。\n- `AbstractCasAssertionUserDetailsService`：被 `CasAuthenticationProvider` 类调用，完成用户及权限信息的装载。\n\n关键代码如下，其中会导致进入 `unsuccessfulAuthentication()` 逻辑的，是抛出 `TicketValidationException` 异常。那也就是 `ticketValidator.validate()` 、 `authenticationUserDetailsService.loadUserDetails()` 或 `userDetailsChecker.check()` 逻辑点抛出异常。\n\n```java\n// CasAuthenticationProvider\nprivate CasAuthenticationToken authenticateNow(final Authentication authentication) throws AuthenticationException {\n  try {\n    Assertion assertion = this.ticketValidator.validate(authentication.getCredentials().toString(), getServiceUrl(authentication));\n    UserDetails userDetails = loadUserByAssertion(assertion);\n    this.userDetailsChecker.check(userDetails);\n    return new CasAuthenticationToken(this.key, userDetails, authentication.getCredentials(), this.authoritiesMapper.mapAuthorities(userDetails.getAuthorities()), userDetails, assertion);\n  } catch (TicketValidationException ex) {\n    throw new BadCredentialsException(ex.getMessage, ex);\n  }\n}\nprotected UserDetails loadUserByAssertion(final Assertion assertion) {\n  final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken(assertion, \"\");\n  return this.authenticationUserDetailsService.loadUserDetails(token);\n}\n```\n而后，现场通过 `arthas` 工具代码 `watch` 命令，监听代码明确异常抛出位置。最后，是在 `authenticationUserDetailsService.loadUserDetails()` 应用自己实现类上抛出了  `UsernameNotFoundException` 异常。\n\n```java\npublic UserDetails loadUserDetails(CasAssertionAuthenticationToken token) {\n        Map<String, Object> attributes = getPrincipalAttributes(token);\n        if (MapUtils.isEmpty(attributes)) {\n            log.warn(\"{} 没有额外的元数据\", token.getName());\n            throw new UsernameNotFoundException(token.getName() + \"没有额外的元数据\");\n        }\n        String loginId = getLoginId(attributes);\n        if (StringUtils.isBlank(loginId)) {\n            log.warn(\"{} 没有登录标识\", loginId);\n            throw new UsernameNotFoundException(String.format(\"%s没有登录标识\", loginId));\n        }\n        String corpId = getCorpId(attributes);\n        UserDO userDO = loadUserDO(loginId, corpId);\n        List<GrantedAuthority> grantedAuthorities = getDefaultUserAuthorities(userDO.getId());\n        return new CommonUserDetails(userDO.getLoginId(), userDO.getPassword(), grantedAuthorities, userDO);\n    }\n```\n\n### :three: 到底是为什么有异常没有日志输出呢？\n\n最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 `AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()` 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。\n\n```java\nprotected void unsuccessfulAuthentication(HttpServletRequest request,\n\t\t\tHttpServletResponse response, AuthenticationException failed)\n\t\t\tthrows IOException, ServletException {\n\t\tSecurityContextHolder.clearContext();\n\t\t\tlogger.trace(\"Failed to process authentication request\", failed);\n\t\t\tlogger.trace(\"Cleared SecurityContextHolder\");\n\t\t\tlogger.trace(\"Handling authentication failure\");\n\t\trememberMeServices.loginFail(request, response);\n\t\tfailureHandler.onAuthenticationFailure(request, response, failed);\n\t}\n```\n\n### :banana: 未提及的基础知识\n\n- [CAS 官网](https://apereo.github.io/cas/6.6.x/index.html)\n","slug":"spring-security中遇见的耗时小坑","published":1,"updated":"2024-02-18T04:44:28.240Z","_id":"cls1thesk0002wt66et9r7pp5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"pear-背景\"><a href=\"#pear-背景\" class=\"headerlink\" title=\":pear: 背景\"></a><span class=\"github-emoji\"><span>🍐</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 背景</h2><p>客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。</p>\n<h2 id=\"orange-问题跟进\"><a href=\"#orange-问题跟进\" class=\"headerlink\" title=\":orange: 问题跟进\"></a><span class=\"github-emoji\"><span>🍊</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 问题跟进</h2><h3 id=\"one-明确运维说『来回跳转』到底涉及那些地址\"><a href=\"#one-明确运维说『来回跳转』到底涉及那些地址\" class=\"headerlink\" title=\":one: 明确运维说『来回跳转』到底涉及那些地址\"></a><span class=\"github-emoji\"><span>1⃣</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 明确运维说『来回跳转』到底涉及那些地址</h3><p>让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 <code>Preserve log</code>（保留请求日志），就能记录浏览器『来回跳转』网络请求。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">${应用}/login/cas?st=xxxxx\n${SSO-server}/login?service=encodeURIComponent(${应用}/login/cas)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就是这两个地址『来回跳转』。从这里能得做出如下推断:</p>\n<ol>\n<li>SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。</li>\n<li>应用 <code>/login/cas</code> 请求，通过后台调用 SSO server 的 validate 接口完成 st（<code>service ticket</code>）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。</li>\n</ol>\n<p>总结，说明问题出在应用 <code>/login/cas</code> 请求认证中，虽然不敢相信但『事实胜于雄辩』。</p>\n<h3 id=\"two-在应用后端找找原因\"><a href=\"#two-在应用后端找找原因\" class=\"headerlink\" title=\":two: 在应用后端找找原因\"></a><span class=\"github-emoji\"><span>2⃣</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 在应用后端找找原因</h3><p>为什么上面说 <code>/login/cas</code> 不敢相信有问题，因为应用后端使用 <code>spring-security-cas</code> 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？</p>\n<p><code>spring-security-cas</code> 组件，有几个重要组成类：</p>\n<ul>\n<li><code>CasAuthenticationFilter</code>：<code>CAS</code> 验证过滤器，<code>/login/cas</code> 请求验证入口。其中， <code>attemptAuthentication()</code> 其中包含验证方法 ，验证不通过则抛出 <code>AuthenticationException</code>。<code>successfulAuthentication</code> 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。<code>unsuccessfulAuthentication</code> 则是验证失败后执行逻辑，是重定向到 <code>/login</code> 登录请求。</li>\n<li><code>CasAuthenticationProvider</code>：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。</li>\n<li><code>AbstractCasProtocolUrlBasedTicketValidator</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成调用 SSO server validate 接口验证<code>serviceTicket</code>。</li>\n<li><code>AbstractCasAssertionUserDetailsService</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成用户及权限信息的装载。</li>\n</ul>\n<p>关键代码如下，其中会导致进入 <code>unsuccessfulAuthentication()</code> 逻辑的，是抛出 <code>TicketValidationException</code> 异常。那也就是 <code>ticketValidator.validate()</code> 、 <code>authenticationUserDetailsService.loadUserDetails()</code> 或 <code>userDetailsChecker.check()</code> 逻辑点抛出异常。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// CasAuthenticationProvider</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">CasAuthenticationToken</span> <span class=\"token function\">authenticateNow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Assertion</span> assertion <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ticketValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getServiceUrl</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> <span class=\"token function\">loadUserByAssertion</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDetailsChecker<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAuthenticationToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authoritiesMapper<span class=\"token punctuation\">.</span><span class=\"token function\">mapAuthorities</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">,</span> assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TicketValidationException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>getMessage<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByAssertion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Assertion</span> assertion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">CasAssertionAuthenticationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAssertionAuthenticationToken</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authenticationUserDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserDetails</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而后，现场通过 <code>arthas</code> 工具代码 <code>watch</code> 命令，监听代码明确异常抛出位置。最后，是在 <code>authenticationUserDetailsService.loadUserDetails()</code> 应用自己实现类上抛出了  <code>UsernameNotFoundException</code> 异常。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserDetails</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CasAssertionAuthenticationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">&gt;</span></span> attributes <span class=\"token operator\">=</span> <span class=\"token function\">getPrincipalAttributes</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MapUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 没有额外的元数据\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"没有额外的元数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> loginId <span class=\"token operator\">=</span> <span class=\"token function\">getLoginId</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>loginId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} 没有登录标识\"</span><span class=\"token punctuation\">,</span> loginId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s没有登录标识\"</span><span class=\"token punctuation\">,</span> loginId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> corpId <span class=\"token operator\">=</span> <span class=\"token function\">getCorpId</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserDO</span> userDO <span class=\"token operator\">=</span> <span class=\"token function\">loadUserDO</span><span class=\"token punctuation\">(</span>loginId<span class=\"token punctuation\">,</span> corpId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">&gt;</span></span> grantedAuthorities <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultUserAuthorities</span><span class=\"token punctuation\">(</span>userDO<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonUserDetails</span><span class=\"token punctuation\">(</span>userDO<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userDO<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> grantedAuthorities<span class=\"token punctuation\">,</span> userDO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"three-到底是为什么有异常没有日志输出呢？\"><a href=\"#three-到底是为什么有异常没有日志输出呢？\" class=\"headerlink\" title=\":three: 到底是为什么有异常没有日志输出呢？\"></a><span class=\"github-emoji\"><span>3⃣</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 到底是为什么有异常没有日志输出呢？</h3><p>最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 <code>AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()</code> 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unsuccessfulAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> failed<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to process authentication request\"</span><span class=\"token punctuation\">,</span> failed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleared SecurityContextHolder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handling authentication failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trememberMeServices<span class=\"token punctuation\">.</span><span class=\"token function\">loginFail</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfailureHandler<span class=\"token punctuation\">.</span><span class=\"token function\">onAuthenticationFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> failed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"banana-未提及的基础知识\"><a href=\"#banana-未提及的基础知识\" class=\"headerlink\" title=\":banana: 未提及的基础知识\"></a><span class=\"github-emoji\"><span>🍌</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 未提及的基础知识</h3><ul>\n<li><a href=\"https://apereo.github.io/cas/6.6.x/index.html\">CAS 官网</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"pear-背景\"><a href=\"#pear-背景\" class=\"headerlink\" title=\":pear: 背景\"></a>:pear: 背景</h2><p>客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。</p>\n<h2 id=\"orange-问题跟进\"><a href=\"#orange-问题跟进\" class=\"headerlink\" title=\":orange: 问题跟进\"></a>:orange: 问题跟进</h2><h3 id=\"one-明确运维说『来回跳转』到底涉及那些地址\"><a href=\"#one-明确运维说『来回跳转』到底涉及那些地址\" class=\"headerlink\" title=\":one: 明确运维说『来回跳转』到底涉及那些地址\"></a>:one: 明确运维说『来回跳转』到底涉及那些地址</h3><p>让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 <code>Preserve log</code>（保留请求日志），就能记录浏览器『来回跳转』网络请求。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$&#123;应用&#125;&#x2F;login&#x2F;cas?st&#x3D;xxxxx\n$&#123;SSO-server&#125;&#x2F;login?service&#x3D;encodeURIComponent($&#123;应用&#125;&#x2F;login&#x2F;cas)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就是这两个地址『来回跳转』。从这里能得做出如下推断:</p>\n<ol>\n<li>SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。</li>\n<li>应用 <code>/login/cas</code> 请求，通过后台调用 SSO server 的 validate 接口完成 st（<code>service ticket</code>）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。</li>\n</ol>\n<p>总结，说明问题出在应用 <code>/login/cas</code> 请求认证中，虽然不敢相信但『事实胜于雄辩』。</p>\n<h3 id=\"two-在应用后端找找原因\"><a href=\"#two-在应用后端找找原因\" class=\"headerlink\" title=\":two: 在应用后端找找原因\"></a>:two: 在应用后端找找原因</h3><p>为什么上面说 <code>/login/cas</code> 不敢相信有问题，因为应用后端使用 <code>spring-security-cas</code> 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？</p>\n<p><code>spring-security-cas</code> 组件，有几个重要组成类：</p>\n<ul>\n<li><code>CasAuthenticationFilter</code>：<code>CAS</code> 验证过滤器，<code>/login/cas</code> 请求验证入口。其中， <code>attemptAuthentication()</code> 其中包含验证方法 ，验证不通过则抛出 <code>AuthenticationException</code>。<code>successfulAuthentication</code> 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。<code>unsuccessfulAuthentication</code> 则是验证失败后执行逻辑，是重定向到 <code>/login</code> 登录请求。</li>\n<li><code>CasAuthenticationProvider</code>：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。</li>\n<li><code>AbstractCasProtocolUrlBasedTicketValidator</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成调用 SSO server validate 接口验证<code>serviceTicket</code>。</li>\n<li><code>AbstractCasAssertionUserDetailsService</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成用户及权限信息的装载。</li>\n</ul>\n<p>关键代码如下，其中会导致进入 <code>unsuccessfulAuthentication()</code> 逻辑的，是抛出 <code>TicketValidationException</code> 异常。那也就是 <code>ticketValidator.validate()</code> 、 <code>authenticationUserDetailsService.loadUserDetails()</code> 或 <code>userDetailsChecker.check()</code> 逻辑点抛出异常。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// CasAuthenticationProvider</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">CasAuthenticationToken</span> <span class=\"token function\">authenticateNow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Assertion</span> assertion <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ticketValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getServiceUrl</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> <span class=\"token function\">loadUserByAssertion</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDetailsChecker<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAuthenticationToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authoritiesMapper<span class=\"token punctuation\">.</span><span class=\"token function\">mapAuthorities</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">.</span><span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userDetails<span class=\"token punctuation\">,</span> assertion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TicketValidationException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BadCredentialsException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>getMessage<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByAssertion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Assertion</span> assertion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">CasAssertionAuthenticationToken</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAssertionAuthenticationToken</span><span class=\"token punctuation\">(</span>assertion<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>authenticationUserDetailsService<span class=\"token punctuation\">.</span><span class=\"token function\">loadUserDetails</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而后，现场通过 <code>arthas</code> 工具代码 <code>watch</code> 命令，监听代码明确异常抛出位置。最后，是在 <code>authenticationUserDetailsService.loadUserDetails()</code> 应用自己实现类上抛出了  <code>UsernameNotFoundException</code> 异常。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserDetails</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CasAssertionAuthenticationToken</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> attributes <span class=\"token operator\">=</span> <span class=\"token function\">getPrincipalAttributes</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MapUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; 没有额外的元数据\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"没有额外的元数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">String</span> loginId <span class=\"token operator\">=</span> <span class=\"token function\">getLoginId</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>loginId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; 没有登录标识\"</span><span class=\"token punctuation\">,</span> loginId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernameNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s没有登录标识\"</span><span class=\"token punctuation\">,</span> loginId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">String</span> corpId <span class=\"token operator\">=</span> <span class=\"token function\">getCorpId</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UserDO</span> userDO <span class=\"token operator\">=</span> <span class=\"token function\">loadUserDO</span><span class=\"token punctuation\">(</span>loginId<span class=\"token punctuation\">,</span> corpId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> grantedAuthorities <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultUserAuthorities</span><span class=\"token punctuation\">(</span>userDO<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonUserDetails</span><span class=\"token punctuation\">(</span>userDO<span class=\"token punctuation\">.</span><span class=\"token function\">getLoginId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> userDO<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> grantedAuthorities<span class=\"token punctuation\">,</span> userDO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"three-到底是为什么有异常没有日志输出呢？\"><a href=\"#three-到底是为什么有异常没有日志输出呢？\" class=\"headerlink\" title=\":three: 到底是为什么有异常没有日志输出呢？\"></a>:three: 到底是为什么有异常没有日志输出呢？</h3><p>最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 <code>AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()</code> 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unsuccessfulAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> failed<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to process authentication request\"</span><span class=\"token punctuation\">,</span> failed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleared SecurityContextHolder\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handling authentication failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\trememberMeServices<span class=\"token punctuation\">.</span><span class=\"token function\">loginFail</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfailureHandler<span class=\"token punctuation\">.</span><span class=\"token function\">onAuthenticationFailure</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> failed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"banana-未提及的基础知识\"><a href=\"#banana-未提及的基础知识\" class=\"headerlink\" title=\":banana: 未提及的基础知识\"></a>:banana: 未提及的基础知识</h3><ul>\n<li><a href=\"https://apereo.github.io/cas/6.6.x/index.html\">CAS 官网</a></li>\n</ul>\n"},{"title":"spring-boot-security OAuth2应用实现","date":"2023-04-10T16:08:54.000Z","_content":"\n## :mouse: 背景\n\n项目上一直使用 CAS + 应用 session + nginx IP hash 组合方式实现伪集群部署。但这种方式也有一定的缺点，请求不够平均，应用使用异步处理方式，还必须将结果返回给发起的应用，否则前端无法拿到结果。这些都是 IP 绑定固定应用导致的。2023 年为止，在网上搜索到主要解决方式有两个: 1. session 共享（需要依赖 redis）2. 签发 JWT 授权。不想引入 redis，所以选择签发 JWT 授权。技术选型上使用 `spring-scurity` + `CAS` + `oauth2` 组合方式。\n\n## :tiger: 应用实现\n\n使用 `spring-security` + `CAS` + `Oauth2` 组合方式，spring-boot 中提供了很多 starter 可以使用。以下使用 maven 仓库管理为例\n\n```xml\n<!-- spring-security 基础 -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<!-- CAS 相关 -->\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-cas</artifactId>\n</dependency>\n<!-- security-jwt相关 -->\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-oauth2-jose</artifactId>\n</dependency>\n<!-- JWT 签发 -->\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-oauth2-resource-server</artifactId>\n</dependency>\n```\n\n- `spring-boot-starter-security`，是 `spring-security` 的基础包，主要包含 `spring-security-config` 和 `spring-security-web`\n- `spring-security-cas`，是 `spring-security` 的 CAS 相关，包含 CAS validation 及验证通过或不通过的处理\n- `spring-security-oauth2-jose`，是 `spring-security` 的 token 验证相关\n- `spring-security-oauth2-resource-server`，是 `spring-security` 的 token 签发及 web token 验证。\n\n### :elephant: 怎么集成\n\n集成之前，建议先看看[ spring-security 的架构](https://docs.spring.io/spring-security/reference/servlet/architecture.html)，:smile_cat: 很容易理解。当然集成一个组件，需要有集成思路或步骤，\n\n#### PART1. 选定用户校验方式\n\nspring-security 目前有支持的集中方式，\n\n- 伪验证（`AbstractPreAuthenticatedProcessingFilter`）其中假设委托人已经由外部系统进行了身份验证，实现类完成简单的校验\n- CAS 验证（`CasAuthenticationFilter`）\n- 本地登录验证（`UsernamePasswordAuthenticationFilter`）应用本地数据库验证，非独立验证服务\n- token 验证（`BearerTokenAuthenticationFilter`）OAuth2 JWT 签发的 token 应用服务验证\n- 其他验证（`AbstractAuthenticationProcessingFilter`）实现此类来完成定制验证，比如约定好请求授权的验证方式。\n\n当然，此处只是选择 Filter 并非真正验证的位置。所以，spring-security 支持的 CAS 或  UsernamePassword 验证方式也是把你的验证器默认设置了。\n\n#### PART2. 组装待校验元素（principal/credentials）\n\nprincipal，被验证主体。credentials，被验证证书，也可以是密码。\n\n如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装待验证元素，有默认实现。就拿 CAS 来比如\n\n```java\n// CASAuthenticationFilter\npublic Authentication attemptAuthentication(HttpServletRequest request, \n                                            HttpServletResponse response)\n\t\t\tthrows AuthenticationException, IOException {\n  //,,,\n  UsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(\n      username, password);\n  //,,,\n}\n// UsernamePasswordAuthenticationToken\npublic class UsernamePasswordAuthenticationToken extends AbstractAuthenticationToken {\n  public UsernamePasswordAuthenticationToken(Object principal, Object credentials) {\n\t\t//,,,,\n\t\tthis.principal = principal;\n\t\tthis.credentials = credentials;\n\t\tsetAuthenticated(false);\n\t}\n}\n```\n\n如果是使用 `AbstractPreAuthenticatedProcessingFilter` 时，则需要覆盖方法 `getPreAuthenticatedPrincipal()` 和 `getPreAuthenticatedPrincipal()` 来确定主体和证书。\n\n:jack_o_lantern: 如果是使用 `BearerTokenAuthenticationFilter` 时，默认是从请求中获取 Authorization header 值。我在实现时使用 cookie 方式，只需要实现 `BearerTokenResolver` 接口。\n\n:jack_o_lantern: 如果是使用 `AbstractAuthenticationProcessingFilter` 时，就自己在 `attemptAuthentication()` 方法中实现。\n\n#### PART3. 组装授权令牌\n\n如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装令牌的事情，Filter 里已经实现。就拿 CAS 来比如\n\n```java\n// CASAuthenticationFilter\npublic Authentication attemptAuthentication(HttpServletRequest request, \n                                            HttpServletResponse response)\n\t\t\tthrows AuthenticationException, IOException {\n    //...\n\t\tboolean serviceTicketRequest = serviceTicketRequest(request, response);\n\t\tString username = serviceTicketRequest ? CAS_STATEFUL_IDENTIFIER : CAS_STATELESS_IDENTIFIER;\n\t\tString password = obtainArtifact(request);\n\t\t//...\n\t\tUsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(\n      username, password);\n\t\t//...\n\t}\n```\n\n:high_brightness: <font color='blue'>**在令牌未被验证之前，令牌的初始化必须指定令牌并未完成验证。即 authenticated 属性为 false 。**</font>\n\n:jack_o_lantern: 如果是其他验证方式，则需要自己组装校验令牌，继承 `AbstractAuthenticationToken` 类。\n\n#### PART4. 验证及验证后用户权限信息组装\n\n如果是使用 CAS 验证，需要选择一下 `AbstractCasProtocolUrlBasedTicketValidator` 验证器。当然你也可以实现此 abstract 类，完成 ticket 验证。验证器的调用方是 `CasAuthenticationProvider`。为什么在此介绍 `CasAuthenticationProvider` ？:jack_o_lantern: 因为基本上所有的验证都一定是实现 `AuthenticationProvider` 接口。:jack_o_lantern: 用户权限信息的组装，是实现 `AuthenticationUserDetailsService<T extends Authentication>` 接口，从缓存或是数据库中查询用户或权限点信息组装 UserDetails。\n\n:high_brightness: <font color='blue'>**验证通过后，可以通过在 Controller 方法上使用 `@AuthenticationPrincipal` 注解，或请求线程里 `SecurityContextHolder.getContext().getAuthentication()`来获取用户授权信息。`@AuthenticationPrincipal` 注解对应 UserDetails 对象，`@CurrentSecurityContext` 注解对应 SecurityContext 对象。**</font>\n\n#### PART5. 验证成功或失败的处理实现\n\n验证成功或失败后的处理方式，一般有几种，重定向首页或登录页面，注册或撤销 JWT token，放行后面的 filter 或 Controller。:jack_o_lantern: 而 JWT token 签发注销的功能，只需实现 `AuthenticationSuccessHandler` 和 `AuthenticationFailureHandler` 两个接口。\n\n#### PART6. 以上内容配置组装\n\n:jack_o_lantern: 配置组装通过继承 `WebSecurityConfigurerAdapter` 类，覆盖 `init(WebSecurity builder)` 方法完成 Filter、provider、handler 等注入。此处不多说，看代码应该就懂了。\n\n以下以 CAS + OAuth2 组合方式的完整代码片段\n\n```java\npublic class TuscCasTicketValidator extends AbstractCasProtocolUrlBasedTicketValidator {\n\t public TuscCasTicketValidator(final String casServerUrlPrefix) {\n        // 设定 CAS server\n        super(casServerUrlPrefix);\n    }\n    protected String getUrlSuffix() {\n      // 验证路径\n      return \"validate\";\n    }\n    protected Assertion parseResponseFromServer(final String response)\n      throws TicketValidationException {\n        // 判定验证通过成果及结果反馈\n    }\n}\n```\n\n```java\n// bearer 验证需要\npublic class CookieBearerTokenResolver implements BearerTokenResolver {\n    private static final String COOKIE_NAME_BEARER = \"bearer\";\n    @Override\n    public String resolve(HttpServletRequest request) {\n        if (request.getCookies() == null) {\n            return null;\n        }\n        return Arrays.stream(request.getCookies())\n                .filter(cookie -> StringUtils.equalsAnyIgnoreCase(cookie.getName(), COOKIE_NAME_BEARER))\n                .map(Cookie::getValue).findFirst().orElse(null);\n    }\n}\n```\n\n```java\npublic class MakeTokenHandler extends FilterAuthSuccessHandler {\n  public void onAuthenticationSuccess(\n    HttpServletRequest request,\n    HttpServletResponse response,\n    Authentication authentication) throws ServletException, IOException {\n    //...\n    Jwt jwt = jwtEncoder.encode(\n      JwtEncoderParameters.from(jwsHeader, jwtClaimsSetBuilder.build()));\n  \tString token = jwt.getTokenValue();\n\t\tCookie cookie = new Cookie(\"bearer\", token);\n\t\tcookie.setPath(\"/\");\n\t\tcookie.setMaxAge(cookieTimeoutSecond);\n\t\tcookie.setHttpOnly(false);\n\t\tresponse.addCookie(cookie);\n  }\n}\npublic class DefaultAuthFailHandler implements AuthenticationFailureHandler, LogoutSuccessHandler {\n\tpublic void onAuthenticationFailure(\n    HttpServletRequest request,\n    HttpServletResponse response,\n    AuthenticationException exception) throws IOException, ServletException {\n    log.error(\"\", exception);\n    if (exception instanceof InvalidBearerTokenException) {\n        Cookie cookie = new Cookie(\"bearer\", null);\n        cookie.setMaxAge(0);\n        response.addCookie(cookie);\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        response.setContentType(\"text/plain;charset=utf-8\");\n        try (PrintWriter writer = response.getWriter()) {\n            writer.write(\"登录已过期或被推出，需要重新登录验证！\");\n        }\n        return;\n    }\n    // 记住登出或访问前的地址\n    response.sendRedirect(\"登录页面地址\");\n  }\n}\n```\n\n```java\n// 重新签发 token\npublic class JwtRenewFilter extends OncePerRequestFilter {\n\tprotected void doFilterInternal(HttpServletRequest request,\n                                  HttpServletResponse response,\n                                  FilterChain filterChain) \n    throws ServletException, IOException {\n    //...\n    String bearerToken = bearerTokenResolver.resolve(request);\n    Jwt jwt = jwtDecoder.decode(bearerToken);\n        Instant expiresAt = jwt.getExpiresAt();\n        if (expiresAt.isBefore(Instant.now().plusSeconds(60))) {\n            String ticket = jwt.getClaimAsString(\"st\");\n            try {\n                casTicketValidator.validate(ticket, serviceUrl);\n                renewJwt(jwt, response, jwtEncoder);\n            } catch (TicketValidationException e) {\n              //...\n            }\n        }\n  }\n}\n```\n\n```java\n@Configuration\n@EnableWebSecurity\n@AutoConfigureAfter(LoginBaseConfiguration.class)\npublic class LoginConfiguration extends WebSecurityConfigurerAdapter {\n    @Resource\n    private HttpSecurity httpSecurity;\n    @Resource\n    private AuthenticationManager authenticationManager;\n    @Resource\n    private MakeTokenHandler makeTokenHandler\n    @Resource\n    private DefaultAuthFailHandler defaultAuthFailHandler;\n    @Resource\n    private AuthenticationDetailsSource<HttpServletRequest, WebAuthenticationDetails> webAuthenticationDetailsSource;\n    @Value(\"${xxxx}\")\n    private String applicationServerUrl;\n    @Value(\"${xxxx}\")\n    private String CASServerUrl;\n    // 12h\n    @Value(\"${login.jwt.cookieTimeoutSecond:43200}\")\n    private int cookieTimeoutSecond;\n    @Value(\"${login.jwt.casDurationSecond:600}\")\n    private int casDurationSecond;\n    @Override\n    public void init(WebSecurity builder) throws Exception {\n        BearerTokenAuthenticationFilter bearerTokenFilter = \n          new BearerTokenAuthenticationFilter(authenticationManager);\n      bearerTokenFilter.setAuthenticationDetailsSource(\n        dzdaWebAuthenticationDetailsSource);\n        BearerTokenResolver bearerTokenResolver = new CookieBearerTokenResolver();\n        bearerTokenFilter.setBearerTokenResolver(makeTokenHandler);\n        bearerTokenFilter.setAuthenticationFailureHandler(defaultAuthFailHandler);\n        AbstractAuthenticationProcessingFilter casAuthenticationFilter\n          = new CasAuthenticationFilter();\n        casAuthenticationFilter.setAuthenticationFailureHandler(defaultAuthFailHandler);\n        casAuthenticationFilter.setAuthenticationManager(authenticationManager);\n        casAuthenticationFilter.setFilterProcessesUrl(\"/login/cas\");\n      casAuthenticationFilter.setAuthenticationDetailsSource(\n        dzdaWebAuthenticationDetailsSource);\n      casAuthenticationFilter.setAuthenticationSuccessHandler(\n        dzdaCasAuthenticationSuccessHandler);\n        JwtRenewFilter jwtRenewFilter = new JwtRenewFilter().\n          setBearerTokenResolver(bearerTokenResolver)\n          .setCasTicketValidator(new TuscCasTicketValidator(casServerUrl))\n          .setServiceUrl(applicationServerUrl)\n          .setCookieTimeoutSecond(cookieTimeoutSecond)\n          .setCasDurationSecond(casDurationSecond)\n          .setLocalDurationSecond(localDurationSecond);\n        httpSecurity.authenticationManager(authenticationManager)\n                .addFilterBefore(casAuthenticationFilter, \n                                 X509AuthenticationFilter.class)\n                .addFilterBefore(jwtRenewFilter, BearerTokenAuthenticationFilter.class)\n                .addFilterBefore(bearerTokenFilter, X509AuthenticationFilter.class)\n                .authorizeHttpRequests().anyRequest().authenticated()\n                .and().anonymous().disable()\n                .logout()\n                .deleteCookies(\"bearer\", \"JESSIONID\")\n                .invalidateHttpSession(true)\n                .logoutUrl(\"logoutroute\")\n                .logoutSuccessHandler(new DefaultAuthFailHandler(\n                  applicationServerUrl, casServerUrl))\n                .and().csrf().disable().cors();\n        builder.addSecurityFilterChainBuilder(httpSecurity);\n    }\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(Arrays.asList(\"*\"));\n        configuration.setAllowedMethods(Arrays.asList(\"*\"));\n        configuration.setAllowedHeaders(Arrays.asList(\"*\"));\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n        return source;\n    }\n \t\t@Bean\n    public AuthenticationProvider casAuthenticationProvider(LoginServiceImpl loginService) {\n        CasAuthenticationProvider casAuthenticationProvider = new CasAuthenticationProvider();\n        casAuthenticationProvider.setAuthenticationUserDetailsService(new XXXCasUserDetailsService(loginService));\n        casAuthenticationProvider.setTicketValidator(new TuscCasTicketValidator(ssoUrl));\n        ServiceProperties serviceProperties = new ServiceProperties();\n        serviceProperties.setService(applicationServerUrl);\n        casAuthenticationProvider.setServiceProperties(serviceProperties);\n        casAuthenticationProvider.setKey(\"casAuthenticationProvider\");\n        return casAuthenticationProvider;\n    }\n}\n```\n\n:high_brightness: <font color='blue'>**需要明确 Filter 的先后顺序，顺序不对可能会造成验证 bug，比如 renewFilter 应该在 BearerTokenAuthenticationFilter 之前。否则 renewFilter 就没有意义了。**</font>\n\n","source":"_posts/spring-boot-security-OAuth2应用实现.md","raw":"---\ntitle: spring-boot-security OAuth2应用实现\ndate: 2023-04-11 00:08:54\ncategories:\n- code\ntags:\n- code\n- spring-security\n- cas\n- oauth2\n- pre-security\n---\n\n## :mouse: 背景\n\n项目上一直使用 CAS + 应用 session + nginx IP hash 组合方式实现伪集群部署。但这种方式也有一定的缺点，请求不够平均，应用使用异步处理方式，还必须将结果返回给发起的应用，否则前端无法拿到结果。这些都是 IP 绑定固定应用导致的。2023 年为止，在网上搜索到主要解决方式有两个: 1. session 共享（需要依赖 redis）2. 签发 JWT 授权。不想引入 redis，所以选择签发 JWT 授权。技术选型上使用 `spring-scurity` + `CAS` + `oauth2` 组合方式。\n\n## :tiger: 应用实现\n\n使用 `spring-security` + `CAS` + `Oauth2` 组合方式，spring-boot 中提供了很多 starter 可以使用。以下使用 maven 仓库管理为例\n\n```xml\n<!-- spring-security 基础 -->\n<dependency>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<!-- CAS 相关 -->\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-cas</artifactId>\n</dependency>\n<!-- security-jwt相关 -->\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-oauth2-jose</artifactId>\n</dependency>\n<!-- JWT 签发 -->\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-oauth2-resource-server</artifactId>\n</dependency>\n```\n\n- `spring-boot-starter-security`，是 `spring-security` 的基础包，主要包含 `spring-security-config` 和 `spring-security-web`\n- `spring-security-cas`，是 `spring-security` 的 CAS 相关，包含 CAS validation 及验证通过或不通过的处理\n- `spring-security-oauth2-jose`，是 `spring-security` 的 token 验证相关\n- `spring-security-oauth2-resource-server`，是 `spring-security` 的 token 签发及 web token 验证。\n\n### :elephant: 怎么集成\n\n集成之前，建议先看看[ spring-security 的架构](https://docs.spring.io/spring-security/reference/servlet/architecture.html)，:smile_cat: 很容易理解。当然集成一个组件，需要有集成思路或步骤，\n\n#### PART1. 选定用户校验方式\n\nspring-security 目前有支持的集中方式，\n\n- 伪验证（`AbstractPreAuthenticatedProcessingFilter`）其中假设委托人已经由外部系统进行了身份验证，实现类完成简单的校验\n- CAS 验证（`CasAuthenticationFilter`）\n- 本地登录验证（`UsernamePasswordAuthenticationFilter`）应用本地数据库验证，非独立验证服务\n- token 验证（`BearerTokenAuthenticationFilter`）OAuth2 JWT 签发的 token 应用服务验证\n- 其他验证（`AbstractAuthenticationProcessingFilter`）实现此类来完成定制验证，比如约定好请求授权的验证方式。\n\n当然，此处只是选择 Filter 并非真正验证的位置。所以，spring-security 支持的 CAS 或  UsernamePassword 验证方式也是把你的验证器默认设置了。\n\n#### PART2. 组装待校验元素（principal/credentials）\n\nprincipal，被验证主体。credentials，被验证证书，也可以是密码。\n\n如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装待验证元素，有默认实现。就拿 CAS 来比如\n\n```java\n// CASAuthenticationFilter\npublic Authentication attemptAuthentication(HttpServletRequest request, \n                                            HttpServletResponse response)\n\t\t\tthrows AuthenticationException, IOException {\n  //,,,\n  UsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(\n      username, password);\n  //,,,\n}\n// UsernamePasswordAuthenticationToken\npublic class UsernamePasswordAuthenticationToken extends AbstractAuthenticationToken {\n  public UsernamePasswordAuthenticationToken(Object principal, Object credentials) {\n\t\t//,,,,\n\t\tthis.principal = principal;\n\t\tthis.credentials = credentials;\n\t\tsetAuthenticated(false);\n\t}\n}\n```\n\n如果是使用 `AbstractPreAuthenticatedProcessingFilter` 时，则需要覆盖方法 `getPreAuthenticatedPrincipal()` 和 `getPreAuthenticatedPrincipal()` 来确定主体和证书。\n\n:jack_o_lantern: 如果是使用 `BearerTokenAuthenticationFilter` 时，默认是从请求中获取 Authorization header 值。我在实现时使用 cookie 方式，只需要实现 `BearerTokenResolver` 接口。\n\n:jack_o_lantern: 如果是使用 `AbstractAuthenticationProcessingFilter` 时，就自己在 `attemptAuthentication()` 方法中实现。\n\n#### PART3. 组装授权令牌\n\n如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装令牌的事情，Filter 里已经实现。就拿 CAS 来比如\n\n```java\n// CASAuthenticationFilter\npublic Authentication attemptAuthentication(HttpServletRequest request, \n                                            HttpServletResponse response)\n\t\t\tthrows AuthenticationException, IOException {\n    //...\n\t\tboolean serviceTicketRequest = serviceTicketRequest(request, response);\n\t\tString username = serviceTicketRequest ? CAS_STATEFUL_IDENTIFIER : CAS_STATELESS_IDENTIFIER;\n\t\tString password = obtainArtifact(request);\n\t\t//...\n\t\tUsernamePasswordAuthenticationToken authRequest = UsernamePasswordAuthenticationToken.unauthenticated(\n      username, password);\n\t\t//...\n\t}\n```\n\n:high_brightness: <font color='blue'>**在令牌未被验证之前，令牌的初始化必须指定令牌并未完成验证。即 authenticated 属性为 false 。**</font>\n\n:jack_o_lantern: 如果是其他验证方式，则需要自己组装校验令牌，继承 `AbstractAuthenticationToken` 类。\n\n#### PART4. 验证及验证后用户权限信息组装\n\n如果是使用 CAS 验证，需要选择一下 `AbstractCasProtocolUrlBasedTicketValidator` 验证器。当然你也可以实现此 abstract 类，完成 ticket 验证。验证器的调用方是 `CasAuthenticationProvider`。为什么在此介绍 `CasAuthenticationProvider` ？:jack_o_lantern: 因为基本上所有的验证都一定是实现 `AuthenticationProvider` 接口。:jack_o_lantern: 用户权限信息的组装，是实现 `AuthenticationUserDetailsService<T extends Authentication>` 接口，从缓存或是数据库中查询用户或权限点信息组装 UserDetails。\n\n:high_brightness: <font color='blue'>**验证通过后，可以通过在 Controller 方法上使用 `@AuthenticationPrincipal` 注解，或请求线程里 `SecurityContextHolder.getContext().getAuthentication()`来获取用户授权信息。`@AuthenticationPrincipal` 注解对应 UserDetails 对象，`@CurrentSecurityContext` 注解对应 SecurityContext 对象。**</font>\n\n#### PART5. 验证成功或失败的处理实现\n\n验证成功或失败后的处理方式，一般有几种，重定向首页或登录页面，注册或撤销 JWT token，放行后面的 filter 或 Controller。:jack_o_lantern: 而 JWT token 签发注销的功能，只需实现 `AuthenticationSuccessHandler` 和 `AuthenticationFailureHandler` 两个接口。\n\n#### PART6. 以上内容配置组装\n\n:jack_o_lantern: 配置组装通过继承 `WebSecurityConfigurerAdapter` 类，覆盖 `init(WebSecurity builder)` 方法完成 Filter、provider、handler 等注入。此处不多说，看代码应该就懂了。\n\n以下以 CAS + OAuth2 组合方式的完整代码片段\n\n```java\npublic class TuscCasTicketValidator extends AbstractCasProtocolUrlBasedTicketValidator {\n\t public TuscCasTicketValidator(final String casServerUrlPrefix) {\n        // 设定 CAS server\n        super(casServerUrlPrefix);\n    }\n    protected String getUrlSuffix() {\n      // 验证路径\n      return \"validate\";\n    }\n    protected Assertion parseResponseFromServer(final String response)\n      throws TicketValidationException {\n        // 判定验证通过成果及结果反馈\n    }\n}\n```\n\n```java\n// bearer 验证需要\npublic class CookieBearerTokenResolver implements BearerTokenResolver {\n    private static final String COOKIE_NAME_BEARER = \"bearer\";\n    @Override\n    public String resolve(HttpServletRequest request) {\n        if (request.getCookies() == null) {\n            return null;\n        }\n        return Arrays.stream(request.getCookies())\n                .filter(cookie -> StringUtils.equalsAnyIgnoreCase(cookie.getName(), COOKIE_NAME_BEARER))\n                .map(Cookie::getValue).findFirst().orElse(null);\n    }\n}\n```\n\n```java\npublic class MakeTokenHandler extends FilterAuthSuccessHandler {\n  public void onAuthenticationSuccess(\n    HttpServletRequest request,\n    HttpServletResponse response,\n    Authentication authentication) throws ServletException, IOException {\n    //...\n    Jwt jwt = jwtEncoder.encode(\n      JwtEncoderParameters.from(jwsHeader, jwtClaimsSetBuilder.build()));\n  \tString token = jwt.getTokenValue();\n\t\tCookie cookie = new Cookie(\"bearer\", token);\n\t\tcookie.setPath(\"/\");\n\t\tcookie.setMaxAge(cookieTimeoutSecond);\n\t\tcookie.setHttpOnly(false);\n\t\tresponse.addCookie(cookie);\n  }\n}\npublic class DefaultAuthFailHandler implements AuthenticationFailureHandler, LogoutSuccessHandler {\n\tpublic void onAuthenticationFailure(\n    HttpServletRequest request,\n    HttpServletResponse response,\n    AuthenticationException exception) throws IOException, ServletException {\n    log.error(\"\", exception);\n    if (exception instanceof InvalidBearerTokenException) {\n        Cookie cookie = new Cookie(\"bearer\", null);\n        cookie.setMaxAge(0);\n        response.addCookie(cookie);\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        response.setContentType(\"text/plain;charset=utf-8\");\n        try (PrintWriter writer = response.getWriter()) {\n            writer.write(\"登录已过期或被推出，需要重新登录验证！\");\n        }\n        return;\n    }\n    // 记住登出或访问前的地址\n    response.sendRedirect(\"登录页面地址\");\n  }\n}\n```\n\n```java\n// 重新签发 token\npublic class JwtRenewFilter extends OncePerRequestFilter {\n\tprotected void doFilterInternal(HttpServletRequest request,\n                                  HttpServletResponse response,\n                                  FilterChain filterChain) \n    throws ServletException, IOException {\n    //...\n    String bearerToken = bearerTokenResolver.resolve(request);\n    Jwt jwt = jwtDecoder.decode(bearerToken);\n        Instant expiresAt = jwt.getExpiresAt();\n        if (expiresAt.isBefore(Instant.now().plusSeconds(60))) {\n            String ticket = jwt.getClaimAsString(\"st\");\n            try {\n                casTicketValidator.validate(ticket, serviceUrl);\n                renewJwt(jwt, response, jwtEncoder);\n            } catch (TicketValidationException e) {\n              //...\n            }\n        }\n  }\n}\n```\n\n```java\n@Configuration\n@EnableWebSecurity\n@AutoConfigureAfter(LoginBaseConfiguration.class)\npublic class LoginConfiguration extends WebSecurityConfigurerAdapter {\n    @Resource\n    private HttpSecurity httpSecurity;\n    @Resource\n    private AuthenticationManager authenticationManager;\n    @Resource\n    private MakeTokenHandler makeTokenHandler\n    @Resource\n    private DefaultAuthFailHandler defaultAuthFailHandler;\n    @Resource\n    private AuthenticationDetailsSource<HttpServletRequest, WebAuthenticationDetails> webAuthenticationDetailsSource;\n    @Value(\"${xxxx}\")\n    private String applicationServerUrl;\n    @Value(\"${xxxx}\")\n    private String CASServerUrl;\n    // 12h\n    @Value(\"${login.jwt.cookieTimeoutSecond:43200}\")\n    private int cookieTimeoutSecond;\n    @Value(\"${login.jwt.casDurationSecond:600}\")\n    private int casDurationSecond;\n    @Override\n    public void init(WebSecurity builder) throws Exception {\n        BearerTokenAuthenticationFilter bearerTokenFilter = \n          new BearerTokenAuthenticationFilter(authenticationManager);\n      bearerTokenFilter.setAuthenticationDetailsSource(\n        dzdaWebAuthenticationDetailsSource);\n        BearerTokenResolver bearerTokenResolver = new CookieBearerTokenResolver();\n        bearerTokenFilter.setBearerTokenResolver(makeTokenHandler);\n        bearerTokenFilter.setAuthenticationFailureHandler(defaultAuthFailHandler);\n        AbstractAuthenticationProcessingFilter casAuthenticationFilter\n          = new CasAuthenticationFilter();\n        casAuthenticationFilter.setAuthenticationFailureHandler(defaultAuthFailHandler);\n        casAuthenticationFilter.setAuthenticationManager(authenticationManager);\n        casAuthenticationFilter.setFilterProcessesUrl(\"/login/cas\");\n      casAuthenticationFilter.setAuthenticationDetailsSource(\n        dzdaWebAuthenticationDetailsSource);\n      casAuthenticationFilter.setAuthenticationSuccessHandler(\n        dzdaCasAuthenticationSuccessHandler);\n        JwtRenewFilter jwtRenewFilter = new JwtRenewFilter().\n          setBearerTokenResolver(bearerTokenResolver)\n          .setCasTicketValidator(new TuscCasTicketValidator(casServerUrl))\n          .setServiceUrl(applicationServerUrl)\n          .setCookieTimeoutSecond(cookieTimeoutSecond)\n          .setCasDurationSecond(casDurationSecond)\n          .setLocalDurationSecond(localDurationSecond);\n        httpSecurity.authenticationManager(authenticationManager)\n                .addFilterBefore(casAuthenticationFilter, \n                                 X509AuthenticationFilter.class)\n                .addFilterBefore(jwtRenewFilter, BearerTokenAuthenticationFilter.class)\n                .addFilterBefore(bearerTokenFilter, X509AuthenticationFilter.class)\n                .authorizeHttpRequests().anyRequest().authenticated()\n                .and().anonymous().disable()\n                .logout()\n                .deleteCookies(\"bearer\", \"JESSIONID\")\n                .invalidateHttpSession(true)\n                .logoutUrl(\"logoutroute\")\n                .logoutSuccessHandler(new DefaultAuthFailHandler(\n                  applicationServerUrl, casServerUrl))\n                .and().csrf().disable().cors();\n        builder.addSecurityFilterChainBuilder(httpSecurity);\n    }\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(Arrays.asList(\"*\"));\n        configuration.setAllowedMethods(Arrays.asList(\"*\"));\n        configuration.setAllowedHeaders(Arrays.asList(\"*\"));\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n        return source;\n    }\n \t\t@Bean\n    public AuthenticationProvider casAuthenticationProvider(LoginServiceImpl loginService) {\n        CasAuthenticationProvider casAuthenticationProvider = new CasAuthenticationProvider();\n        casAuthenticationProvider.setAuthenticationUserDetailsService(new XXXCasUserDetailsService(loginService));\n        casAuthenticationProvider.setTicketValidator(new TuscCasTicketValidator(ssoUrl));\n        ServiceProperties serviceProperties = new ServiceProperties();\n        serviceProperties.setService(applicationServerUrl);\n        casAuthenticationProvider.setServiceProperties(serviceProperties);\n        casAuthenticationProvider.setKey(\"casAuthenticationProvider\");\n        return casAuthenticationProvider;\n    }\n}\n```\n\n:high_brightness: <font color='blue'>**需要明确 Filter 的先后顺序，顺序不对可能会造成验证 bug，比如 renewFilter 应该在 BearerTokenAuthenticationFilter 之前。否则 renewFilter 就没有意义了。**</font>\n\n","slug":"spring-boot-security-OAuth2应用实现","published":1,"updated":"2024-02-18T04:44:16.209Z","_id":"cls1theso000dwt66gk6pgojw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"mouse-背景\"><a href=\"#mouse-背景\" class=\"headerlink\" title=\":mouse: 背景\"></a><span class=\"github-emoji\"><span>🐭</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 背景</h2><p>项目上一直使用 CAS + 应用 session + nginx IP hash 组合方式实现伪集群部署。但这种方式也有一定的缺点，请求不够平均，应用使用异步处理方式，还必须将结果返回给发起的应用，否则前端无法拿到结果。这些都是 IP 绑定固定应用导致的。2023 年为止，在网上搜索到主要解决方式有两个: 1. session 共享（需要依赖 redis）2. 签发 JWT 授权。不想引入 redis，所以选择签发 JWT 授权。技术选型上使用 <code>spring-scurity</code> + <code>CAS</code> + <code>oauth2</code> 组合方式。</p>\n<h2 id=\"tiger-应用实现\"><a href=\"#tiger-应用实现\" class=\"headerlink\" title=\":tiger: 应用实现\"></a><span class=\"github-emoji\"><span>🐯</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 应用实现</h2><p>使用 <code>spring-security</code> + <code>CAS</code> + <code>Oauth2</code> 组合方式，spring-boot 中提供了很多 starter 可以使用。以下使用 maven 仓库管理为例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- spring-security 基础 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- CAS 相关 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-security-cas<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- security-jwt相关 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-security-oauth2-jose<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- JWT 签发 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>spring-security-oauth2-resource-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>spring-boot-starter-security</code>，是 <code>spring-security</code> 的基础包，主要包含 <code>spring-security-config</code> 和 <code>spring-security-web</code></li>\n<li><code>spring-security-cas</code>，是 <code>spring-security</code> 的 CAS 相关，包含 CAS validation 及验证通过或不通过的处理</li>\n<li><code>spring-security-oauth2-jose</code>，是 <code>spring-security</code> 的 token 验证相关</li>\n<li><code>spring-security-oauth2-resource-server</code>，是 <code>spring-security</code> 的 token 签发及 web token 验证。</li>\n</ul>\n<h3 id=\"elephant-怎么集成\"><a href=\"#elephant-怎么集成\" class=\"headerlink\" title=\":elephant: 怎么集成\"></a><span class=\"github-emoji\"><span>🐘</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 怎么集成</h3><p>集成之前，建议先看看<a href=\"https://docs.spring.io/spring-security/reference/servlet/architecture.html\"> spring-security 的架构</a>，<span class=\"github-emoji\"><span>😸</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 很容易理解。当然集成一个组件，需要有集成思路或步骤，</p>\n<h4 id=\"PART1-选定用户校验方式\"><a href=\"#PART1-选定用户校验方式\" class=\"headerlink\" title=\"PART1. 选定用户校验方式\"></a>PART1. 选定用户校验方式</h4><p>spring-security 目前有支持的集中方式，</p>\n<ul>\n<li>伪验证（<code>AbstractPreAuthenticatedProcessingFilter</code>）其中假设委托人已经由外部系统进行了身份验证，实现类完成简单的校验</li>\n<li>CAS 验证（<code>CasAuthenticationFilter</code>）</li>\n<li>本地登录验证（<code>UsernamePasswordAuthenticationFilter</code>）应用本地数据库验证，非独立验证服务</li>\n<li>token 验证（<code>BearerTokenAuthenticationFilter</code>）OAuth2 JWT 签发的 token 应用服务验证</li>\n<li>其他验证（<code>AbstractAuthenticationProcessingFilter</code>）实现此类来完成定制验证，比如约定好请求授权的验证方式。</li>\n</ul>\n<p>当然，此处只是选择 Filter 并非真正验证的位置。所以，spring-security 支持的 CAS 或  UsernamePassword 验证方式也是把你的验证器默认设置了。</p>\n<h4 id=\"PART2-组装待校验元素（principal-credentials）\"><a href=\"#PART2-组装待校验元素（principal-credentials）\" class=\"headerlink\" title=\"PART2. 组装待校验元素（principal/credentials）\"></a>PART2. 组装待校验元素（principal/credentials）</h4><p>principal，被验证主体。credentials，被验证证书，也可以是密码。</p>\n<p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装待验证元素，有默认实现。就拿 CAS 来比如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// CASAuthenticationFilter</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n                                            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//,,,</span>\n  <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//,,,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// UsernamePasswordAuthenticationToken</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAuthenticationToken</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> principal<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> credentials<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//,,,,</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>principal <span class=\"token operator\">=</span> principal<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是使用 <code>AbstractPreAuthenticatedProcessingFilter</code> 时，则需要覆盖方法 <code>getPreAuthenticatedPrincipal()</code> 和 <code>getPreAuthenticatedPrincipal()</code> 来确定主体和证书。</p>\n<p><span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 如果是使用 <code>BearerTokenAuthenticationFilter</code> 时，默认是从请求中获取 Authorization header 值。我在实现时使用 cookie 方式，只需要实现 <code>BearerTokenResolver</code> 接口。</p>\n<p><span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 如果是使用 <code>AbstractAuthenticationProcessingFilter</code> 时，就自己在 <code>attemptAuthentication()</code> 方法中实现。</p>\n<h4 id=\"PART3-组装授权令牌\"><a href=\"#PART3-组装授权令牌\" class=\"headerlink\" title=\"PART3. 组装授权令牌\"></a>PART3. 组装授权令牌</h4><p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装令牌的事情，Filter 里已经实现。就拿 CAS 来比如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// CASAuthenticationFilter</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n                                            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n\t\t<span class=\"token keyword\">boolean</span> serviceTicketRequest <span class=\"token operator\">=</span> <span class=\"token function\">serviceTicketRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> serviceTicketRequest <span class=\"token operator\">?</span> <span class=\"token constant\">CAS_STATEFUL_IDENTIFIER</span> <span class=\"token operator\">:</span> <span class=\"token constant\">CAS_STATELESS_IDENTIFIER</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token function\">obtainArtifact</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//...</span>\n\t\t<span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><span class=\"github-emoji\"><span>🔆</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> <font color=\"blue\"><strong>在令牌未被验证之前，令牌的初始化必须指定令牌并未完成验证。即 authenticated 属性为 false 。</strong></font></p>\n<p><span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 如果是其他验证方式，则需要自己组装校验令牌，继承 <code>AbstractAuthenticationToken</code> 类。</p>\n<h4 id=\"PART4-验证及验证后用户权限信息组装\"><a href=\"#PART4-验证及验证后用户权限信息组装\" class=\"headerlink\" title=\"PART4. 验证及验证后用户权限信息组装\"></a>PART4. 验证及验证后用户权限信息组装</h4><p>如果是使用 CAS 验证，需要选择一下 <code>AbstractCasProtocolUrlBasedTicketValidator</code> 验证器。当然你也可以实现此 abstract 类，完成 ticket 验证。验证器的调用方是 <code>CasAuthenticationProvider</code>。为什么在此介绍 <code>CasAuthenticationProvider</code> ？<span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 因为基本上所有的验证都一定是实现 <code>AuthenticationProvider</code> 接口。<span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 用户权限信息的组装，是实现 <code>AuthenticationUserDetailsService&lt;T extends Authentication&gt;</code> 接口，从缓存或是数据库中查询用户或权限点信息组装 UserDetails。</p>\n<p><span class=\"github-emoji\"><span>🔆</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> <font color=\"blue\"><strong>验证通过后，可以通过在 Controller 方法上使用 <code>@AuthenticationPrincipal</code>&nbsp;注解，或请求线程里 <code>SecurityContextHolder.getContext().getAuthentication()</code>来获取用户授权信息。<code>@AuthenticationPrincipal</code>&nbsp;注解对应 UserDetails 对象，<code>@CurrentSecurityContext</code>&nbsp;注解对应 SecurityContext 对象。</strong></font></p>\n<h4 id=\"PART5-验证成功或失败的处理实现\"><a href=\"#PART5-验证成功或失败的处理实现\" class=\"headerlink\" title=\"PART5. 验证成功或失败的处理实现\"></a>PART5. 验证成功或失败的处理实现</h4><p>验证成功或失败后的处理方式，一般有几种，重定向首页或登录页面，注册或撤销 JWT token，放行后面的 filter 或 Controller。<span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 而 JWT token 签发注销的功能，只需实现 <code>AuthenticationSuccessHandler</code> 和 <code>AuthenticationFailureHandler</code> 两个接口。</p>\n<h4 id=\"PART6-以上内容配置组装\"><a href=\"#PART6-以上内容配置组装\" class=\"headerlink\" title=\"PART6. 以上内容配置组装\"></a>PART6. 以上内容配置组装</h4><p><span class=\"github-emoji\"><span>🎃</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 配置组装通过继承 <code>WebSecurityConfigurerAdapter</code> 类，覆盖 <code>init(WebSecurity builder)</code> 方法完成 Filter、provider、handler 等注入。此处不多说，看代码应该就懂了。</p>\n<p>以下以 CAS + OAuth2 组合方式的完整代码片段</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TuscCasTicketValidator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCasProtocolUrlBasedTicketValidator</span> <span class=\"token punctuation\">{</span>\n\t <span class=\"token keyword\">public</span> <span class=\"token class-name\">TuscCasTicketValidator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> casServerUrlPrefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 设定 CAS server</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>casServerUrlPrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUrlSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 验证路径</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"validate\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Assertion</span> <span class=\"token function\">parseResponseFromServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> response<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TicketValidationException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 判定验证通过成果及结果反馈</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// bearer 验证需要</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieBearerTokenResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BearerTokenResolver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">COOKIE_NAME_BEARER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>cookie <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsAnyIgnoreCase</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COOKIE_NAME_BEARER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span><span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeTokenHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FilterAuthSuccessHandler</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationSuccess</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token class-name\">Jwt</span> jwt <span class=\"token operator\">=</span> jwtEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">JwtEncoderParameters</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>jwsHeader<span class=\"token punctuation\">,</span> jwtClaimsSetBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">getTokenValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcookie<span class=\"token punctuation\">.</span><span class=\"token function\">setPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span>cookieTimeoutSecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcookie<span class=\"token punctuation\">.</span><span class=\"token function\">setHttpOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultAuthFailHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationFailureHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LogoutSuccessHandler</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationFailure</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">AuthenticationException</span> exception<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InvalidBearerTokenException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNAUTHORIZED</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PrintWriter</span> writer <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录已过期或被推出，需要重新登录验证！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 记住登出或访问前的地址</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录页面地址\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 重新签发 token</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtRenewFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token class-name\">String</span> bearerToken <span class=\"token operator\">=</span> bearerTokenResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Jwt</span> jwt <span class=\"token operator\">=</span> jwtDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bearerToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Instant</span> expiresAt <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">getExpiresAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expiresAt<span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">plusSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> ticket <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">getClaimAsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                casTicketValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> serviceUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">renewJwt</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> jwtEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TicketValidationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token annotation punctuation\">@AutoConfigureAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginBaseConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginConfiguration</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HttpSecurity</span> httpSecurity<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationManager</span> authenticationManager<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MakeTokenHandler</span> makeTokenHandler\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DefaultAuthFailHandler</span> defaultAuthFailHandler<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationDetailsSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebAuthenticationDetails</span><span class=\"token punctuation\">&gt;</span></span> webAuthenticationDetailsSource<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${xxxx}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> applicationServerUrl<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${xxxx}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">CASServerUrl</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 12h</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${login.jwt.cookieTimeoutSecond:43200}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> cookieTimeoutSecond<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${login.jwt.casDurationSecond:600}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> casDurationSecond<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSecurity</span> builder<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BearerTokenAuthenticationFilter</span> bearerTokenFilter <span class=\"token operator\">=</span> \n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">BearerTokenAuthenticationFilter</span><span class=\"token punctuation\">(</span>authenticationManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bearerTokenFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationDetailsSource</span><span class=\"token punctuation\">(</span>\n        dzdaWebAuthenticationDetailsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BearerTokenResolver</span> bearerTokenResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CookieBearerTokenResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bearerTokenFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setBearerTokenResolver</span><span class=\"token punctuation\">(</span>makeTokenHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bearerTokenFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationFailureHandler</span><span class=\"token punctuation\">(</span>defaultAuthFailHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractAuthenticationProcessingFilter</span> casAuthenticationFilter\n          <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationFailureHandler</span><span class=\"token punctuation\">(</span>defaultAuthFailHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationManager</span><span class=\"token punctuation\">(</span>authenticationManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterProcessesUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/cas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationDetailsSource</span><span class=\"token punctuation\">(</span>\n        dzdaWebAuthenticationDetailsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationSuccessHandler</span><span class=\"token punctuation\">(</span>\n        dzdaCasAuthenticationSuccessHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">JwtRenewFilter</span> jwtRenewFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtRenewFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n          <span class=\"token function\">setBearerTokenResolver</span><span class=\"token punctuation\">(</span>bearerTokenResolver<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setCasTicketValidator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TuscCasTicketValidator</span><span class=\"token punctuation\">(</span>casServerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setServiceUrl</span><span class=\"token punctuation\">(</span>applicationServerUrl<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setCookieTimeoutSecond</span><span class=\"token punctuation\">(</span>cookieTimeoutSecond<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setCasDurationSecond</span><span class=\"token punctuation\">(</span>casDurationSecond<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDurationSecond</span><span class=\"token punctuation\">(</span>localDurationSecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span>authenticationManager<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>casAuthenticationFilter<span class=\"token punctuation\">,</span> \n                                 <span class=\"token class-name\">X509AuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtRenewFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BearerTokenAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>bearerTokenFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">X509AuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeHttpRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deleteCookies</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JESSIONID\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">invalidateHttpSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logoutroute\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultAuthFailHandler</span><span class=\"token punctuation\">(</span>\n                  applicationServerUrl<span class=\"token punctuation\">,</span> casServerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">addSecurityFilterChainBuilder</span><span class=\"token punctuation\">(</span>httpSecurity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CorsConfigurationSource</span> <span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CorsConfiguration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        source<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \t\t<span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthenticationProvider</span> <span class=\"token function\">casAuthenticationProvider</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginServiceImpl</span> loginService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CasAuthenticationProvider</span> casAuthenticationProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAuthenticationProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationUserDetailsService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XXXCasUserDetailsService</span><span class=\"token punctuation\">(</span>loginService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setTicketValidator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TuscCasTicketValidator</span><span class=\"token punctuation\">(</span>ssoUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ServiceProperties</span> serviceProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serviceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">setService</span><span class=\"token punctuation\">(</span>applicationServerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceProperties</span><span class=\"token punctuation\">(</span>serviceProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"casAuthenticationProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> casAuthenticationProvider<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><span class=\"github-emoji\"><span>🔆</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> <font color=\"blue\"><strong>需要明确 Filter 的先后顺序，顺序不对可能会造成验证 bug，比如 renewFilter 应该在 BearerTokenAuthenticationFilter 之前。否则 renewFilter 就没有意义了。</strong></font></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"mouse-背景\"><a href=\"#mouse-背景\" class=\"headerlink\" title=\":mouse: 背景\"></a>:mouse: 背景</h2><p>项目上一直使用 CAS + 应用 session + nginx IP hash 组合方式实现伪集群部署。但这种方式也有一定的缺点，请求不够平均，应用使用异步处理方式，还必须将结果返回给发起的应用，否则前端无法拿到结果。这些都是 IP 绑定固定应用导致的。2023 年为止，在网上搜索到主要解决方式有两个: 1. session 共享（需要依赖 redis）2. 签发 JWT 授权。不想引入 redis，所以选择签发 JWT 授权。技术选型上使用 <code>spring-scurity</code> + <code>CAS</code> + <code>oauth2</code> 组合方式。</p>\n<h2 id=\"tiger-应用实现\"><a href=\"#tiger-应用实现\" class=\"headerlink\" title=\":tiger: 应用实现\"></a>:tiger: 应用实现</h2><p>使用 <code>spring-security</code> + <code>CAS</code> + <code>Oauth2</code> 组合方式，spring-boot 中提供了很多 starter 可以使用。以下使用 maven 仓库管理为例</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- spring-security 基础 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- CAS 相关 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-security-cas<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- security-jwt相关 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-security-oauth2-jose<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- JWT 签发 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-security-oauth2-resource-server<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><code>spring-boot-starter-security</code>，是 <code>spring-security</code> 的基础包，主要包含 <code>spring-security-config</code> 和 <code>spring-security-web</code></li>\n<li><code>spring-security-cas</code>，是 <code>spring-security</code> 的 CAS 相关，包含 CAS validation 及验证通过或不通过的处理</li>\n<li><code>spring-security-oauth2-jose</code>，是 <code>spring-security</code> 的 token 验证相关</li>\n<li><code>spring-security-oauth2-resource-server</code>，是 <code>spring-security</code> 的 token 签发及 web token 验证。</li>\n</ul>\n<h3 id=\"elephant-怎么集成\"><a href=\"#elephant-怎么集成\" class=\"headerlink\" title=\":elephant: 怎么集成\"></a>:elephant: 怎么集成</h3><p>集成之前，建议先看看<a href=\"https://docs.spring.io/spring-security/reference/servlet/architecture.html\"> spring-security 的架构</a>，:smile_cat: 很容易理解。当然集成一个组件，需要有集成思路或步骤，</p>\n<h4 id=\"PART1-选定用户校验方式\"><a href=\"#PART1-选定用户校验方式\" class=\"headerlink\" title=\"PART1. 选定用户校验方式\"></a>PART1. 选定用户校验方式</h4><p>spring-security 目前有支持的集中方式，</p>\n<ul>\n<li>伪验证（<code>AbstractPreAuthenticatedProcessingFilter</code>）其中假设委托人已经由外部系统进行了身份验证，实现类完成简单的校验</li>\n<li>CAS 验证（<code>CasAuthenticationFilter</code>）</li>\n<li>本地登录验证（<code>UsernamePasswordAuthenticationFilter</code>）应用本地数据库验证，非独立验证服务</li>\n<li>token 验证（<code>BearerTokenAuthenticationFilter</code>）OAuth2 JWT 签发的 token 应用服务验证</li>\n<li>其他验证（<code>AbstractAuthenticationProcessingFilter</code>）实现此类来完成定制验证，比如约定好请求授权的验证方式。</li>\n</ul>\n<p>当然，此处只是选择 Filter 并非真正验证的位置。所以，spring-security 支持的 CAS 或  UsernamePassword 验证方式也是把你的验证器默认设置了。</p>\n<h4 id=\"PART2-组装待校验元素（principal-credentials）\"><a href=\"#PART2-组装待校验元素（principal-credentials）\" class=\"headerlink\" title=\"PART2. 组装待校验元素（principal/credentials）\"></a>PART2. 组装待校验元素（principal/credentials）</h4><p>principal，被验证主体。credentials，被验证证书，也可以是密码。</p>\n<p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装待验证元素，有默认实现。就拿 CAS 来比如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// CASAuthenticationFilter</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n                                            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//,,,</span>\n  <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//,,,</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// UsernamePasswordAuthenticationToken</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAuthenticationToken</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> principal<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> credentials<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token comment\">//,,,,</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>principal <span class=\"token operator\">=</span> principal<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>credentials <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果是使用 <code>AbstractPreAuthenticatedProcessingFilter</code> 时，则需要覆盖方法 <code>getPreAuthenticatedPrincipal()</code> 和 <code>getPreAuthenticatedPrincipal()</code> 来确定主体和证书。</p>\n<p>:jack_o_lantern: 如果是使用 <code>BearerTokenAuthenticationFilter</code> 时，默认是从请求中获取 Authorization header 值。我在实现时使用 cookie 方式，只需要实现 <code>BearerTokenResolver</code> 接口。</p>\n<p>:jack_o_lantern: 如果是使用 <code>AbstractAuthenticationProcessingFilter</code> 时，就自己在 <code>attemptAuthentication()</code> 方法中实现。</p>\n<h4 id=\"PART3-组装授权令牌\"><a href=\"#PART3-组装授权令牌\" class=\"headerlink\" title=\"PART3. 组装授权令牌\"></a>PART3. 组装授权令牌</h4><p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装令牌的事情，Filter 里已经实现。就拿 CAS 来比如</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// CASAuthenticationFilter</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Authentication</span> <span class=\"token function\">attemptAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> \n                                            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">throws</span> <span class=\"token class-name\">AuthenticationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n\t\t<span class=\"token keyword\">boolean</span> serviceTicketRequest <span class=\"token operator\">=</span> <span class=\"token function\">serviceTicketRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> serviceTicketRequest <span class=\"token operator\">?</span> <span class=\"token constant\">CAS_STATEFUL_IDENTIFIER</span> <span class=\"token operator\">:</span> <span class=\"token constant\">CAS_STATELESS_IDENTIFIER</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> <span class=\"token function\">obtainArtifact</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//...</span>\n\t\t<span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authRequest <span class=\"token operator\">=</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">.</span><span class=\"token function\">unauthenticated</span><span class=\"token punctuation\">(</span>\n      username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>:high_brightness: <font color='blue'><strong>在令牌未被验证之前，令牌的初始化必须指定令牌并未完成验证。即 authenticated 属性为 false 。</strong></font></p>\n<p>:jack_o_lantern: 如果是其他验证方式，则需要自己组装校验令牌，继承 <code>AbstractAuthenticationToken</code> 类。</p>\n<h4 id=\"PART4-验证及验证后用户权限信息组装\"><a href=\"#PART4-验证及验证后用户权限信息组装\" class=\"headerlink\" title=\"PART4. 验证及验证后用户权限信息组装\"></a>PART4. 验证及验证后用户权限信息组装</h4><p>如果是使用 CAS 验证，需要选择一下 <code>AbstractCasProtocolUrlBasedTicketValidator</code> 验证器。当然你也可以实现此 abstract 类，完成 ticket 验证。验证器的调用方是 <code>CasAuthenticationProvider</code>。为什么在此介绍 <code>CasAuthenticationProvider</code> ？:jack_o_lantern: 因为基本上所有的验证都一定是实现 <code>AuthenticationProvider</code> 接口。:jack_o_lantern: 用户权限信息的组装，是实现 <code>AuthenticationUserDetailsService&lt;T extends Authentication&gt;</code> 接口，从缓存或是数据库中查询用户或权限点信息组装 UserDetails。</p>\n<p>:high_brightness: <font color='blue'><strong>验证通过后，可以通过在 Controller 方法上使用 <code>@AuthenticationPrincipal</code> 注解，或请求线程里 <code>SecurityContextHolder.getContext().getAuthentication()</code>来获取用户授权信息。<code>@AuthenticationPrincipal</code> 注解对应 UserDetails 对象，<code>@CurrentSecurityContext</code> 注解对应 SecurityContext 对象。</strong></font></p>\n<h4 id=\"PART5-验证成功或失败的处理实现\"><a href=\"#PART5-验证成功或失败的处理实现\" class=\"headerlink\" title=\"PART5. 验证成功或失败的处理实现\"></a>PART5. 验证成功或失败的处理实现</h4><p>验证成功或失败后的处理方式，一般有几种，重定向首页或登录页面，注册或撤销 JWT token，放行后面的 filter 或 Controller。:jack_o_lantern: 而 JWT token 签发注销的功能，只需实现 <code>AuthenticationSuccessHandler</code> 和 <code>AuthenticationFailureHandler</code> 两个接口。</p>\n<h4 id=\"PART6-以上内容配置组装\"><a href=\"#PART6-以上内容配置组装\" class=\"headerlink\" title=\"PART6. 以上内容配置组装\"></a>PART6. 以上内容配置组装</h4><p>:jack_o_lantern: 配置组装通过继承 <code>WebSecurityConfigurerAdapter</code> 类，覆盖 <code>init(WebSecurity builder)</code> 方法完成 Filter、provider、handler 等注入。此处不多说，看代码应该就懂了。</p>\n<p>以下以 CAS + OAuth2 组合方式的完整代码片段</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TuscCasTicketValidator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractCasProtocolUrlBasedTicketValidator</span> <span class=\"token punctuation\">&#123;</span>\n\t <span class=\"token keyword\">public</span> <span class=\"token class-name\">TuscCasTicketValidator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> casServerUrlPrefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 设定 CAS server</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>casServerUrlPrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUrlSuffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 验证路径</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">\"validate\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Assertion</span> <span class=\"token function\">parseResponseFromServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> response<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throws</span> <span class=\"token class-name\">TicketValidationException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 判定验证通过成果及结果反馈</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// bearer 验证需要</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CookieBearerTokenResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BearerTokenResolver</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">COOKIE_NAME_BEARER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>cookie <span class=\"token operator\">-></span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsAnyIgnoreCase</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COOKIE_NAME_BEARER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cookie</span><span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MakeTokenHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FilterAuthSuccessHandler</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationSuccess</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token class-name\">Jwt</span> jwt <span class=\"token operator\">=</span> jwtEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">JwtEncoderParameters</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>jwsHeader<span class=\"token punctuation\">,</span> jwtClaimsSetBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">getTokenValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcookie<span class=\"token punctuation\">.</span><span class=\"token function\">setPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span>cookieTimeoutSecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcookie<span class=\"token punctuation\">.</span><span class=\"token function\">setHttpOnly</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultAuthFailHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationFailureHandler</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LogoutSuccessHandler</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationFailure</span><span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">AuthenticationException</span> exception<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span>\n    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InvalidBearerTokenException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Cookie</span> cookie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cookie<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNAUTHORIZED</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/plain;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PrintWriter</span> writer <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录已过期或被推出，需要重新登录验证！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 记住登出或访问前的地址</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录页面地址\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 重新签发 token</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtRenewFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>\n                                  <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token class-name\">String</span> bearerToken <span class=\"token operator\">=</span> bearerTokenResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Jwt</span> jwt <span class=\"token operator\">=</span> jwtDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bearerToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Instant</span> expiresAt <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">getExpiresAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expiresAt<span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">plusSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> ticket <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">getClaimAsString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"st\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                casTicketValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> serviceUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">renewJwt</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> jwtEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TicketValidationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token comment\">//...</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableWebSecurity</span>\n<span class=\"token annotation punctuation\">@AutoConfigureAfter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginBaseConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginConfiguration</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HttpSecurity</span> httpSecurity<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationManager</span> authenticationManager<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MakeTokenHandler</span> makeTokenHandler\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DefaultAuthFailHandler</span> defaultAuthFailHandler<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Resource</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationDetailsSource</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebAuthenticationDetails</span><span class=\"token punctuation\">></span></span> webAuthenticationDetailsSource<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxxx&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> applicationServerUrl<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;xxxx&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">CASServerUrl</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 12h</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;login.jwt.cookieTimeoutSecond:43200&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> cookieTimeoutSecond<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;login.jwt.casDurationSecond:600&#125;\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> casDurationSecond<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSecurity</span> builder<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">BearerTokenAuthenticationFilter</span> bearerTokenFilter <span class=\"token operator\">=</span> \n          <span class=\"token keyword\">new</span> <span class=\"token class-name\">BearerTokenAuthenticationFilter</span><span class=\"token punctuation\">(</span>authenticationManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      bearerTokenFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationDetailsSource</span><span class=\"token punctuation\">(</span>\n        dzdaWebAuthenticationDetailsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BearerTokenResolver</span> bearerTokenResolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CookieBearerTokenResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bearerTokenFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setBearerTokenResolver</span><span class=\"token punctuation\">(</span>makeTokenHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bearerTokenFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationFailureHandler</span><span class=\"token punctuation\">(</span>defaultAuthFailHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">AbstractAuthenticationProcessingFilter</span> casAuthenticationFilter\n          <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAuthenticationFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationFailureHandler</span><span class=\"token punctuation\">(</span>defaultAuthFailHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationManager</span><span class=\"token punctuation\">(</span>authenticationManager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setFilterProcessesUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/cas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationDetailsSource</span><span class=\"token punctuation\">(</span>\n        dzdaWebAuthenticationDetailsSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      casAuthenticationFilter<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationSuccessHandler</span><span class=\"token punctuation\">(</span>\n        dzdaCasAuthenticationSuccessHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">JwtRenewFilter</span> jwtRenewFilter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtRenewFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n          <span class=\"token function\">setBearerTokenResolver</span><span class=\"token punctuation\">(</span>bearerTokenResolver<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setCasTicketValidator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TuscCasTicketValidator</span><span class=\"token punctuation\">(</span>casServerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setServiceUrl</span><span class=\"token punctuation\">(</span>applicationServerUrl<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setCookieTimeoutSecond</span><span class=\"token punctuation\">(</span>cookieTimeoutSecond<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setCasDurationSecond</span><span class=\"token punctuation\">(</span>casDurationSecond<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDurationSecond</span><span class=\"token punctuation\">(</span>localDurationSecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">authenticationManager</span><span class=\"token punctuation\">(</span>authenticationManager<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>casAuthenticationFilter<span class=\"token punctuation\">,</span> \n                                 <span class=\"token class-name\">X509AuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtRenewFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BearerTokenAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>bearerTokenFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">X509AuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeHttpRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">deleteCookies</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bearer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JESSIONID\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">invalidateHttpSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logoutroute\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultAuthFailHandler</span><span class=\"token punctuation\">(</span>\n                  applicationServerUrl<span class=\"token punctuation\">,</span> casServerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">addSecurityFilterChainBuilder</span><span class=\"token punctuation\">(</span>httpSecurity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CorsConfigurationSource</span> <span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">CorsConfiguration</span> configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        source<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \t\t<span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthenticationProvider</span> <span class=\"token function\">casAuthenticationProvider</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginServiceImpl</span> loginService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">CasAuthenticationProvider</span> casAuthenticationProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CasAuthenticationProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setAuthenticationUserDetailsService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XXXCasUserDetailsService</span><span class=\"token punctuation\">(</span>loginService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setTicketValidator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TuscCasTicketValidator</span><span class=\"token punctuation\">(</span>ssoUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ServiceProperties</span> serviceProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        serviceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">setService</span><span class=\"token punctuation\">(</span>applicationServerUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setServiceProperties</span><span class=\"token punctuation\">(</span>serviceProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        casAuthenticationProvider<span class=\"token punctuation\">.</span><span class=\"token function\">setKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"casAuthenticationProvider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> casAuthenticationProvider<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>:high_brightness: <font color='blue'><strong>需要明确 Filter 的先后顺序，顺序不对可能会造成验证 bug，比如 renewFilter 应该在 BearerTokenAuthenticationFilter 之前。否则 renewFilter 就没有意义了。</strong></font></p>\n"},{"title":"Redis 分布式锁你续约了吗","date":"2024-01-31T13:38:27.000Z","_content":"## Redis 分布式锁你续期了吗？\n\n服务在集群情况下，线程锁是无法满足服务之间逻辑隔离。分布式锁概念应运而生，它需要具备互斥性、防止死锁、高可用性、可重入性、唯一标识的特点。\n\n- 互斥性：任意时刻，只能有一个服务才能获取锁。\n\n- 防止死锁：分布式锁应该在服务逻辑运行异常或崩溃时能够自动释放。一般的做法是给锁设定超时时间避免死锁。\n\n- 高可用性：确保锁提供方节点故障时也能正常工作，确保锁的可靠性。\n\n- 可重入性：允许同一个线程或服务在持有锁的情况下多次获取同一个锁，而不会出现死锁或阻塞。\n\n- 唯一标识：分布式锁应该具备唯一的标识。\n\n\n分布式锁方案大体有几种，使用基于唯一索引的数据库表、zookeeper/etcd、redis。为达到分布式锁的互斥性和防止死锁这两个特性，方案是设定超时时间配合**定时续期**以达到目的。如果你用 Redis 实现分布式锁，请问你项目中 Redis 分布式锁有**定时续期**吗？\n\nJedis 主要包含数据结构操作和队列 PUB/SUB 操作。Redisson 组件除此之外还包含分布式锁的实现。Redisson 关于获取锁有六种方式，`lock()` 、`tryLock()`、`lockInterruptibly()` 、`tryLock(long waitTime, TimeUnit unit)`、 `lock(long leaseTime, TimeUnit unit)` 、`tryLock(long waitTime, long leaseTime, TimeUnit unit)`。区分点在于 是否等待获取锁、等待获取锁时长，是否有过期、过期时间。好像没有看到续期相关的内容。\n\n#### :mag: 续期藏在细节里\n\n就像老夫老妻一样，:heart: 爱是藏在细节里，续期藏在锁获取的细节里。\n\n> :vertical_traffic_light: 代码是以 redisson-3.18.0 版本为例，估计总体思路差不多。\n\n```java\n// RedissonLock\nprivate <T> RFuture<Long> tryAcquireAsync(long waitTime, long leaseTime, TimeUnit unit, long threadId) {\n    RFuture<Long> ttlRemainingFuture;\n    if (leaseTime > 0) {\n        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);\n    } else {\n        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,\n                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);\n    }\n    CompletionStage<Long> f = ttlRemainingFuture.thenApply(ttlRemaining -> {\n        // lock acquired\n        if (ttlRemaining == null) {\n            if (leaseTime > 0) {\n                internalLockLeaseTime = unit.toMillis(leaseTime);\n            } else {\n                scheduleExpirationRenewal(threadId);\n            }\n        }\n        return ttlRemaining;\n    });\n    return new CompletableFutureWrapper<>(f);\n}   \n```\n\n首先，没有设置过期时间时，redisson 会使用 `internalLockLeaseTime` （它指 lock 内置过期时间，lock 对象初始化时从配置类 `org.redisson.config.Config#lockWatchdogTimeout` 中获取，默认 30 s）作为过期时间来申请分布式锁。第一次申请锁成功后 `ttlRemainingFuture.thenApply` ，如果自定义过期时间有值，则重新设置 `internalLockLeaseTime`。没有设置的话，则需要定时续期，保证锁能被本线程一直持有。\n\n```java\n// RedissonBaseLock\n    protected void scheduleExpirationRenewal(long threadId) {\n    ExpirationEntry entry = new ExpirationEntry();\n    ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);\n    if (oldEntry != null) {\n        // 可重入位置，因为不存在获取锁之后，同一线程的并发问题，所以这里使用 LinkedHashMap\n        oldEntry.addThreadId(threadId);\n    } else {\n        entry.addThreadId(threadId);\n        try {\n            renewExpiration();\n        } finally {\n            if (Thread.currentThread().isInterrupted()) {\n                cancelExpirationRenewal(threadId);\n            }\n        }\n    }\n}\nprivate void renewExpiration() {\n    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());\n    if (ee == null) {\n        return;\n    }\n    Timeout task = commandExecutor.getConnectionManager().newTimeout(new TimerTask() {\n        @Override\n        public void run(Timeout timeout) throws Exception {\n            ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());\n            if (ent == null) {\n                return;\n            }\n            Long threadId = ent.getFirstThreadId();\n            if (threadId == null) {\n                return;\n            }\n            CompletionStage<Boolean> future = renewExpirationAsync(threadId);\n            future.whenComplete((res, e) -> {\n                if (e != null) {\n                    log.error(\"Can't update lock \" + getRawName() + \" expiration\", e);\n                    EXPIRATION_RENEWAL_MAP.remove(getEntryName());\n                    return;\n                }\n                if (res) {\n                    // reschedule itself\n                    renewExpiration();\n                } else {\n                    cancelExpirationRenewal(null);\n                }\n            });\n        }\n    }, internalLockLeaseTime / 3, TimeUnit.MILLISECONDS);\n    ee.setTimeout(task);\n}\n```\n\n**简单概括，就是未设置过期时间的分布式锁，是以 30s 过期时间先获取分布式锁，程序中使用时间片方式在每 10s (30s * 1/3) 续期。设置过期时间的分布式锁反而不能享受续期。**\n\n:sweat_smile: 本来大家在实战过程中，就是怕锁不释放，基本上都会被建议使用 `tryLock(long waitTime, long leaseTime, TimeUnit unit)` ，结果只有这种设置 leaseTime 的获取锁没有续期。多少有点被背 (feng) 刺 (ci) :bee:。我们需要解决这个问（feng）题（ci），希望在 leaseTime 设置时，也能享受续期功效。\n\n#### :balance_scale: 超时与续期兼得\n\n好在 `RedissonBaseLock` 中关于续期的方法 `scheduleExpirationRenewal` 和 `cancelExpirationRenewal` 都是 `protected` 修饰符修饰。可以建立 `RedissonBaseLock` 的包装类，在获取锁和释放锁的时候对 leaseTime 设置的续期补足即可。\n\n```java\npackage org.redisson;\n\nimport java.lang.reflect.Field;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Condition;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RFuture;\nimport org.redisson.api.RLock;\n\n/**\n * 分布式锁.<br>\n * 用装饰者模式给所有 lock 加上时间过期前的续期操作.<br>\n * redis 作为分布式锁方案一定会有弊端，比如出现哨兵模式的 redis 集群，就可能因为锁信息在主节点同步从节点时出现的主节点中断，导致从节点成为主节点之后\n * 无锁信息，导致的其他线程申请到锁，此时就会出现两个线程获取到同一把锁的 ganga 场景.<br>\n * 请注意合理使用锁，获取锁后一定在 finally 中释放锁，程序运行时间长之后一定会出现内存溢出问题.\n *\n * @author liulili\n * @since 20243-01-19\n */\n@Slf4j\npublic class RenewalLock implements RLock {\n\n    private final RedissonBaseLock lock;\n\n    public RenewalLock(RLock lock) {\n        if (lock instanceof RenewalLock) {\n            throw new IllegalArgumentException(\"lock 本就是续期锁，不需要二次装饰！\");\n        }\n        if (lock instanceof RedissonBaseLock) {\n            this.lock = (RedissonBaseLock) lock;\n            return;\n        }\n        throw new IllegalArgumentException(\"分布式锁续期的功能至少是 RedissonBaseLock 的实例，到 redisson 3.18.0 版本，RedissonMultiLock 是不能被 DistributedLock 装饰的！\");\n    }\n\n    @Override\n    public String getName() {\n        return \"renewal_\" + lock.getName();\n    }\n\n    private void scheduleExpirationRenewal(long leaseTime) {\n        this.scheduleExpirationRenewal(leaseTime, Thread.currentThread().getId());\n    }\n\n    private void scheduleExpirationRenewal(long leaseTime, long threadId) {\n        try {\n            Field field = RedissonBaseLock.class.getDeclaredField(\"internalLockLeaseTime\");\n            field.setAccessible(true);\n            field.setLong(lock, leaseTime);\n        } catch (Exception e) {\n            log.error(\"RedissonBaseLock 类没有 internalLockLeaseTime 属性，请注意版本\", e);\n        }\n        lock.scheduleExpirationRenewal(threadId);\n    }\n    private void cancelExpirationRenewal() {\n        this.cancelExpirationRenewal(Thread.currentThread().getId());\n    }\n    private void cancelExpirationRenewal(long threadId) {\n        lock.cancelExpirationRenewal(threadId);\n    }\n\n    @Override\n    public void lockInterruptibly(long leaseTime, TimeUnit unit) throws InterruptedException {\n        lock.lockInterruptibly(leaseTime, unit);\n        if (leaseTime > -1) {\n            this.scheduleExpirationRenewal(leaseTime);\n        }\n    }\n\n    @Override\n    public boolean tryLock(long waitTime, long leaseTime, TimeUnit unit) throws InterruptedException {\n        boolean getLockSuccess = lock.tryLock(waitTime, leaseTime, unit);\n        if (getLockSuccess && leaseTime > -1) {\n            this.scheduleExpirationRenewal(leaseTime);\n        }\n        return getLockSuccess;\n    }\n\n    @Override\n    public void lock(long leaseTime, TimeUnit unit) {\n        lock.lock(leaseTime, unit);\n        if (leaseTime > -1) {\n            this.scheduleExpirationRenewal(leaseTime);\n        }\n    }\n\n    @Override\n    public boolean forceUnlock() {\n        try {\n            return lock.forceUnlock();\n        } finally {\n            this.cancelExpirationRenewal();\n        }\n\n    }\n\n    @Override\n    public boolean isLocked() {\n        return lock.isLocked();\n    }\n\n    @Override\n    public boolean isHeldByThread(long threadId) {\n        return lock.isHeldByThread(threadId);\n    }\n\n    @Override\n    public boolean isHeldByCurrentThread() {\n        return lock.isHeldByCurrentThread();\n    }\n\n    @Override\n    public int getHoldCount() {\n        return lock.getHoldCount();\n    }\n\n    @Override\n    public long remainTimeToLive() {\n        return lock.remainTimeToLive();\n    }\n\n    // 还是默认的超时时间\n    @Override\n    public void lock() {\n        lock.lock();\n    }\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        lock.lockInterruptibly();\n    }\n\n    @Override\n    public boolean tryLock() {\n        return lock.tryLock();\n    }\n\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        return tryLock(time, -1, unit);\n    }\n\n    @Override\n    public void unlock() {\n        try {\n            lock.unlock();\n        } finally {\n            this.cancelExpirationRenewal();\n        }\n\n    }\n\n    @Override\n    public Condition newCondition() {\n        return lock.newCondition();\n    }\n\n    @Override\n    public RFuture<Boolean> forceUnlockAsync() {\n        RFuture<Boolean> unlockFuture = lock.forceUnlockAsync();\n        unlockFuture.whenComplete((unlockStatus, e) -> this.cancelExpirationRenewal());\n        return unlockFuture;\n    }\n\n    @Override\n    public RFuture<Void> unlockAsync() {\n        RFuture<Void> unlockFuture = lock.unlockAsync();\n        unlockFuture.whenComplete((unlockStatus, e) -> this.cancelExpirationRenewal());\n        return unlockFuture;\n    }\n\n    @Override\n    public RFuture<Void> unlockAsync(long threadId) {\n        RFuture<Void> unlockFuture = lock.unlockAsync(threadId);\n        unlockFuture.whenComplete((unlockStatus, e) -> this.cancelExpirationRenewal(threadId));\n        return unlockFuture;\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync() {\n        return lock.tryLockAsync();\n    }\n\n    @Override\n    public RFuture<Void> lockAsync() {\n        return lock.lockAsync();\n    }\n\n    @Override\n    public RFuture<Void> lockAsync(long threadId) {\n        return lock.lockAsync(threadId);\n    }\n\n    @Override\n    public RFuture<Void> lockAsync(long leaseTime, TimeUnit unit) {\n        RFuture<Void> lockFuture = lock.lockAsync(leaseTime, unit);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Void> lockAsync(long leaseTime, TimeUnit unit, long threadId) {\n        RFuture<Void> lockFuture = lock.lockAsync(leaseTime, unit, threadId);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime, threadId);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long threadId) {\n        return lock.tryLockAsync(threadId);\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long waitTime, TimeUnit unit) {\n        return lock.tryLockAsync(waitTime, unit);\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long waitTime, long leaseTime, TimeUnit unit) {\n        RFuture<Boolean> lockFuture = lock.tryLockAsync(waitTime, leaseTime, unit);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long waitTime, long leaseTime, TimeUnit unit, long threadId) {\n        RFuture<Boolean> lockFuture = lock.tryLockAsync(waitTime, leaseTime, unit, threadId);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime, threadId);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Integer> getHoldCountAsync() {\n        return lock.getHoldCountAsync();\n    }\n\n    @Override\n    public RFuture<Boolean> isLockedAsync() {\n        return lock.isLockedAsync();\n    }\n\n    @Override\n    public RFuture<Long> remainTimeToLiveAsync() {\n        return lock.remainTimeToLiveAsync();\n    }\n\n}\n```\n\n有三个注意点：首先，这个装饰类需要放在 `org.redisson` 只有这样才能使用 `proteced void scheduleExpirationRenewal()` 和 `protected void cancelExpirationRenewal()` 方法。其次，续期依旧是按照 `internalLockLeaseTime` /3 间隔触发，但因为是申请锁完结之后的续期，所以此时的 `internalLockLeaseTime` 为第一次申请锁的 `leaseTime` 。第三，因 Redisson 版本不一样，可能不会有 RedissonBaseLock 基类，你可以升级版本后使用装饰类。","source":"_posts/Redis-分布式锁你续约了吗.md","raw":"---\ntitle: Redis 分布式锁你续约了吗\ndate: 2024-01-31 21:38:27\ncategories:\n- code\ntags:\n- code\n- 分布式锁\n- redis\n---\n## Redis 分布式锁你续期了吗？\n\n服务在集群情况下，线程锁是无法满足服务之间逻辑隔离。分布式锁概念应运而生，它需要具备互斥性、防止死锁、高可用性、可重入性、唯一标识的特点。\n\n- 互斥性：任意时刻，只能有一个服务才能获取锁。\n\n- 防止死锁：分布式锁应该在服务逻辑运行异常或崩溃时能够自动释放。一般的做法是给锁设定超时时间避免死锁。\n\n- 高可用性：确保锁提供方节点故障时也能正常工作，确保锁的可靠性。\n\n- 可重入性：允许同一个线程或服务在持有锁的情况下多次获取同一个锁，而不会出现死锁或阻塞。\n\n- 唯一标识：分布式锁应该具备唯一的标识。\n\n\n分布式锁方案大体有几种，使用基于唯一索引的数据库表、zookeeper/etcd、redis。为达到分布式锁的互斥性和防止死锁这两个特性，方案是设定超时时间配合**定时续期**以达到目的。如果你用 Redis 实现分布式锁，请问你项目中 Redis 分布式锁有**定时续期**吗？\n\nJedis 主要包含数据结构操作和队列 PUB/SUB 操作。Redisson 组件除此之外还包含分布式锁的实现。Redisson 关于获取锁有六种方式，`lock()` 、`tryLock()`、`lockInterruptibly()` 、`tryLock(long waitTime, TimeUnit unit)`、 `lock(long leaseTime, TimeUnit unit)` 、`tryLock(long waitTime, long leaseTime, TimeUnit unit)`。区分点在于 是否等待获取锁、等待获取锁时长，是否有过期、过期时间。好像没有看到续期相关的内容。\n\n#### :mag: 续期藏在细节里\n\n就像老夫老妻一样，:heart: 爱是藏在细节里，续期藏在锁获取的细节里。\n\n> :vertical_traffic_light: 代码是以 redisson-3.18.0 版本为例，估计总体思路差不多。\n\n```java\n// RedissonLock\nprivate <T> RFuture<Long> tryAcquireAsync(long waitTime, long leaseTime, TimeUnit unit, long threadId) {\n    RFuture<Long> ttlRemainingFuture;\n    if (leaseTime > 0) {\n        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);\n    } else {\n        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,\n                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);\n    }\n    CompletionStage<Long> f = ttlRemainingFuture.thenApply(ttlRemaining -> {\n        // lock acquired\n        if (ttlRemaining == null) {\n            if (leaseTime > 0) {\n                internalLockLeaseTime = unit.toMillis(leaseTime);\n            } else {\n                scheduleExpirationRenewal(threadId);\n            }\n        }\n        return ttlRemaining;\n    });\n    return new CompletableFutureWrapper<>(f);\n}   \n```\n\n首先，没有设置过期时间时，redisson 会使用 `internalLockLeaseTime` （它指 lock 内置过期时间，lock 对象初始化时从配置类 `org.redisson.config.Config#lockWatchdogTimeout` 中获取，默认 30 s）作为过期时间来申请分布式锁。第一次申请锁成功后 `ttlRemainingFuture.thenApply` ，如果自定义过期时间有值，则重新设置 `internalLockLeaseTime`。没有设置的话，则需要定时续期，保证锁能被本线程一直持有。\n\n```java\n// RedissonBaseLock\n    protected void scheduleExpirationRenewal(long threadId) {\n    ExpirationEntry entry = new ExpirationEntry();\n    ExpirationEntry oldEntry = EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);\n    if (oldEntry != null) {\n        // 可重入位置，因为不存在获取锁之后，同一线程的并发问题，所以这里使用 LinkedHashMap\n        oldEntry.addThreadId(threadId);\n    } else {\n        entry.addThreadId(threadId);\n        try {\n            renewExpiration();\n        } finally {\n            if (Thread.currentThread().isInterrupted()) {\n                cancelExpirationRenewal(threadId);\n            }\n        }\n    }\n}\nprivate void renewExpiration() {\n    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());\n    if (ee == null) {\n        return;\n    }\n    Timeout task = commandExecutor.getConnectionManager().newTimeout(new TimerTask() {\n        @Override\n        public void run(Timeout timeout) throws Exception {\n            ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());\n            if (ent == null) {\n                return;\n            }\n            Long threadId = ent.getFirstThreadId();\n            if (threadId == null) {\n                return;\n            }\n            CompletionStage<Boolean> future = renewExpirationAsync(threadId);\n            future.whenComplete((res, e) -> {\n                if (e != null) {\n                    log.error(\"Can't update lock \" + getRawName() + \" expiration\", e);\n                    EXPIRATION_RENEWAL_MAP.remove(getEntryName());\n                    return;\n                }\n                if (res) {\n                    // reschedule itself\n                    renewExpiration();\n                } else {\n                    cancelExpirationRenewal(null);\n                }\n            });\n        }\n    }, internalLockLeaseTime / 3, TimeUnit.MILLISECONDS);\n    ee.setTimeout(task);\n}\n```\n\n**简单概括，就是未设置过期时间的分布式锁，是以 30s 过期时间先获取分布式锁，程序中使用时间片方式在每 10s (30s * 1/3) 续期。设置过期时间的分布式锁反而不能享受续期。**\n\n:sweat_smile: 本来大家在实战过程中，就是怕锁不释放，基本上都会被建议使用 `tryLock(long waitTime, long leaseTime, TimeUnit unit)` ，结果只有这种设置 leaseTime 的获取锁没有续期。多少有点被背 (feng) 刺 (ci) :bee:。我们需要解决这个问（feng）题（ci），希望在 leaseTime 设置时，也能享受续期功效。\n\n#### :balance_scale: 超时与续期兼得\n\n好在 `RedissonBaseLock` 中关于续期的方法 `scheduleExpirationRenewal` 和 `cancelExpirationRenewal` 都是 `protected` 修饰符修饰。可以建立 `RedissonBaseLock` 的包装类，在获取锁和释放锁的时候对 leaseTime 设置的续期补足即可。\n\n```java\npackage org.redisson;\n\nimport java.lang.reflect.Field;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Condition;\nimport lombok.extern.slf4j.Slf4j;\nimport org.redisson.api.RFuture;\nimport org.redisson.api.RLock;\n\n/**\n * 分布式锁.<br>\n * 用装饰者模式给所有 lock 加上时间过期前的续期操作.<br>\n * redis 作为分布式锁方案一定会有弊端，比如出现哨兵模式的 redis 集群，就可能因为锁信息在主节点同步从节点时出现的主节点中断，导致从节点成为主节点之后\n * 无锁信息，导致的其他线程申请到锁，此时就会出现两个线程获取到同一把锁的 ganga 场景.<br>\n * 请注意合理使用锁，获取锁后一定在 finally 中释放锁，程序运行时间长之后一定会出现内存溢出问题.\n *\n * @author liulili\n * @since 20243-01-19\n */\n@Slf4j\npublic class RenewalLock implements RLock {\n\n    private final RedissonBaseLock lock;\n\n    public RenewalLock(RLock lock) {\n        if (lock instanceof RenewalLock) {\n            throw new IllegalArgumentException(\"lock 本就是续期锁，不需要二次装饰！\");\n        }\n        if (lock instanceof RedissonBaseLock) {\n            this.lock = (RedissonBaseLock) lock;\n            return;\n        }\n        throw new IllegalArgumentException(\"分布式锁续期的功能至少是 RedissonBaseLock 的实例，到 redisson 3.18.0 版本，RedissonMultiLock 是不能被 DistributedLock 装饰的！\");\n    }\n\n    @Override\n    public String getName() {\n        return \"renewal_\" + lock.getName();\n    }\n\n    private void scheduleExpirationRenewal(long leaseTime) {\n        this.scheduleExpirationRenewal(leaseTime, Thread.currentThread().getId());\n    }\n\n    private void scheduleExpirationRenewal(long leaseTime, long threadId) {\n        try {\n            Field field = RedissonBaseLock.class.getDeclaredField(\"internalLockLeaseTime\");\n            field.setAccessible(true);\n            field.setLong(lock, leaseTime);\n        } catch (Exception e) {\n            log.error(\"RedissonBaseLock 类没有 internalLockLeaseTime 属性，请注意版本\", e);\n        }\n        lock.scheduleExpirationRenewal(threadId);\n    }\n    private void cancelExpirationRenewal() {\n        this.cancelExpirationRenewal(Thread.currentThread().getId());\n    }\n    private void cancelExpirationRenewal(long threadId) {\n        lock.cancelExpirationRenewal(threadId);\n    }\n\n    @Override\n    public void lockInterruptibly(long leaseTime, TimeUnit unit) throws InterruptedException {\n        lock.lockInterruptibly(leaseTime, unit);\n        if (leaseTime > -1) {\n            this.scheduleExpirationRenewal(leaseTime);\n        }\n    }\n\n    @Override\n    public boolean tryLock(long waitTime, long leaseTime, TimeUnit unit) throws InterruptedException {\n        boolean getLockSuccess = lock.tryLock(waitTime, leaseTime, unit);\n        if (getLockSuccess && leaseTime > -1) {\n            this.scheduleExpirationRenewal(leaseTime);\n        }\n        return getLockSuccess;\n    }\n\n    @Override\n    public void lock(long leaseTime, TimeUnit unit) {\n        lock.lock(leaseTime, unit);\n        if (leaseTime > -1) {\n            this.scheduleExpirationRenewal(leaseTime);\n        }\n    }\n\n    @Override\n    public boolean forceUnlock() {\n        try {\n            return lock.forceUnlock();\n        } finally {\n            this.cancelExpirationRenewal();\n        }\n\n    }\n\n    @Override\n    public boolean isLocked() {\n        return lock.isLocked();\n    }\n\n    @Override\n    public boolean isHeldByThread(long threadId) {\n        return lock.isHeldByThread(threadId);\n    }\n\n    @Override\n    public boolean isHeldByCurrentThread() {\n        return lock.isHeldByCurrentThread();\n    }\n\n    @Override\n    public int getHoldCount() {\n        return lock.getHoldCount();\n    }\n\n    @Override\n    public long remainTimeToLive() {\n        return lock.remainTimeToLive();\n    }\n\n    // 还是默认的超时时间\n    @Override\n    public void lock() {\n        lock.lock();\n    }\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        lock.lockInterruptibly();\n    }\n\n    @Override\n    public boolean tryLock() {\n        return lock.tryLock();\n    }\n\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        return tryLock(time, -1, unit);\n    }\n\n    @Override\n    public void unlock() {\n        try {\n            lock.unlock();\n        } finally {\n            this.cancelExpirationRenewal();\n        }\n\n    }\n\n    @Override\n    public Condition newCondition() {\n        return lock.newCondition();\n    }\n\n    @Override\n    public RFuture<Boolean> forceUnlockAsync() {\n        RFuture<Boolean> unlockFuture = lock.forceUnlockAsync();\n        unlockFuture.whenComplete((unlockStatus, e) -> this.cancelExpirationRenewal());\n        return unlockFuture;\n    }\n\n    @Override\n    public RFuture<Void> unlockAsync() {\n        RFuture<Void> unlockFuture = lock.unlockAsync();\n        unlockFuture.whenComplete((unlockStatus, e) -> this.cancelExpirationRenewal());\n        return unlockFuture;\n    }\n\n    @Override\n    public RFuture<Void> unlockAsync(long threadId) {\n        RFuture<Void> unlockFuture = lock.unlockAsync(threadId);\n        unlockFuture.whenComplete((unlockStatus, e) -> this.cancelExpirationRenewal(threadId));\n        return unlockFuture;\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync() {\n        return lock.tryLockAsync();\n    }\n\n    @Override\n    public RFuture<Void> lockAsync() {\n        return lock.lockAsync();\n    }\n\n    @Override\n    public RFuture<Void> lockAsync(long threadId) {\n        return lock.lockAsync(threadId);\n    }\n\n    @Override\n    public RFuture<Void> lockAsync(long leaseTime, TimeUnit unit) {\n        RFuture<Void> lockFuture = lock.lockAsync(leaseTime, unit);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Void> lockAsync(long leaseTime, TimeUnit unit, long threadId) {\n        RFuture<Void> lockFuture = lock.lockAsync(leaseTime, unit, threadId);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime, threadId);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long threadId) {\n        return lock.tryLockAsync(threadId);\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long waitTime, TimeUnit unit) {\n        return lock.tryLockAsync(waitTime, unit);\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long waitTime, long leaseTime, TimeUnit unit) {\n        RFuture<Boolean> lockFuture = lock.tryLockAsync(waitTime, leaseTime, unit);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Boolean> tryLockAsync(long waitTime, long leaseTime, TimeUnit unit, long threadId) {\n        RFuture<Boolean> lockFuture = lock.tryLockAsync(waitTime, leaseTime, unit, threadId);\n        lockFuture.whenComplete((unlockStatus, e) -> {\n            if (Objects.nonNull(e)) {\n                return;\n            }\n            if (leaseTime > -1) {\n                this.scheduleExpirationRenewal(leaseTime, threadId);\n            }\n        });\n        return lockFuture;\n    }\n\n    @Override\n    public RFuture<Integer> getHoldCountAsync() {\n        return lock.getHoldCountAsync();\n    }\n\n    @Override\n    public RFuture<Boolean> isLockedAsync() {\n        return lock.isLockedAsync();\n    }\n\n    @Override\n    public RFuture<Long> remainTimeToLiveAsync() {\n        return lock.remainTimeToLiveAsync();\n    }\n\n}\n```\n\n有三个注意点：首先，这个装饰类需要放在 `org.redisson` 只有这样才能使用 `proteced void scheduleExpirationRenewal()` 和 `protected void cancelExpirationRenewal()` 方法。其次，续期依旧是按照 `internalLockLeaseTime` /3 间隔触发，但因为是申请锁完结之后的续期，所以此时的 `internalLockLeaseTime` 为第一次申请锁的 `leaseTime` 。第三，因 Redisson 版本不一样，可能不会有 RedissonBaseLock 基类，你可以升级版本后使用装饰类。","slug":"Redis-分布式锁你续约了吗","published":1,"updated":"2024-02-18T04:44:36.054Z","_id":"cls1u7p9c00008h666rawb7y6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Redis-分布式锁你续期了吗？\"><a href=\"#Redis-分布式锁你续期了吗？\" class=\"headerlink\" title=\"Redis 分布式锁你续期了吗？\"></a>Redis 分布式锁你续期了吗？</h2><p>服务在集群情况下，线程锁是无法满足服务之间逻辑隔离。分布式锁概念应运而生，它需要具备互斥性、防止死锁、高可用性、可重入性、唯一标识的特点。</p>\n<ul>\n<li><p>互斥性：任意时刻，只能有一个服务才能获取锁。</p>\n</li>\n<li><p>防止死锁：分布式锁应该在服务逻辑运行异常或崩溃时能够自动释放。一般的做法是给锁设定超时时间避免死锁。</p>\n</li>\n<li><p>高可用性：确保锁提供方节点故障时也能正常工作，确保锁的可靠性。</p>\n</li>\n<li><p>可重入性：允许同一个线程或服务在持有锁的情况下多次获取同一个锁，而不会出现死锁或阻塞。</p>\n</li>\n<li><p>唯一标识：分布式锁应该具备唯一的标识。</p>\n</li>\n</ul>\n<p>分布式锁方案大体有几种，使用基于唯一索引的数据库表、zookeeper/etcd、redis。为达到分布式锁的互斥性和防止死锁这两个特性，方案是设定超时时间配合<strong>定时续期</strong>以达到目的。如果你用 Redis 实现分布式锁，请问你项目中 Redis 分布式锁有<strong>定时续期</strong>吗？</p>\n<p>Jedis 主要包含数据结构操作和队列 PUB/SUB 操作。Redisson 组件除此之外还包含分布式锁的实现。Redisson 关于获取锁有六种方式，<code>lock()</code> 、<code>tryLock()</code>、<code>lockInterruptibly()</code> 、<code>tryLock(long waitTime, TimeUnit unit)</code>、 <code>lock(long leaseTime, TimeUnit unit)</code> 、<code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code>。区分点在于 是否等待获取锁、等待获取锁时长，是否有过期、过期时间。好像没有看到续期相关的内容。</p>\n<h4 id=\"mag-续期藏在细节里\"><a href=\"#mag-续期藏在细节里\" class=\"headerlink\" title=\":mag: 续期藏在细节里\"></a><span class=\"github-emoji\"><span>🔍</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 续期藏在细节里</h4><p>就像老夫老妻一样，<span class=\"github-emoji\"><span>❤</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 爱是藏在细节里，续期藏在锁获取的细节里。</p>\n<blockquote>\n<p><span class=\"github-emoji\"><span>🚦</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 代码是以 redisson-3.18.0 版本为例，估计总体思路差不多。</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// RedissonLock</span>\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">tryAcquireAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> ttlRemainingFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ttlRemainingFuture <span class=\"token operator\">=</span> <span class=\"token function\">tryLockInnerAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCommands</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVAL_LONG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        ttlRemainingFuture <span class=\"token operator\">=</span> <span class=\"token function\">tryLockInnerAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> internalLockLeaseTime<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCommands</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVAL_LONG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">CompletionStage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> f <span class=\"token operator\">=</span> ttlRemainingFuture<span class=\"token punctuation\">.</span><span class=\"token function\">thenApply</span><span class=\"token punctuation\">(</span>ttlRemaining <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// lock acquired</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttlRemaining <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                internalLockLeaseTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toMillis</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ttlRemaining<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompletableFutureWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先，没有设置过期时间时，redisson 会使用 <code>internalLockLeaseTime</code> （它指 lock 内置过期时间，lock 对象初始化时从配置类 <code>org.redisson.config.Config#lockWatchdogTimeout</code> 中获取，默认 30 s）作为过期时间来申请分布式锁。第一次申请锁成功后 <code>ttlRemainingFuture.thenApply</code> ，如果自定义过期时间有值，则重新设置 <code>internalLockLeaseTime</code>。没有设置的话，则需要定时续期，保证锁能被本线程一直持有。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// RedissonBaseLock</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ExpirationEntry</span> entry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExpirationEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ExpirationEntry</span> oldEntry <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldEntry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 可重入位置，因为不存在获取锁之后，同一线程的并发问题，所以这里使用 LinkedHashMap</span>\n        oldEntry<span class=\"token punctuation\">.</span><span class=\"token function\">addThreadId</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        entry<span class=\"token punctuation\">.</span><span class=\"token function\">addThreadId</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ExpirationEntry</span> ee <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ee <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Timeout</span> task <span class=\"token operator\">=</span> commandExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Timeout</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">ExpirationEntry</span> ent <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Long</span> threadId <span class=\"token operator\">=</span> ent<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">CompletionStage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> future <span class=\"token operator\">=</span> <span class=\"token function\">renewExpirationAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't update lock \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getRawName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" expiration\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// reschedule itself</span>\n                    <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> internalLockLeaseTime <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ee<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>简单概括，就是未设置过期时间的分布式锁，是以 30s 过期时间先获取分布式锁，程序中使用时间片方式在每 10s (30s * 1/3) 续期。设置过期时间的分布式锁反而不能享受续期。</strong></p>\n<p><span class=\"github-emoji\"><span>😅</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 本来大家在实战过程中，就是怕锁不释放，基本上都会被建议使用 <code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> ，结果只有这种设置 leaseTime 的获取锁没有续期。多少有点被背 (feng) 刺 (ci) <span class=\"github-emoji\"><span>🐝</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span>。我们需要解决这个问（feng）题（ci），希望在 leaseTime 设置时，也能享受续期功效。</p>\n<h4 id=\"balance-scale-超时与续期兼得\"><a href=\"#balance-scale-超时与续期兼得\" class=\"headerlink\" title=\":balance_scale: 超时与续期兼得\"></a><span class=\"github-emoji\"><span>⚖</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2696.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 超时与续期兼得</h4><p>好在 <code>RedissonBaseLock</code> 中关于续期的方法 <code>scheduleExpirationRenewal</code> 和 <code>cancelExpirationRenewal</code> 都是 <code>protected</code> 修饰符修饰。可以建立 <code>RedissonBaseLock</code> 的包装类，在获取锁和释放锁的时候对 leaseTime 设置的续期补足即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>redisson</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>redisson<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RFuture</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>redisson<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RLock</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 分布式锁.&lt;br&gt;\n * 用装饰者模式给所有 lock 加上时间过期前的续期操作.&lt;br&gt;\n * redis 作为分布式锁方案一定会有弊端，比如出现哨兵模式的 redis 集群，就可能因为锁信息在主节点同步从节点时出现的主节点中断，导致从节点成为主节点之后\n * 无锁信息，导致的其他线程申请到锁，此时就会出现两个线程获取到同一把锁的 ganga 场景.&lt;br&gt;\n * 请注意合理使用锁，获取锁后一定在 finally 中释放锁，程序运行时间长之后一定会出现内存溢出问题.\n *\n * @author liulili\n * @since 20243-01-19\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewalLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RLock</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RedissonBaseLock</span> lock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RenewalLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RLock</span> lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RenewalLock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock 本就是续期锁，不需要二次装饰！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RedissonBaseLock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RedissonBaseLock</span><span class=\"token punctuation\">)</span> lock<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分布式锁续期的功能至少是 RedissonBaseLock 的实例，到 redisson 3.18.0 版本，RedissonMultiLock 是不能被 DistributedLock 装饰的！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"renewal_\"</span> <span class=\"token operator\">+</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token class-name\">RedissonBaseLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"internalLockLeaseTime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            field<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RedissonBaseLock 类没有 internalLockLeaseTime 属性，请注意版本\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> getLockSuccess <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getLockSuccess <span class=\"token operator\">&amp;&amp;</span> leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> getLockSuccess<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">forceUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">forceUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldByThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldByThread</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">remainTimeToLive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">remainTimeToLive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 还是默认的超时时间</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">forceUnlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> unlockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">forceUnlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unlockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> unlockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> unlockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unlockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> unlockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> unlockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unlockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> unlockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">&gt;</span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">&gt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getHoldCountAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getHoldCountAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">isLockedAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isLockedAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">remainTimeToLiveAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">remainTimeToLiveAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有三个注意点：首先，这个装饰类需要放在 <code>org.redisson</code> 只有这样才能使用 <code>proteced void scheduleExpirationRenewal()</code> 和 <code>protected void cancelExpirationRenewal()</code> 方法。其次，续期依旧是按照 <code>internalLockLeaseTime</code> /3 间隔触发，但因为是申请锁完结之后的续期，所以此时的 <code>internalLockLeaseTime</code> 为第一次申请锁的 <code>leaseTime</code> 。第三，因 Redisson 版本不一样，可能不会有 RedissonBaseLock 基类，你可以升级版本后使用装饰类。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Redis-分布式锁你续期了吗？\"><a href=\"#Redis-分布式锁你续期了吗？\" class=\"headerlink\" title=\"Redis 分布式锁你续期了吗？\"></a>Redis 分布式锁你续期了吗？</h2><p>服务在集群情况下，线程锁是无法满足服务之间逻辑隔离。分布式锁概念应运而生，它需要具备互斥性、防止死锁、高可用性、可重入性、唯一标识的特点。</p>\n<ul>\n<li><p>互斥性：任意时刻，只能有一个服务才能获取锁。</p>\n</li>\n<li><p>防止死锁：分布式锁应该在服务逻辑运行异常或崩溃时能够自动释放。一般的做法是给锁设定超时时间避免死锁。</p>\n</li>\n<li><p>高可用性：确保锁提供方节点故障时也能正常工作，确保锁的可靠性。</p>\n</li>\n<li><p>可重入性：允许同一个线程或服务在持有锁的情况下多次获取同一个锁，而不会出现死锁或阻塞。</p>\n</li>\n<li><p>唯一标识：分布式锁应该具备唯一的标识。</p>\n</li>\n</ul>\n<p>分布式锁方案大体有几种，使用基于唯一索引的数据库表、zookeeper/etcd、redis。为达到分布式锁的互斥性和防止死锁这两个特性，方案是设定超时时间配合<strong>定时续期</strong>以达到目的。如果你用 Redis 实现分布式锁，请问你项目中 Redis 分布式锁有<strong>定时续期</strong>吗？</p>\n<p>Jedis 主要包含数据结构操作和队列 PUB/SUB 操作。Redisson 组件除此之外还包含分布式锁的实现。Redisson 关于获取锁有六种方式，<code>lock()</code> 、<code>tryLock()</code>、<code>lockInterruptibly()</code> 、<code>tryLock(long waitTime, TimeUnit unit)</code>、 <code>lock(long leaseTime, TimeUnit unit)</code> 、<code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code>。区分点在于 是否等待获取锁、等待获取锁时长，是否有过期、过期时间。好像没有看到续期相关的内容。</p>\n<h4 id=\"mag-续期藏在细节里\"><a href=\"#mag-续期藏在细节里\" class=\"headerlink\" title=\":mag: 续期藏在细节里\"></a>:mag: 续期藏在细节里</h4><p>就像老夫老妻一样，:heart: 爱是藏在细节里，续期藏在锁获取的细节里。</p>\n<blockquote>\n<p>:vertical_traffic_light: 代码是以 redisson-3.18.0 版本为例，估计总体思路差不多。</p>\n</blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// RedissonLock</span>\n<span class=\"token keyword\">private</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tryAcquireAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> ttlRemainingFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ttlRemainingFuture <span class=\"token operator\">=</span> <span class=\"token function\">tryLockInnerAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCommands</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVAL_LONG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        ttlRemainingFuture <span class=\"token operator\">=</span> <span class=\"token function\">tryLockInnerAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> internalLockLeaseTime<span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisCommands</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EVAL_LONG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">CompletionStage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> f <span class=\"token operator\">=</span> ttlRemainingFuture<span class=\"token punctuation\">.</span><span class=\"token function\">thenApply</span><span class=\"token punctuation\">(</span>ttlRemaining <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// lock acquired</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttlRemaining <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                internalLockLeaseTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toMillis</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ttlRemaining<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompletableFutureWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>   <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>首先，没有设置过期时间时，redisson 会使用 <code>internalLockLeaseTime</code> （它指 lock 内置过期时间，lock 对象初始化时从配置类 <code>org.redisson.config.Config#lockWatchdogTimeout</code> 中获取，默认 30 s）作为过期时间来申请分布式锁。第一次申请锁成功后 <code>ttlRemainingFuture.thenApply</code> ，如果自定义过期时间有值，则重新设置 <code>internalLockLeaseTime</code>。没有设置的话，则需要定时续期，保证锁能被本线程一直持有。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// RedissonBaseLock</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ExpirationEntry</span> entry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExpirationEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ExpirationEntry</span> oldEntry <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldEntry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 可重入位置，因为不存在获取锁之后，同一线程的并发问题，所以这里使用 LinkedHashMap</span>\n        oldEntry<span class=\"token punctuation\">.</span><span class=\"token function\">addThreadId</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        entry<span class=\"token punctuation\">.</span><span class=\"token function\">addThreadId</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">ExpirationEntry</span> ee <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ee <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token class-name\">Timeout</span> task <span class=\"token operator\">=</span> commandExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">getConnectionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TimerTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Timeout</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">ExpirationEntry</span> ent <span class=\"token operator\">=</span> <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">Long</span> threadId <span class=\"token operator\">=</span> ent<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token class-name\">CompletionStage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> <span class=\"token function\">renewExpirationAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            future<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't update lock \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getRawName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" expiration\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token constant\">EXPIRATION_RENEWAL_MAP</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token function\">getEntryName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// reschedule itself</span>\n                    <span class=\"token function\">renewExpiration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> internalLockLeaseTime <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ee<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>简单概括，就是未设置过期时间的分布式锁，是以 30s 过期时间先获取分布式锁，程序中使用时间片方式在每 10s (30s * 1/3) 续期。设置过期时间的分布式锁反而不能享受续期。</strong></p>\n<p>:sweat_smile: 本来大家在实战过程中，就是怕锁不释放，基本上都会被建议使用 <code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> ，结果只有这种设置 leaseTime 的获取锁没有续期。多少有点被背 (feng) 刺 (ci) :bee:。我们需要解决这个问（feng）题（ci），希望在 leaseTime 设置时，也能享受续期功效。</p>\n<h4 id=\"balance-scale-超时与续期兼得\"><a href=\"#balance-scale-超时与续期兼得\" class=\"headerlink\" title=\":balance_scale: 超时与续期兼得\"></a>:balance_scale: 超时与续期兼得</h4><p>好在 <code>RedissonBaseLock</code> 中关于续期的方法 <code>scheduleExpirationRenewal</code> 和 <code>cancelExpirationRenewal</code> 都是 <code>protected</code> 修饰符修饰。可以建立 <code>RedissonBaseLock</code> 的包装类，在获取锁和释放锁的时候对 leaseTime 设置的续期补足即可。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>redisson</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>redisson<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RFuture</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>redisson<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RLock</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 分布式锁.&lt;br>\n * 用装饰者模式给所有 lock 加上时间过期前的续期操作.&lt;br>\n * redis 作为分布式锁方案一定会有弊端，比如出现哨兵模式的 redis 集群，就可能因为锁信息在主节点同步从节点时出现的主节点中断，导致从节点成为主节点之后\n * 无锁信息，导致的其他线程申请到锁，此时就会出现两个线程获取到同一把锁的 ganga 场景.&lt;br>\n * 请注意合理使用锁，获取锁后一定在 finally 中释放锁，程序运行时间长之后一定会出现内存溢出问题.\n *\n * @author liulili\n * @since 20243-01-19\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RenewalLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RLock</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RedissonBaseLock</span> lock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RenewalLock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RLock</span> lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RenewalLock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lock 本就是续期锁，不需要二次装饰！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RedissonBaseLock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lock <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RedissonBaseLock</span><span class=\"token punctuation\">)</span> lock<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"分布式锁续期的功能至少是 RedissonBaseLock 的实例，到 redisson 3.18.0 版本，RedissonMultiLock 是不能被 DistributedLock 装饰的！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"renewal_\"</span> <span class=\"token operator\">+</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> <span class=\"token class-name\">RedissonBaseLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"internalLockLeaseTime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            field<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            field<span class=\"token punctuation\">.</span><span class=\"token function\">setLong</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RedissonBaseLock 类没有 internalLockLeaseTime 属性，请注意版本\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">boolean</span> getLockSuccess <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getLockSuccess <span class=\"token operator\">&amp;&amp;</span> leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> getLockSuccess<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">forceUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">forceUnlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldByThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldByThread</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isHeldByCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getHoldCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">remainTimeToLive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">remainTimeToLive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// 还是默认的超时时间</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">forceUnlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> unlockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">forceUnlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unlockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> unlockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> unlockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unlockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> unlockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> unlockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlockAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unlockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelExpirationRenewal</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> unlockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockAsync</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> waitTime<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> leaseTime<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> threadId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> lockFuture <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLockAsync</span><span class=\"token punctuation\">(</span>waitTime<span class=\"token punctuation\">,</span> leaseTime<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        lockFuture<span class=\"token punctuation\">.</span><span class=\"token function\">whenComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>unlockStatus<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">nonNull</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leaseTime <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scheduleExpirationRenewal</span><span class=\"token punctuation\">(</span>leaseTime<span class=\"token punctuation\">,</span> threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> lockFuture<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getHoldCountAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">getHoldCountAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">isLockedAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">isLockedAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">remainTimeToLiveAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">remainTimeToLiveAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>有三个注意点：首先，这个装饰类需要放在 <code>org.redisson</code> 只有这样才能使用 <code>proteced void scheduleExpirationRenewal()</code> 和 <code>protected void cancelExpirationRenewal()</code> 方法。其次，续期依旧是按照 <code>internalLockLeaseTime</code> /3 间隔触发，但因为是申请锁完结之后的续期，所以此时的 <code>internalLockLeaseTime</code> 为第一次申请锁的 <code>leaseTime</code> 。第三，因 Redisson 版本不一样，可能不会有 RedissonBaseLock 基类，你可以升级版本后使用装饰类。</p>\n"},{"title":"A4 图纸上绘画\"定高\"表格","date":"2024-03-04T12:20:04.000Z","_content":"\nA4 图纸上绘画定高表格。首先是表格内容数据组装和表格内容数据替换。表格内容数据替换有几种实现方式。一种，借助 html 绘制 table 模板，使用 thymeleaf 做元素替换。一种，借助 word 和 书签绘制模板，使用 poi 完成书签替换。一种，使用 word 绘制 ftl 模板，使用 freemarker 完成元素替换。以上几种的表格内容数据替换方案，相对来说 html 模板和 ftl 模板是有比较好的延展性。\n\n至于表格内容数据组装，按照业务组装即可。最近有这种“定高”表格需求，故而在此分享。按两分列展示表格内容，每个分列占用 3 列，总共一行 6 列展示两个业务数据。\n\n![A1.jpg](images/2024/a4_table_dinggao/A41.jpg)\n\n![A2.jpg](images/2024/a4_table_dinggao/4A2.jpg)\n\n### 需求点识别\n\n1. 要求在固定高度下尽可能展示的行数。\n\n2. 要求序号和页次不可换行，且跨页对齐。\n\n3. 要求单页内元素不够的用空行占据。\n\n4. 序号单页内左侧从n~m，序号单页内右侧从 m+1~2m。\n\n### 设计及实现\n\n#### NO1，设计使用 html 模板\n\n使用 html 模板 + thymeleaf 替换 `th:` 类标签。使用 html  模板是因为可以通过 css 调整样式，并且能够按定制需求完成分页。\n\n其中， A4 对应像素 `794px * 1123px` ，表格的宽高设置为 A4 的 85%，即 `675px * 955px` 。设置表头内容无颜色居中。\n\n```html\n<div style=\"width:794px;height:1123px\">\n    <table class=\"table-bordered table\">\n        <tr>\n            <td colspan=\"6\" style=\"font-size: 25px; border-style: none;\">表头描述</td>\n        </tr>\n    </table>\n</div>\n```\n\n```css\n    * {\n            font-family: SimHei;\n            font-size: 18px;\n            text-align: center;\n        }\n\n.table {\n            width: 85%;\n            border-collapse: collapse !important;\n            margin: auto auto;\n        }\n.table th,\n.table td {\n            height: 35px;\n            padding: 0.35rem;\n        }\n .table-bordered th,\n .table-bordered td {\n            border: 1px solid #000000;\n        }\n```\n\n#### NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\n\n序号和页次高度只有一行，千万不要换行。内容会因为单元格内容长短可能存在换行。因为表格宽度为 675px，内容宽度 = 675 - 序号宽度 - 页次宽度。还有，半角字符占用 10 px，全角字符占用 18px。其中英文相关字符为半角字符，中文相关字符为全角字符。序号和页次使用阿拉伯数字表示，为半角字符。所以，序号和页次占用宽度为 长度 * 10px。序号的最大长度为元素组 size 长度，页次的最大长度为元素组最后一个的页次长度，序号和页次的高度为 `.table td` 样式高度 35 px。\n\n```java\nList<MuluTreeNode> nonEmptyMulus = muluJiegouParam.getNonEmptyMulus();\nint muluNum = nonEmptyMulus.size();\n// 序号宽度\nint xhWidth = 10 * Objects.toString(muluNum).length();\n// 页次宽度\nMuluTreeNode lastMuluTreeNode = nonEmptyMulus.get(muluNum - 1);\nString lastPageInfo = lastMuluTreeNode.getPageInfo();\nint yeciWidth = 10 * lastPageInfo.length();\n```\n\n内容高度，则是对单元格内容每个字符使用正则表达式 `[\\x00-\\xff]` 判断是否半角字符累计宽度，宽度不可大于内容定宽，循环累计几次后确定行数 lines。如果 lines 为单行则高度为 35 px，如果 lines 为 2+ 行则高度为 `21px * lines`。\n\n```java\nint tempContentWidthPx = contentWidthPx;\nString content = muluJiegouItem.getContent();\nint length = content.length();\nPattern pattern = Pattern.compile(\"[\\\\x00-\\\\xff]\");\nint line = 0;\nfor (int index = 0; index < length;) {\n    String contentIdx = StringUtils.substring(content, index, ++index);\n    Matcher matcher = pattern.matcher(contentIdx);\n    int itemWidthPx = matcher.find() ? HALF_WIDTH_CHAR_PX : FULL_WIDTH_CHAR_PX;\n    int nextContentWidthPx = tempContentWidthPx - itemWidthPx;\n    if (nextContentWidthPx > 0) {\n        tempContentWidthPx = nextContentWidthPx;\n    } else {\n        line++;\n        tempContentWidthPx = contentWidthPx - itemWidthPx;\n    }\n}\n++line;\n// 其中 35 为单行高度像素，21 * line 为多行高度像素，14 为 padding-top + padding-bottom\nint heightPx = (line == 1 ? 35 : 21 * line) + 14;\n```\n\n#### NO3，确定左侧能装载元素长度，索引位（0~length-1）\n\n以单页定高 820 px 为上限，按照每个元素内容高度看单页左侧最多能装下多少元素。但是，元素集合高度总和小于 820 px时，需要用空行补充，至于多少个则是用 高度差值px/49px，其中 49px =  35px + 7px + 7px。\n\n```java\nprivate int confirmPageLeftLength(List<Integer> muluJiegouItemHeights) {\n        int height = PAGE_CONTENT_HEIGHT;\n        int pageLength = -1;\n        int length = muluJiegouItemHeights.size();\n        for(int index = 0; index < length; index++) {\n            int tempHeight = height - muluJiegouItemHeights.get(index);\n            if (tempHeight < 0) {\n                break;\n            }\n            pageLength = index + 1;\n            height = tempHeight;\n        }\n        if (pageLength == length && height > 0) {\n            pageLength += height/49;\n        }\n        return pageLength;\n    }\n```\n\n#### NO4，确定右侧能装载元素范围\n\n最多能装载的元素为 **NO3** 左侧 length，索引为 `length ~ 2*length-1` 。但前提是右侧索引范围元素高度之和必须**小于**单页定高。对于 `2*length` 小于元素集合长度，需要用空单行填充元素集合（当然得先拷贝集合，否则会影响元素集合）。对于右侧索引范围元素高度之和大于单页定高，需要减少右侧元素的起止位置 `length-1 ~ 2*length-3`，也就是向前挪动 2 个元素（即单行元素）。而右侧索引范围元素高度，每个元素高度需要取左内容高度和右内容高度最大值，原因很简单总不能左侧和右侧不一样，那样会 “大小眼”。\n\n最终，确认的右侧能填充的元素长度 final_length，那单页的元素长度为 `2*final_length` 索引位 `0 ~ 2*final_length - 1` 。\n\n```java\nprivate int confirmPageRightLength(List<Integer> muluJiegouItemHeights, int leftPageLength) {\n        int length = muluJiegouItemHeights.size();\n        if (leftPageLength >= length) {\n            return leftPageLength;\n        }\n        int pageLength = 2 * leftPageLength;\n        List<Integer> copyedHeights = new ArrayList<>(muluJiegouItemHeights);\n        if (pageLength > length) {\n            copyedHeights.addAll(IntStream.range(length, pageLength).boxed().map(num -> SINGLE_ROW_OFFSETHEIGHT_PX).collect(Collectors.toList()));\n        }\n        // 这段要改\n        int finalLeftPageLength = leftPageLength;\n        int height = IntStream.range(leftPageLength, pageLength)\n                .map(index -> Integer.max(copyedHeights.get(index), copyedHeights.get(index - finalLeftPageLength))).sum();\n        while(height > PAGE_CONTENT_HEIGHT) {\n            leftPageLength--;\n            pageLength = 2 * leftPageLength;\n            int finalLeftPageLength2 = leftPageLength;\n            height = IntStream.range(leftPageLength, pageLength)\n                    .map(index -> Integer.max(copyedHeights.get(index), copyedHeights.get(index - finalLeftPageLength2))).sum();\n        }\n        return leftPageLength;\n    }\n```\n\n#### NO5，依据 NO4 提供的 final_length 组装单页表格元素\n\n到这里就没什么好说的就是组装左元素和右元素，到这里就相当简单啦，但是要记得删除已经处理过的元素，否则计算下一页的时候还要做索引偏移。哈哈，要说再见了。\n\n```java\nprivate List<MuluJiegouLineItem> buildMuluJiegouPage(List<Integer> muluJiegouItemHeights, List<MuluJiegouItem> muluJiegouItemList) {\n        int pageLength = this.confirmPageLength(muluJiegouItemHeights);\n        int removePageLength = pageLength;\n        int length = muluJiegouItemHeights.size();\n        if (pageLength >= length) {\n            removePageLength = length;\n        }\n        List<MuluJiegouLineItem> page = IntStream.range(0, pageLength / 2).boxed().map(index -> {\n            MuluJiegouItem left = getItem(index, muluJiegouItemList);\n            MuluJiegouItem right = getItem(index + pageLength/2, muluJiegouItemList);\n            return MuluJiegouLineItem.builder().left(left).right(right).build();\n        }).collect(Collectors.toList());\n        Iterator<Integer> muluJiegouItemHeightIter = muluJiegouItemHeights.iterator();\n        Iterator<MuluJiegouItem> muluJiegouItemIter = muluJiegouItemList.iterator();\n        IntStream.range(0, removePageLength).filter(index -> index <length).forEach(index -> {\n            muluJiegouItemIter.next();\n            muluJiegouItemIter.remove();\n            muluJiegouItemHeightIter.next();\n            muluJiegouItemHeightIter.remove();\n        });\n        return page;\n    }\n```\n\n#### NO6，倒序描述的最后\n\n倒序描述的最后是方法的入口，所以要测试的话，顺序得是 `NO1 => NO2 => NO6 => NO5 => NO3 => NO4`。\n\n```java\nprivate void buildMuluJiegouPages(MuluJiegouItems muluJiegouItems, List<MuluTreeNode> nonEmptyMulus) {\n        int widthPx = muluJiegouItems.getContentWidth();\n        List<MuluJiegouItem> muluJiegouItemList = this.convert(nonEmptyMulus, widthPx);\n        List<Integer> muluJiegouItemHeights = muluJiegouItemList.stream().map(MuluJiegouItem::getHeightPx).collect(Collectors.toList());\n        List<List<MuluJiegouLineItem>> pages = new ArrayList<>();\n        while(CollectionUtils.isNotEmpty(muluJiegouItemHeights)) {\n            pages.add(buildMuluJiegouPage(muluJiegouItemHeights, muluJiegouItemList));\n        }\n        muluJiegouItems.setPages(pages);\n    }\n```\n\n","source":"_posts/A4-图纸上绘画-定高-表格.md","raw":"---\ntitle: A4 图纸上绘画\"定高\"表格\ndate: 2024-03-04 20:20:04\ncategories:\n- code\ntags:\n- java\n- A4\n- 分页\n- 定高\n---\n\nA4 图纸上绘画定高表格。首先是表格内容数据组装和表格内容数据替换。表格内容数据替换有几种实现方式。一种，借助 html 绘制 table 模板，使用 thymeleaf 做元素替换。一种，借助 word 和 书签绘制模板，使用 poi 完成书签替换。一种，使用 word 绘制 ftl 模板，使用 freemarker 完成元素替换。以上几种的表格内容数据替换方案，相对来说 html 模板和 ftl 模板是有比较好的延展性。\n\n至于表格内容数据组装，按照业务组装即可。最近有这种“定高”表格需求，故而在此分享。按两分列展示表格内容，每个分列占用 3 列，总共一行 6 列展示两个业务数据。\n\n![A1.jpg](images/2024/a4_table_dinggao/A41.jpg)\n\n![A2.jpg](images/2024/a4_table_dinggao/4A2.jpg)\n\n### 需求点识别\n\n1. 要求在固定高度下尽可能展示的行数。\n\n2. 要求序号和页次不可换行，且跨页对齐。\n\n3. 要求单页内元素不够的用空行占据。\n\n4. 序号单页内左侧从n~m，序号单页内右侧从 m+1~2m。\n\n### 设计及实现\n\n#### NO1，设计使用 html 模板\n\n使用 html 模板 + thymeleaf 替换 `th:` 类标签。使用 html  模板是因为可以通过 css 调整样式，并且能够按定制需求完成分页。\n\n其中， A4 对应像素 `794px * 1123px` ，表格的宽高设置为 A4 的 85%，即 `675px * 955px` 。设置表头内容无颜色居中。\n\n```html\n<div style=\"width:794px;height:1123px\">\n    <table class=\"table-bordered table\">\n        <tr>\n            <td colspan=\"6\" style=\"font-size: 25px; border-style: none;\">表头描述</td>\n        </tr>\n    </table>\n</div>\n```\n\n```css\n    * {\n            font-family: SimHei;\n            font-size: 18px;\n            text-align: center;\n        }\n\n.table {\n            width: 85%;\n            border-collapse: collapse !important;\n            margin: auto auto;\n        }\n.table th,\n.table td {\n            height: 35px;\n            padding: 0.35rem;\n        }\n .table-bordered th,\n .table-bordered td {\n            border: 1px solid #000000;\n        }\n```\n\n#### NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\n\n序号和页次高度只有一行，千万不要换行。内容会因为单元格内容长短可能存在换行。因为表格宽度为 675px，内容宽度 = 675 - 序号宽度 - 页次宽度。还有，半角字符占用 10 px，全角字符占用 18px。其中英文相关字符为半角字符，中文相关字符为全角字符。序号和页次使用阿拉伯数字表示，为半角字符。所以，序号和页次占用宽度为 长度 * 10px。序号的最大长度为元素组 size 长度，页次的最大长度为元素组最后一个的页次长度，序号和页次的高度为 `.table td` 样式高度 35 px。\n\n```java\nList<MuluTreeNode> nonEmptyMulus = muluJiegouParam.getNonEmptyMulus();\nint muluNum = nonEmptyMulus.size();\n// 序号宽度\nint xhWidth = 10 * Objects.toString(muluNum).length();\n// 页次宽度\nMuluTreeNode lastMuluTreeNode = nonEmptyMulus.get(muluNum - 1);\nString lastPageInfo = lastMuluTreeNode.getPageInfo();\nint yeciWidth = 10 * lastPageInfo.length();\n```\n\n内容高度，则是对单元格内容每个字符使用正则表达式 `[\\x00-\\xff]` 判断是否半角字符累计宽度，宽度不可大于内容定宽，循环累计几次后确定行数 lines。如果 lines 为单行则高度为 35 px，如果 lines 为 2+ 行则高度为 `21px * lines`。\n\n```java\nint tempContentWidthPx = contentWidthPx;\nString content = muluJiegouItem.getContent();\nint length = content.length();\nPattern pattern = Pattern.compile(\"[\\\\x00-\\\\xff]\");\nint line = 0;\nfor (int index = 0; index < length;) {\n    String contentIdx = StringUtils.substring(content, index, ++index);\n    Matcher matcher = pattern.matcher(contentIdx);\n    int itemWidthPx = matcher.find() ? HALF_WIDTH_CHAR_PX : FULL_WIDTH_CHAR_PX;\n    int nextContentWidthPx = tempContentWidthPx - itemWidthPx;\n    if (nextContentWidthPx > 0) {\n        tempContentWidthPx = nextContentWidthPx;\n    } else {\n        line++;\n        tempContentWidthPx = contentWidthPx - itemWidthPx;\n    }\n}\n++line;\n// 其中 35 为单行高度像素，21 * line 为多行高度像素，14 为 padding-top + padding-bottom\nint heightPx = (line == 1 ? 35 : 21 * line) + 14;\n```\n\n#### NO3，确定左侧能装载元素长度，索引位（0~length-1）\n\n以单页定高 820 px 为上限，按照每个元素内容高度看单页左侧最多能装下多少元素。但是，元素集合高度总和小于 820 px时，需要用空行补充，至于多少个则是用 高度差值px/49px，其中 49px =  35px + 7px + 7px。\n\n```java\nprivate int confirmPageLeftLength(List<Integer> muluJiegouItemHeights) {\n        int height = PAGE_CONTENT_HEIGHT;\n        int pageLength = -1;\n        int length = muluJiegouItemHeights.size();\n        for(int index = 0; index < length; index++) {\n            int tempHeight = height - muluJiegouItemHeights.get(index);\n            if (tempHeight < 0) {\n                break;\n            }\n            pageLength = index + 1;\n            height = tempHeight;\n        }\n        if (pageLength == length && height > 0) {\n            pageLength += height/49;\n        }\n        return pageLength;\n    }\n```\n\n#### NO4，确定右侧能装载元素范围\n\n最多能装载的元素为 **NO3** 左侧 length，索引为 `length ~ 2*length-1` 。但前提是右侧索引范围元素高度之和必须**小于**单页定高。对于 `2*length` 小于元素集合长度，需要用空单行填充元素集合（当然得先拷贝集合，否则会影响元素集合）。对于右侧索引范围元素高度之和大于单页定高，需要减少右侧元素的起止位置 `length-1 ~ 2*length-3`，也就是向前挪动 2 个元素（即单行元素）。而右侧索引范围元素高度，每个元素高度需要取左内容高度和右内容高度最大值，原因很简单总不能左侧和右侧不一样，那样会 “大小眼”。\n\n最终，确认的右侧能填充的元素长度 final_length，那单页的元素长度为 `2*final_length` 索引位 `0 ~ 2*final_length - 1` 。\n\n```java\nprivate int confirmPageRightLength(List<Integer> muluJiegouItemHeights, int leftPageLength) {\n        int length = muluJiegouItemHeights.size();\n        if (leftPageLength >= length) {\n            return leftPageLength;\n        }\n        int pageLength = 2 * leftPageLength;\n        List<Integer> copyedHeights = new ArrayList<>(muluJiegouItemHeights);\n        if (pageLength > length) {\n            copyedHeights.addAll(IntStream.range(length, pageLength).boxed().map(num -> SINGLE_ROW_OFFSETHEIGHT_PX).collect(Collectors.toList()));\n        }\n        // 这段要改\n        int finalLeftPageLength = leftPageLength;\n        int height = IntStream.range(leftPageLength, pageLength)\n                .map(index -> Integer.max(copyedHeights.get(index), copyedHeights.get(index - finalLeftPageLength))).sum();\n        while(height > PAGE_CONTENT_HEIGHT) {\n            leftPageLength--;\n            pageLength = 2 * leftPageLength;\n            int finalLeftPageLength2 = leftPageLength;\n            height = IntStream.range(leftPageLength, pageLength)\n                    .map(index -> Integer.max(copyedHeights.get(index), copyedHeights.get(index - finalLeftPageLength2))).sum();\n        }\n        return leftPageLength;\n    }\n```\n\n#### NO5，依据 NO4 提供的 final_length 组装单页表格元素\n\n到这里就没什么好说的就是组装左元素和右元素，到这里就相当简单啦，但是要记得删除已经处理过的元素，否则计算下一页的时候还要做索引偏移。哈哈，要说再见了。\n\n```java\nprivate List<MuluJiegouLineItem> buildMuluJiegouPage(List<Integer> muluJiegouItemHeights, List<MuluJiegouItem> muluJiegouItemList) {\n        int pageLength = this.confirmPageLength(muluJiegouItemHeights);\n        int removePageLength = pageLength;\n        int length = muluJiegouItemHeights.size();\n        if (pageLength >= length) {\n            removePageLength = length;\n        }\n        List<MuluJiegouLineItem> page = IntStream.range(0, pageLength / 2).boxed().map(index -> {\n            MuluJiegouItem left = getItem(index, muluJiegouItemList);\n            MuluJiegouItem right = getItem(index + pageLength/2, muluJiegouItemList);\n            return MuluJiegouLineItem.builder().left(left).right(right).build();\n        }).collect(Collectors.toList());\n        Iterator<Integer> muluJiegouItemHeightIter = muluJiegouItemHeights.iterator();\n        Iterator<MuluJiegouItem> muluJiegouItemIter = muluJiegouItemList.iterator();\n        IntStream.range(0, removePageLength).filter(index -> index <length).forEach(index -> {\n            muluJiegouItemIter.next();\n            muluJiegouItemIter.remove();\n            muluJiegouItemHeightIter.next();\n            muluJiegouItemHeightIter.remove();\n        });\n        return page;\n    }\n```\n\n#### NO6，倒序描述的最后\n\n倒序描述的最后是方法的入口，所以要测试的话，顺序得是 `NO1 => NO2 => NO6 => NO5 => NO3 => NO4`。\n\n```java\nprivate void buildMuluJiegouPages(MuluJiegouItems muluJiegouItems, List<MuluTreeNode> nonEmptyMulus) {\n        int widthPx = muluJiegouItems.getContentWidth();\n        List<MuluJiegouItem> muluJiegouItemList = this.convert(nonEmptyMulus, widthPx);\n        List<Integer> muluJiegouItemHeights = muluJiegouItemList.stream().map(MuluJiegouItem::getHeightPx).collect(Collectors.toList());\n        List<List<MuluJiegouLineItem>> pages = new ArrayList<>();\n        while(CollectionUtils.isNotEmpty(muluJiegouItemHeights)) {\n            pages.add(buildMuluJiegouPage(muluJiegouItemHeights, muluJiegouItemList));\n        }\n        muluJiegouItems.setPages(pages);\n    }\n```\n\n","slug":"A4-图纸上绘画-定高-表格","published":1,"updated":"2024-03-04T12:23:33.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clu285vly00004tc01dsr165f","content":"<p>A4 图纸上绘画定高表格。首先是表格内容数据组装和表格内容数据替换。表格内容数据替换有几种实现方式。一种，借助 html 绘制 table 模板，使用 thymeleaf 做元素替换。一种，借助 word 和 书签绘制模板，使用 poi 完成书签替换。一种，使用 word 绘制 ftl 模板，使用 freemarker 完成元素替换。以上几种的表格内容数据替换方案，相对来说 html 模板和 ftl 模板是有比较好的延展性。</p>\n<p>至于表格内容数据组装，按照业务组装即可。最近有这种“定高”表格需求，故而在此分享。按两分列展示表格内容，每个分列占用 3 列，总共一行 6 列展示两个业务数据。</p>\n<p><img src=\"/images/2024/a4_table_dinggao/A41.jpg\" alt=\"A1.jpg\"></p>\n<p><img src=\"/images/2024/a4_table_dinggao/4A2.jpg\" alt=\"A2.jpg\"></p>\n<h3 id=\"需求点识别\"><a href=\"#需求点识别\" class=\"headerlink\" title=\"需求点识别\"></a>需求点识别</h3><ol>\n<li><p>要求在固定高度下尽可能展示的行数。</p>\n</li>\n<li><p>要求序号和页次不可换行，且跨页对齐。</p>\n</li>\n<li><p>要求单页内元素不够的用空行占据。</p>\n</li>\n<li><p>序号单页内左侧从n<del>m，序号单页内右侧从 m+1</del>2m。</p>\n</li>\n</ol>\n<h3 id=\"设计及实现\"><a href=\"#设计及实现\" class=\"headerlink\" title=\"设计及实现\"></a>设计及实现</h3><h4 id=\"NO1，设计使用-html-模板\"><a href=\"#NO1，设计使用-html-模板\" class=\"headerlink\" title=\"NO1，设计使用 html 模板\"></a>NO1，设计使用 html 模板</h4><p>使用 html 模板 + thymeleaf 替换 <code>th:</code> 类标签。使用 html  模板是因为可以通过 css 调整样式，并且能够按定制需求完成分页。</p>\n<p>其中， A4 对应像素 <code>794px * 1123px</code> ，表格的宽高设置为 A4 的 85%，即 <code>675px * 955px</code> 。设置表头内容无颜色居中。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>794px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>1123px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>table-bordered table<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">colspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span> <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span>表头描述<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    <span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> SimHei<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.table</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 85%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-collapse</span><span class=\"token punctuation\">:</span> collapse <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto auto<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.table th,\n.table td</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 35px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.35rem<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n <span class=\"token selector\">.table-bordered th,\n .table-bordered td</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #000000<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\"><a href=\"#NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\" class=\"headerlink\" title=\"NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\"></a>NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度</h4><p>序号和页次高度只有一行，千万不要换行。内容会因为单元格内容长短可能存在换行。因为表格宽度为 675px，内容宽度 = 675 - 序号宽度 - 页次宽度。还有，半角字符占用 10 px，全角字符占用 18px。其中英文相关字符为半角字符，中文相关字符为全角字符。序号和页次使用阿拉伯数字表示，为半角字符。所以，序号和页次占用宽度为 长度 * 10px。序号的最大长度为元素组 size 长度，页次的最大长度为元素组最后一个的页次长度，序号和页次的高度为 <code>.table td</code> 样式高度 35 px。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluTreeNode</span><span class=\"token punctuation\">&gt;</span></span> nonEmptyMulus <span class=\"token operator\">=</span> muluJiegouParam<span class=\"token punctuation\">.</span><span class=\"token function\">getNonEmptyMulus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> muluNum <span class=\"token operator\">=</span> nonEmptyMulus<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 序号宽度</span>\n<span class=\"token keyword\">int</span> xhWidth <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>muluNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 页次宽度</span>\n<span class=\"token class-name\">MuluTreeNode</span> lastMuluTreeNode <span class=\"token operator\">=</span> nonEmptyMulus<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>muluNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> lastPageInfo <span class=\"token operator\">=</span> lastMuluTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">getPageInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> yeciWidth <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> lastPageInfo<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>内容高度，则是对单元格内容每个字符使用正则表达式 <code>[\\x00-\\xff]</code> 判断是否半角字符累计宽度，宽度不可大于内容定宽，循环累计几次后确定行数 lines。如果 lines 为单行则高度为 35 px，如果 lines 为 2+ 行则高度为 <code>21px * lines</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> tempContentWidthPx <span class=\"token operator\">=</span> contentWidthPx<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> muluJiegouItem<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Pattern</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\\\\x00-\\\\xff]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> contentIdx <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Matcher</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>contentIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> itemWidthPx <span class=\"token operator\">=</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">HALF_WIDTH_CHAR_PX</span> <span class=\"token operator\">:</span> <span class=\"token constant\">FULL_WIDTH_CHAR_PX</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> nextContentWidthPx <span class=\"token operator\">=</span> tempContentWidthPx <span class=\"token operator\">-</span> itemWidthPx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextContentWidthPx <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        tempContentWidthPx <span class=\"token operator\">=</span> nextContentWidthPx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        line<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        tempContentWidthPx <span class=\"token operator\">=</span> contentWidthPx <span class=\"token operator\">-</span> itemWidthPx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">++</span>line<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 其中 35 为单行高度像素，21 * line 为多行高度像素，14 为 padding-top + padding-bottom</span>\n<span class=\"token keyword\">int</span> heightPx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">35</span> <span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token operator\">*</span> line<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO3，确定左侧能装载元素长度，索引位（0-length-1）\"><a href=\"#NO3，确定左侧能装载元素长度，索引位（0-length-1）\" class=\"headerlink\" title=\"NO3，确定左侧能装载元素长度，索引位（0~length-1）\"></a>NO3，确定左侧能装载元素长度，索引位（0~length-1）</h4><p>以单页定高 820 px 为上限，按照每个元素内容高度看单页左侧最多能装下多少元素。但是，元素集合高度总和小于 820 px时，需要用空行补充，至于多少个则是用 高度差值px/49px，其中 49px =  35px + 7px + 7px。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">confirmPageLeftLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemHeights<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token constant\">PAGE_CONTENT_HEIGHT</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pageLength <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> tempHeight <span class=\"token operator\">=</span> height <span class=\"token operator\">-</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tempHeight <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            pageLength <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> tempHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageLength <span class=\"token operator\">==</span> length <span class=\"token operator\">&amp;&amp;</span> height <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pageLength <span class=\"token operator\">+=</span> height<span class=\"token operator\">/</span><span class=\"token number\">49</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> pageLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO4，确定右侧能装载元素范围\"><a href=\"#NO4，确定右侧能装载元素范围\" class=\"headerlink\" title=\"NO4，确定右侧能装载元素范围\"></a>NO4，确定右侧能装载元素范围</h4><p>最多能装载的元素为 <strong>NO3</strong> 左侧 length，索引为 <code>length ~ 2*length-1</code> 。但前提是右侧索引范围元素高度之和必须<strong>小于</strong>单页定高。对于 <code>2*length</code> 小于元素集合长度，需要用空单行填充元素集合（当然得先拷贝集合，否则会影响元素集合）。对于右侧索引范围元素高度之和大于单页定高，需要减少右侧元素的起止位置 <code>length-1 ~ 2*length-3</code>，也就是向前挪动 2 个元素（即单行元素）。而右侧索引范围元素高度，每个元素高度需要取左内容高度和右内容高度最大值，原因很简单总不能左侧和右侧不一样，那样会 “大小眼”。</p>\n<p>最终，确认的右侧能填充的元素长度 final_length，那单页的元素长度为 <code>2*final_length</code> 索引位 <code>0 ~ 2*final_length - 1</code> 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">confirmPageRightLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemHeights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> leftPageLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftPageLength <span class=\"token operator\">&gt;=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> leftPageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> pageLength <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> leftPageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> copyedHeights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageLength <span class=\"token operator\">&gt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> pageLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-&gt;</span> <span class=\"token constant\">SINGLE_ROW_OFFSETHEIGHT_PX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 这段要改</span>\n        <span class=\"token keyword\">int</span> finalLeftPageLength <span class=\"token operator\">=</span> leftPageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>leftPageLength<span class=\"token punctuation\">,</span> pageLength<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> finalLeftPageLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">&gt;</span> <span class=\"token constant\">PAGE_CONTENT_HEIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            leftPageLength<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            pageLength <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> leftPageLength<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> finalLeftPageLength2 <span class=\"token operator\">=</span> leftPageLength<span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>leftPageLength<span class=\"token punctuation\">,</span> pageLength<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> finalLeftPageLength2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> leftPageLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO5，依据-NO4-提供的-final-length-组装单页表格元素\"><a href=\"#NO5，依据-NO4-提供的-final-length-组装单页表格元素\" class=\"headerlink\" title=\"NO5，依据 NO4 提供的 final_length 组装单页表格元素\"></a>NO5，依据 NO4 提供的 final_length 组装单页表格元素</h4><p>到这里就没什么好说的就是组装左元素和右元素，到这里就相当简单啦，但是要记得删除已经处理过的元素，否则计算下一页的时候还要做索引偏移。哈哈，要说再见了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">buildMuluJiegouPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemHeights<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> pageLength <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">confirmPageLength</span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> removePageLength <span class=\"token operator\">=</span> pageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageLength <span class=\"token operator\">&gt;=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            removePageLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">&gt;</span></span> page <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pageLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">MuluJiegouItem</span> left <span class=\"token operator\">=</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> muluJiegouItemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">MuluJiegouItem</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> pageLength<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> muluJiegouItemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemHeightIter <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemIter <span class=\"token operator\">=</span> muluJiegouItemList<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> removePageLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-&gt;</span> index <span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            muluJiegouItemIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            muluJiegouItemIter<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            muluJiegouItemHeightIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            muluJiegouItemHeightIter<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> page<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO6，倒序描述的最后\"><a href=\"#NO6，倒序描述的最后\" class=\"headerlink\" title=\"NO6，倒序描述的最后\"></a>NO6，倒序描述的最后</h4><p>倒序描述的最后是方法的入口，所以要测试的话，顺序得是 <code>NO1 =&gt; NO2 =&gt; NO6 =&gt; NO5 =&gt; NO3 =&gt; NO4</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildMuluJiegouPages</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MuluJiegouItems</span> muluJiegouItems<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluTreeNode</span><span class=\"token punctuation\">&gt;</span></span> nonEmptyMulus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> widthPx <span class=\"token operator\">=</span> muluJiegouItems<span class=\"token punctuation\">.</span><span class=\"token function\">getContentWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>nonEmptyMulus<span class=\"token punctuation\">,</span> widthPx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> muluJiegouItemHeights <span class=\"token operator\">=</span> muluJiegouItemList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token operator\">::</span><span class=\"token function\">getHeightPx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> pages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pages<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildMuluJiegouPage</span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">,</span> muluJiegouItemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        muluJiegouItems<span class=\"token punctuation\">.</span><span class=\"token function\">setPages</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<p>A4 图纸上绘画定高表格。首先是表格内容数据组装和表格内容数据替换。表格内容数据替换有几种实现方式。一种，借助 html 绘制 table 模板，使用 thymeleaf 做元素替换。一种，借助 word 和 书签绘制模板，使用 poi 完成书签替换。一种，使用 word 绘制 ftl 模板，使用 freemarker 完成元素替换。以上几种的表格内容数据替换方案，相对来说 html 模板和 ftl 模板是有比较好的延展性。</p>\n<p>至于表格内容数据组装，按照业务组装即可。最近有这种“定高”表格需求，故而在此分享。按两分列展示表格内容，每个分列占用 3 列，总共一行 6 列展示两个业务数据。</p>\n<p><img src=\"/images/2024/a4_table_dinggao/A41.jpg\" alt=\"A1.jpg\"></p>\n<p><img src=\"/images/2024/a4_table_dinggao/4A2.jpg\" alt=\"A2.jpg\"></p>\n<h3 id=\"需求点识别\"><a href=\"#需求点识别\" class=\"headerlink\" title=\"需求点识别\"></a>需求点识别</h3><ol>\n<li><p>要求在固定高度下尽可能展示的行数。</p>\n</li>\n<li><p>要求序号和页次不可换行，且跨页对齐。</p>\n</li>\n<li><p>要求单页内元素不够的用空行占据。</p>\n</li>\n<li><p>序号单页内左侧从n<del>m，序号单页内右侧从 m+1</del>2m。</p>\n</li>\n</ol>\n<h3 id=\"设计及实现\"><a href=\"#设计及实现\" class=\"headerlink\" title=\"设计及实现\"></a>设计及实现</h3><h4 id=\"NO1，设计使用-html-模板\"><a href=\"#NO1，设计使用-html-模板\" class=\"headerlink\" title=\"NO1，设计使用 html 模板\"></a>NO1，设计使用 html 模板</h4><p>使用 html 模板 + thymeleaf 替换 <code>th:</code> 类标签。使用 html  模板是因为可以通过 css 调整样式，并且能够按定制需求完成分页。</p>\n<p>其中， A4 对应像素 <code>794px * 1123px</code> ，表格的宽高设置为 A4 的 85%，即 <code>675px * 955px</code> 。设置表头内容无颜色居中。</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>794px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span>1123px</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>table-bordered table<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">colspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>6<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span> <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>表头描述<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\">    <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> SimHei<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token selector\">.table</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 85%<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border-collapse</span><span class=\"token punctuation\">:</span> collapse <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto auto<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.table th,\n.table td</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 35px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0.35rem<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n <span class=\"token selector\">.table-bordered th,\n .table-bordered td</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #000000<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\"><a href=\"#NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\" class=\"headerlink\" title=\"NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度\"></a>NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度</h4><p>序号和页次高度只有一行，千万不要换行。内容会因为单元格内容长短可能存在换行。因为表格宽度为 675px，内容宽度 = 675 - 序号宽度 - 页次宽度。还有，半角字符占用 10 px，全角字符占用 18px。其中英文相关字符为半角字符，中文相关字符为全角字符。序号和页次使用阿拉伯数字表示，为半角字符。所以，序号和页次占用宽度为 长度 * 10px。序号的最大长度为元素组 size 长度，页次的最大长度为元素组最后一个的页次长度，序号和页次的高度为 <code>.table td</code> 样式高度 35 px。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluTreeNode</span><span class=\"token punctuation\">></span></span> nonEmptyMulus <span class=\"token operator\">=</span> muluJiegouParam<span class=\"token punctuation\">.</span><span class=\"token function\">getNonEmptyMulus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> muluNum <span class=\"token operator\">=</span> nonEmptyMulus<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 序号宽度</span>\n<span class=\"token keyword\">int</span> xhWidth <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>muluNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 页次宽度</span>\n<span class=\"token class-name\">MuluTreeNode</span> lastMuluTreeNode <span class=\"token operator\">=</span> nonEmptyMulus<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>muluNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> lastPageInfo <span class=\"token operator\">=</span> lastMuluTreeNode<span class=\"token punctuation\">.</span><span class=\"token function\">getPageInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> yeciWidth <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> lastPageInfo<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>内容高度，则是对单元格内容每个字符使用正则表达式 <code>[\\x00-\\xff]</code> 判断是否半角字符累计宽度，宽度不可大于内容定宽，循环累计几次后确定行数 lines。如果 lines 为单行则高度为 35 px，如果 lines 为 2+ 行则高度为 <code>21px * lines</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> tempContentWidthPx <span class=\"token operator\">=</span> contentWidthPx<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> muluJiegouItem<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Pattern</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\\\\x00-\\\\xff]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> line <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> contentIdx <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Matcher</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>contentIdx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> itemWidthPx <span class=\"token operator\">=</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">HALF_WIDTH_CHAR_PX</span> <span class=\"token operator\">:</span> <span class=\"token constant\">FULL_WIDTH_CHAR_PX</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> nextContentWidthPx <span class=\"token operator\">=</span> tempContentWidthPx <span class=\"token operator\">-</span> itemWidthPx<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextContentWidthPx <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        tempContentWidthPx <span class=\"token operator\">=</span> nextContentWidthPx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        line<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        tempContentWidthPx <span class=\"token operator\">=</span> contentWidthPx <span class=\"token operator\">-</span> itemWidthPx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">++</span>line<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 其中 35 为单行高度像素，21 * line 为多行高度像素，14 为 padding-top + padding-bottom</span>\n<span class=\"token keyword\">int</span> heightPx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>line <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">35</span> <span class=\"token operator\">:</span> <span class=\"token number\">21</span> <span class=\"token operator\">*</span> line<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO3，确定左侧能装载元素长度，索引位（0-length-1）\"><a href=\"#NO3，确定左侧能装载元素长度，索引位（0-length-1）\" class=\"headerlink\" title=\"NO3，确定左侧能装载元素长度，索引位（0~length-1）\"></a>NO3，确定左侧能装载元素长度，索引位（0~length-1）</h4><p>以单页定高 820 px 为上限，按照每个元素内容高度看单页左侧最多能装下多少元素。但是，元素集合高度总和小于 820 px时，需要用空行补充，至于多少个则是用 高度差值px/49px，其中 49px =  35px + 7px + 7px。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">confirmPageLeftLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> muluJiegouItemHeights<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token constant\">PAGE_CONTENT_HEIGHT</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pageLength <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> tempHeight <span class=\"token operator\">=</span> height <span class=\"token operator\">-</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tempHeight <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            pageLength <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> tempHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageLength <span class=\"token operator\">==</span> length <span class=\"token operator\">&amp;&amp;</span> height <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pageLength <span class=\"token operator\">+=</span> height<span class=\"token operator\">/</span><span class=\"token number\">49</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> pageLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO4，确定右侧能装载元素范围\"><a href=\"#NO4，确定右侧能装载元素范围\" class=\"headerlink\" title=\"NO4，确定右侧能装载元素范围\"></a>NO4，确定右侧能装载元素范围</h4><p>最多能装载的元素为 <strong>NO3</strong> 左侧 length，索引为 <code>length ~ 2*length-1</code> 。但前提是右侧索引范围元素高度之和必须<strong>小于</strong>单页定高。对于 <code>2*length</code> 小于元素集合长度，需要用空单行填充元素集合（当然得先拷贝集合，否则会影响元素集合）。对于右侧索引范围元素高度之和大于单页定高，需要减少右侧元素的起止位置 <code>length-1 ~ 2*length-3</code>，也就是向前挪动 2 个元素（即单行元素）。而右侧索引范围元素高度，每个元素高度需要取左内容高度和右内容高度最大值，原因很简单总不能左侧和右侧不一样，那样会 “大小眼”。</p>\n<p>最终，确认的右侧能填充的元素长度 final_length，那单页的元素长度为 <code>2*final_length</code> 索引位 <code>0 ~ 2*final_length - 1</code> 。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">confirmPageRightLength</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> muluJiegouItemHeights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> leftPageLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftPageLength <span class=\"token operator\">>=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> leftPageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">int</span> pageLength <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> leftPageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> copyedHeights <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageLength <span class=\"token operator\">></span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> pageLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-></span> <span class=\"token constant\">SINGLE_ROW_OFFSETHEIGHT_PX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 这段要改</span>\n        <span class=\"token keyword\">int</span> finalLeftPageLength <span class=\"token operator\">=</span> leftPageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>leftPageLength<span class=\"token punctuation\">,</span> pageLength<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> finalLeftPageLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">></span> <span class=\"token constant\">PAGE_CONTENT_HEIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            leftPageLength<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            pageLength <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> leftPageLength<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> finalLeftPageLength2 <span class=\"token operator\">=</span> leftPageLength<span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>leftPageLength<span class=\"token punctuation\">,</span> pageLength<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> copyedHeights<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> finalLeftPageLength2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> leftPageLength<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO5，依据-NO4-提供的-final-length-组装单页表格元素\"><a href=\"#NO5，依据-NO4-提供的-final-length-组装单页表格元素\" class=\"headerlink\" title=\"NO5，依据 NO4 提供的 final_length 组装单页表格元素\"></a>NO5，依据 NO4 提供的 final_length 组装单页表格元素</h4><p>到这里就没什么好说的就是组装左元素和右元素，到这里就相当简单啦，但是要记得删除已经处理过的元素，否则计算下一页的时候还要做索引偏移。哈哈，要说再见了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">buildMuluJiegouPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> muluJiegouItemHeights<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token punctuation\">></span></span> muluJiegouItemList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> pageLength <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">confirmPageLength</span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> removePageLength <span class=\"token operator\">=</span> pageLength<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageLength <span class=\"token operator\">>=</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            removePageLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pageLength <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">MuluJiegouItem</span> left <span class=\"token operator\">=</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> muluJiegouItemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">MuluJiegouItem</span> right <span class=\"token operator\">=</span> <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> pageLength<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> muluJiegouItemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> muluJiegouItemHeightIter <span class=\"token operator\">=</span> muluJiegouItemHeights<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token punctuation\">></span></span> muluJiegouItemIter <span class=\"token operator\">=</span> muluJiegouItemList<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> removePageLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-></span> index <span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            muluJiegouItemIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            muluJiegouItemIter<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            muluJiegouItemHeightIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            muluJiegouItemHeightIter<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> page<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"NO6，倒序描述的最后\"><a href=\"#NO6，倒序描述的最后\" class=\"headerlink\" title=\"NO6，倒序描述的最后\"></a>NO6，倒序描述的最后</h4><p>倒序描述的最后是方法的入口，所以要测试的话，顺序得是 <code>NO1 =&gt; NO2 =&gt; NO6 =&gt; NO5 =&gt; NO3 =&gt; NO4</code>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildMuluJiegouPages</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MuluJiegouItems</span> muluJiegouItems<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluTreeNode</span><span class=\"token punctuation\">></span></span> nonEmptyMulus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> widthPx <span class=\"token operator\">=</span> muluJiegouItems<span class=\"token punctuation\">.</span><span class=\"token function\">getContentWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token punctuation\">></span></span> muluJiegouItemList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>nonEmptyMulus<span class=\"token punctuation\">,</span> widthPx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> muluJiegouItemHeights <span class=\"token operator\">=</span> muluJiegouItemList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MuluJiegouItem</span><span class=\"token operator\">::</span><span class=\"token function\">getHeightPx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MuluJiegouLineItem</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> pages <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            pages<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildMuluJiegouPage</span><span class=\"token punctuation\">(</span>muluJiegouItemHeights<span class=\"token punctuation\">,</span> muluJiegouItemList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        muluJiegouItems<span class=\"token punctuation\">.</span><span class=\"token function\">setPages</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"java 通过 OpenCV 提取答题卡选择题答案","date":"2024-02-24T01:05:15.000Z","_content":"### 答题卡识别技术选型\n\nOpenCV（Open Source Computer Vision Library） 是一种开源计算机视觉库，它提供了一些用于处理图像和视频的工具和算法。用于处理图片的纠偏。\n\ntesseract-OCR，识别印刷体文字是轻量的 OCR 引擎。用于识别问题号。测试过 tesseract 的 java SDK `tess4j` 识别结果和直接使用 tesseract 命令识别结果不一样。最终我选了直接使用 tesseract 命令识别。\n\n### 答题卡识别前置约束\n\n1. 需要以固定的格式设置问卷\n\n    - 答题区的宽度大于问题的宽度\n\n      ![openCV_1.jpg](images/2024/opencv_tesseract_answerarea/openCV_1.jpg)\n\n    - 需要固定部分宽度的比例\n\n      ![openCV_2.jpg](images/2024/opencv_tesseract_answerarea/openCV_2.png)\n\n2. 识别结果的好坏都和扫描图片的质量有关，建议是灰度 300dpi 扫描设置\n\n### 答题卡识别关键代码\n\n#### 获取答题区题号识别\n\n```java\nprivate List<String> getAnsTitles(String filePath) throws AnswerTitleException {\n        String outPath = filePath.substring(0, filePath.lastIndexOf(\".\"));\n        File file = new File(outPath + \".txt\");\n        try {\n            Runtime runtime = Runtime.getRuntime();\n            String command = \"tesseract \" +  filePath + \" \" + outPath +\" -l chi_sim \";\n            Process ps = runtime.exec(command);\n            ps.waitFor();\n            // 读取文件\n            String result = FileUtils.readLines(file, StandardCharsets.UTF_8).stream()\n                    .map(line -> line.replaceAll(\"\\n\", StringUtils.EMPTY))\n                    .collect(Collectors.joining(StringUtils.EMPTY));\n            log.debug(\"{} result: {}\", command, result);\n            Pattern pattern = Pattern.compile(\"答\\\\s*\\\\d+\\\\s*[-]*\\\\s*\\\\d*\");\n            Matcher matcher = pattern.matcher(result);\n            List<String> ansTitles = new ArrayList<>();\n            while(matcher.find()) {\n                ansTitles.add(matcher.group());\n            }\n            log.debug(\"{} result pattern: {}\", command, ansTitles.stream().collect(Collectors.joining(\",\")));\n            return ansTitles;\n        } catch (Exception e) {\n           throw new AnswerTitleException(MessageFormat.format(\"{0} answer-title-identify\", filePath), e);\n        } finally {\n            FileUtils.deleteQuietly(file);\n        }\n    }\n\n```\n\n#### 通过 openCV 截取答题卡区域\n\n```java\nstatic {\n  System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n}\npublic void recognize(String filePath) {\n         // 获取识别内容，确定答题号\n            Mat srcImgMat = null;\n            Mat cvtMat = null;\n            Mat correctImgMat = null;\n            try {\n                List<String> ansTitles = getAnsTitles(filePath);\n                srcImgMat = Imgcodecs.imread(filePath);\n                cvtMat = new Mat();\n                // 灰度\n                Imgproc.cvtColor(srcImgMat, cvtMat, Imgproc.COLOR_BGR2GRAY);\n                // 矫正\n                correctImgMat = imgCorrector.correct(cvtMat, filePath);\n                // 截答题区\n                List<Mat> answerAreaMats = answerCutter.answerCut(correctImgMat, filePath);\n                if (ansTitles.size() != answerAreaMats.size()) {\n                    answerAreaMats.stream().forEach(ansAreaMat -> MatUtil.releaseMat(ansAreaMat));\n                    throw new AnswerCutException(\"答题数和答案区数量不一致，跳过\");\n                }\n                List<AnswerArea> answerAreas = new ArrayList<>(ansTitles.size());\n                for(int i = 0; i < ansTitles.size(); i++) {\n                    answerAreas.add(new AnswerArea(ansTitles.get(i), answerAreaMats.get(i)));\n                }\n                return answerAreas;\n            } catch (CorrectException | AnswerCutException | AnswerTitleException e) {\n                log.error(\"file:{}\", filePath, e);\n            } finally {\n                MatUtil.releaseMat(srcImgMat);\n                MatUtil.releaseMat(cvtMat);\n                MatUtil.releaseMat(correctImgMat);\n            }\n            return Collections.emptyList();\n}\n\n\n@Getter\n@Setter\n@AllArgsConstructor\npublic class AnswerArea {\n\n    private String title;\n\n    private Mat areaMat;\n}\n\n```\n\n##### 图片纠偏\n\n图片纠偏，纠正角度超过 10 度的图片。\n\n```java\npublic class ImgCorrector {\n\n    private static final Scalar WHITE_PAGE = new Scalar(255, 255, 255);\n    private static final int CANNY_KERNEL_SIZE = 3;\n    private static final int CANNY_THRESHOLD = 40;\n    private static final int CANNY_THRESHOLD_RATIO = 3;\n    private static final int STRAIGHT_PINGJIAO = 180;\n    private static final int STRAIGHT_ZHIJIAO = 90;\n    private static final int THRESHOLD_300 = 300;\n    private static final int THRESHOLD_200 = 200;\n    private static final int THRESHOLD_100 = 100;\n\n    /**\n     * 矫正图片，当倾斜度超过 10 度都是不合理的矫正.\n     * 保持原长宽，不适合大角度纠偏.\n     * @param cvtMat 灰度Mat\n     * @param filePath 文件路径\n     * @return 矫正后的Mat\n     */\n    public Mat correct(Mat cvtMat, String filePath) throws CorrectException {\n        Mat mat = null;\n        try {\n            double degree = calcSlope(cvtMat);\n            // 当倾斜度超过 10 度都是不合理的矫正.\n            if (BigDecimal.valueOf(0.0d).equals(BigDecimal.valueOf(degree)) || Math.abs(degree) > 10.0d) {\n                log.warn(\"{} correct, if degree({}) is zero or bigger than 10 then no correct.\", filePath, degree);\n                return cvtMat;\n            }\n            log.debug(\"{} correct, degree({})\", filePath, degree);\n            Mat correctImgMat = new Mat();\n            double length = cvtMat.width() > cvtMat.height() ? cvtMat.width(): cvtMat.height();\n            // 确定翻转切入点\n            Point point = new Point(length/2, length/2);\n            mat = Imgproc.getRotationMatrix2D(point, degree, 1);\n            Imgproc.warpAffine(cvtMat, correctImgMat, mat,\n                    new Size(length, length), Imgproc.INTER_LINEAR, 0, WHITE_PAGE);\n            if (log.isDebugEnabled()) {\n                MatUtil.saveToTempFile(correctImgMat, filePath, \"correct\");\n            }\n            return correctImgMat;\n        } catch (Exception e) {\n            throw new CorrectException(e);\n        } finally {\n            releaseMat(mat);\n        }\n    }\n\n\n    /**\n     * 计算图片倾斜角度.\n     * 1. Canny 提取图像边缘检测\n     * 2. HoughLines 提取直线\n     * @param cvtMat 灰度图片mat\n     * @return 倾斜角度\n     */\n    private double calcSlope(Mat cvtMat) {\n        Mat cannyMat = null;\n        Mat blurMat = null;\n        Mat straightLineMat = null;\n        try {\n            blurMat = new Mat();\n            // 3x3 内核降噪\n            Imgproc.blur(cvtMat, blurMat, new Size(3, 3));\n            // canny 射线\n            cannyMat = new Mat();\n            Imgproc.Canny(blurMat, cannyMat,\n                    CANNY_THRESHOLD, CANNY_THRESHOLD * CANNY_THRESHOLD_RATIO, CANNY_KERNEL_SIZE);\n            // houghLines\n            straightLineMat = new Mat();\n            Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO,  THRESHOLD_300);\n//            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n//                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_300);\n//            }\n            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_200);\n            }\n            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_100);\n            }\n            if (straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n                System.out.println(\"没检测到直线，不纠偏\");\n                return 0.0d;\n            }\n            float average = getLineSlopeAvg(straightLineMat);\n            return average / Math.PI * STRAIGHT_PINGJIAO - STRAIGHT_ZHIJIAO;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            releaseMat(blurMat);\n            releaseMat(cannyMat);\n            releaseMat(straightLineMat);\n        }\n        return 0.0d;\n    }\n\n    private float getLineSlopeAvg(Mat lines) {\n\n        Map<Boolean, List<Integer>> xIsX = new HashMap<>(lines.rows());\n        for(int x=0; x < lines.rows(); x++) {\n            double[] vec = lines.get(x, 0);\n            boolean isX = isX(vec);\n            List<Integer> indexs = xIsX.get(isX);\n            if (!xIsX.containsKey(isX)) {\n                indexs = new ArrayList<>();\n                xIsX.put(isX, indexs);\n            }\n            indexs.add(x);\n        }\n        List<Integer> xIndexs = xIsX.getOrDefault(true, Collections.emptyList());\n        List<Integer> yIndexs = xIsX.getOrDefault(false, Collections.emptyList());\n        int countX = xIndexs.size();\n        int countY = yIndexs.size();\n        List<Integer> indexs = countX > countY ? xIndexs : countX < countY ? yIndexs: ListUtils.union(xIndexs, yIndexs);\n        float sum = 0;\n        for(int index: indexs) {\n            double[] vec = lines.get(index, 0);\n            double theta = vec[1];\n            sum += theta;\n        }\n        return sum/indexs.size();\n    }\n\n    private boolean isX(double[] vec) {\n        double rho = vec[0];\n        double theta = vec[1];\n        double a = Math.cos(theta), b = Math.sin(theta);\n        double x0 = a*rho, y0 = b*rho;\n        double point1x = Math.round(x0 + 1000*(-b));\n        double point1y = Math.round(y0 + 1000*(a));\n        double point2x = Math.round(x0 - 1000*(-b));\n        double point2y = Math.round(y0 - 1000*(a));\n        return Math.abs(point1x- point2x) > Math.abs(point1y - point2y);\n    }\n\n    private void releaseMat(Mat imgMat) {\n        if (imgMat != null) {\n            imgMat.release();\n        }\n    }\n}\n```\n\n##### 截取答题卡区域\n\n答题卡区域与问题区域的区别是在设置的答题卡区长度大于问题区域。这样就能简单的截取到答题卡区\n\n```java\npublic class ImgAnswerCutter {\n\n    private static final int THRESHOLD_MAX = 255;\n    private static final int STRUCTURE_WIDTH = 50;\n    private static final int STRUCTURE_HEIGHT = 3;\n    private static final double POINT_HALF = 0.5;\n    private static final double POINT_EIGHT = 0.8;\n    private static final double POINT_NIGHTEIGHT = 0.98;\n    private static final double FILTER_HEIGHT = 20;\n    private static final double DOUBLE = 2;\n    /**\n     * 答题区切割.\n     * @param correctImgMat 矫正后的图片Mat\n     * @param filePath 文件路径\n     * @return 答题区切割后的 Mat 集合\n     */\n    public List<Mat> answerCut(Mat correctImgMat, String filePath) throws AnswerCutException {\n        Mat binaryMat = null;\n        Mat noiseMat = null;\n        Mat erodeMat = null;\n        Mat reverseMat = null;\n        Mat edgeMat = null;\n        try {\n            binaryMat = new Mat();\n            // 二值化 Mat\n            Imgproc.threshold(correctImgMat, binaryMat, THRESHOLD_MAX, THRESHOLD_MAX,\n                    Imgproc.THRESH_OTSU | Imgproc.THRESH_BINARY);\n            // 定义膨化 Mat\n            noiseMat = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(STRUCTURE_WIDTH, STRUCTURE_HEIGHT));\n            erodeMat = new Mat();\n            Imgproc.erode(binaryMat, erodeMat, noiseMat);\n            reverseMat = new Mat();\n            // 反值化 Mat\n            Core.bitwise_not(erodeMat, reverseMat);\n            List<MatOfPoint> matOfPoints = new ArrayList<>();\n            edgeMat = new Mat();\n            // 发现矩形条件\n            Imgproc.findContours(reverseMat, matOfPoints, edgeMat,\n                    Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE, new Point(0, 0));\n            // 合并小矩形\n            List<Rect> rects = mergeInnerAndTransRect(matOfPoints);\n            // 过滤掉离谱的矩形\n            AtomicInteger count = new AtomicInteger(0);\n            return filterAnswerRect(rects).stream()\n                    .map(rect -> {\n                        Mat ansAreaMat = new Mat(correctImgMat, rect);\n                        int num = count.getAndAdd(1);\n\n                        if (log.isDebugEnabled()) {\n                            MatUtil.saveToTempFile(ansAreaMat, filePath, \"anscut-\" + num);\n                        }\n                        return ansAreaMat;\n                    })\n                    .collect(Collectors.toList());\n        } catch (Exception e) {\n           throw new AnswerCutException(e);\n        } finally {\n            releaseMat(binaryMat);\n            releaseMat(noiseMat);\n            releaseMat(erodeMat);\n            releaseMat(reverseMat);\n            releaseMat(edgeMat);\n        }\n    }\n\n    /**\n     * 只留下长度最长的举证，兼容 2% 的宽度差.\n     * @param rects 矩阵集合.\n     * @return 最长的.\n     */\n    private List<Rect> filterAnswerRect(List<Rect> rects) {\n        int maxWidth = 0;\n        int  maxHeight = 0;\n        int secHeight = 0;\n        int minHeight = 0;\n        rects = rects.stream()\n                .sorted((rect1, rect2) -> NumberUtils.compare(rect1.height, rect2.height))\n                .collect(Collectors.toList());\n        for (Rect rect: rects) {\n            if (maxWidth < rect.width && rect.height > maxHeight * POINT_HALF) {\n                maxWidth = rect.width;\n            }\n            if (maxHeight < rect.height) {\n                secHeight = maxHeight;\n                maxHeight = rect.height;\n            }\n            if ((minHeight == 0 || minHeight > rect.height) && rect.height> FILTER_HEIGHT) {\n                minHeight = rect.height;\n            }\n        }\n        // 处理同一页有多行答案和单行答案,仅处理同一也只有一个多行多个单行的情况\n        if (maxHeight > minHeight * DOUBLE) {\n            maxHeight = secHeight;\n        }\n        final int height = maxHeight;\n        final int finalMaxWidth = maxWidth;\n        return rects.stream()\n                .filter(rect -> rect.width > finalMaxWidth * POINT_NIGHTEIGHT &&\n                        rect.height > height * POINT_EIGHT)\n                .sorted((rect1, rect2) -> NumberUtils.compare(rect1.y, rect2.y))\n                .collect(Collectors.toList());\n    }\n    /**\n     * 转型为 MatOfPoint,合并inner的小矩形.\n     * @param matOfPoints mat 点.\n     * @return 矩形集合.\n     */\n    private List<Rect> mergeInnerAndTransRect(List<MatOfPoint> matOfPoints) {\n        List<Rect> sortedRects = matOfPoints.stream().map(Imgproc::boundingRect).sorted((rec1, rec2) -> {\n            if(rec1.y < rec2.y) {\n                return -1;\n            }\n            if(rec1.y == rec2.y) {\n                if(rec1.width < rec2.width) {\n                    return 1;\n                }\n                if(rec1.height < rec2.height) {\n                    return 1;\n                }\n            }\n            return 1;\n        }).collect(Collectors.toList());\n        List<Rect> rects = new ArrayList<>();\n        for(Rect rect: sortedRects) {\n            if (!canMergeInner(rects, rect)) {\n                rects.add(rect);\n            }\n        }\n        return rects;\n    }\n\n    /**\n     * 判断当前 rect 的长宽高是否在范围内, x.y都在范围内，且x+width和 y+height都在范围内则能合并.\n     * @param rects 矩形集合\n     * @param rect 对比矩形\n     * @return 是否可merge\n     */\n    private boolean canMergeInner(List<Rect> rects, Rect rect) {\n        return rects.stream()\n                .anyMatch(rect1 -> rect1.x <= rect.x && rect1.y <= rect.y &&\n                        rect1.x+rect1.width >= rect.x + rect.width && rect1.y+rect1.height > rect.y+rect.height);\n    }\n\n    private void releaseMat(Mat imgMat) {\n        if (imgMat != null) {\n            imgMat.release();\n        }\n    }\n}\n```\n\n#### 得到答题区的选择项目\n\n通过 openCV 对答题区的二值、膨胀、canny 之后确定填图区域，并计算他与边的差值处于选项之间的差值确定是填涂的第几个答案。\n\n```java\n@Slf4j\npublic class RecognizeShadow {\n\n    private final static double[] MAINQ_PECENT = new double[]{0.0197d, 0.0388d, 0.0116d};\n    private final static double[] SUBQ_PECENT = new double[]{0.0205d, 0.0403d, 0.0120d};\n    /**\n     * 小问题的选项区占答题区的百分占比.\n     */\n    private double subPercent;\n    /**\n     * 大问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */\n    private double[] mainqPercent;\n    /**\n     * 小问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */\n    private double[] subqPercent;\n\n    public RecognizeShadow() {\n        this.subPercent = 0.88d;\n        this.mainqPercent = MAINQ_PECENT;\n        this.subqPercent = SUBQ_PECENT;\n    }\n\n    public RecognizeShadow(double subPercent, double[] mainqPercent, double[] subqPercent) {\n        if (mainqPercent.length != 3 || subqPercent.length != 3) {\n            throw new IllegalArgumentException(\"选项区的百分比必须是3个。num_0，第一个选项到竖线占选项区的百分比。\"\n                    + \"num_1，选项占选项区的百分比。num_2，选项之间占选项区的百分比。\");\n        }\n        this.subPercent = subPercent;\n        this.mainqPercent = mainqPercent;\n        this.subqPercent = subqPercent;\n    }\n    /**\n     *\n     * @param qPercent\n     * @return\n     */\n    public static double[] parseQPercent(String qPercent) {\n        qPercent = qPercent.replace(\"[\", \"\").replace(\"]\", \"\");\n        String[] percents = qPercent.split(\",\");\n        if (percents.length != 3) {\n            throw new IllegalArgumentException(\",字符长度不为3， 不符合要求\");\n        }\n        return new double[]{Double.parseDouble(percents[0]), Double.parseDouble(percents[1]), Double.parseDouble(percents[2])};\n    }\n\n\n    /**\n     * 识别阴影，并定位.\n     * @param answerAreas 阴影\n     * @param filePath 文件路径\n     * @return 结果识别\n     */\n    public List<String> recognizeShadow(List<AnswerArea> answerAreas, String filePath) {\n        return answerAreas.stream()\n                .map(answerArea -> {\n                    Mat splitMat = null;\n                    Mat noiseMat = null;\n                    Mat erodeMat = null;\n                    Mat dilateMat = null;\n                    Mat edgeMat = null;\n                    Mat contourMat = null;\n                    Mat optionMat = null;\n                    Mat areaMat = answerArea.getAreaMat();\n                    try {\n                        splitMat = new Mat();\n                        // 二值化\n                        Imgproc.threshold(areaMat, splitMat, 0, 255, Imgproc.THRESH_OTSU | Imgproc.THRESH_BINARY_INV);\n                        // 获取选项区域\n                        Option option = optionArea(splitMat);\n                        noiseMat = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(8, 8));\n                        erodeMat = new Mat();\n                        optionMat = option.getOptionMat();\n                        Imgproc.erode(optionMat, erodeMat, noiseMat);\n                        dilateMat = new Mat();\n                        // 膨胀\n                        Imgproc.dilate(erodeMat, dilateMat, noiseMat);\n                        edgeMat = new Mat();\n                        // canny\n                        Imgproc.Canny(dilateMat, edgeMat, 50, 150);\n                        List<MatOfPoint> chapter = new ArrayList<>();\n                        contourMat = new Mat();\n                        Imgproc.findContours(edgeMat, chapter, contourMat, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);\n                        if (log.isDebugEnabled()) {\n                            Imgproc.drawContours(optionMat, chapter, -1, new Scalar(0, 0, 255), 1);\n                            MatUtil.saveToTempFile(option.getOptionMat(), filePath, \"shadow\");\n                        }\n                        return calcAnswer(chapter, option, answerArea.getTitle());\n                    }finally {\n                        MatUtil.releaseMat(optionMat);\n                        MatUtil.releaseMat(splitMat);\n                        MatUtil.releaseMat(noiseMat);\n                        MatUtil.releaseMat(erodeMat);\n                        MatUtil.releaseMat(dilateMat);\n                        MatUtil.releaseMat(edgeMat);\n                        MatUtil.releaseMat(contourMat);\n                        MatUtil.releaseMat(areaMat);\n                    }\n                }).filter(StringUtils::isNotBlank).collect(Collectors.toList());\n    }\n\n\n\n    /**\n     * 通过选项的偏移量计算答案位置.\n     * @param chapter 被填涂的MatOfPoint\n     * @param option 选项区情况\n     * @param answerTitle 答题目\n     * @return 答题结果\n     */\n    private String calcAnswer(List<MatOfPoint> chapter, Option option, String answerTitle) {\n        double[] optionalPer = option.optionPercent < subPercent ? subqPercent: mainqPercent;\n        double optionAllWidth = option.getOptionWidth();\n        double optionAllHeight = option.getOptionHeight();\n        double leftGrapWidth = optionAllWidth * optionalPer[0];\n        double ansWidth = optionAllWidth * optionalPer[1];\n        double ansGapWidth = optionAllWidth * optionalPer[2];\n        double preAnsWidth = ansWidth + ansGapWidth;\n        // 最小填涂覆盖宽度.\n        double minMatchWidth = ansWidth * 0.6;\n        List<SingleAnswerArea> ttAnsAreas = convert(chapter);\n        int lineCount = (int)Math.round(( optionAllWidth -leftGrapWidth) /preAnsWidth);\n        String answer = ttAnsAreas.stream().map(ttAnsArea -> {\n            double yStart = ttAnsArea.getYStart();\n            double height = ttAnsArea.getHeight();\n            // 小于最小的填涂覆盖宽度则认为是无效的填涂.\n            if (ttAnsArea.getWidth() < minMatchWidth) {\n                log.warn(\"{} ttAnsArea:{}宽度{} 小于{}，无效填涂\", answerTitle, ttAnsArea, ttAnsArea.getWidth(), minMatchWidth);\n                return 0;\n            }\n            // 算出的跳过选项，此处使用 四舍五入 原则.\n            int skipXCount = (int)Math.round(((ttAnsArea.getXStart() -leftGrapWidth) /preAnsWidth));\n            skipXCount++;\n            if (yStart > optionAllHeight * 0.5 && height < optionAllHeight * 0.25) {\n                skipXCount += lineCount;\n            }\n            if (skipXCount < 10) {\n                return skipXCount;\n            }\n            // 认为大于 9 的是以A-Z标记，所以选项不超过 35 个选项.\n            return skipXCount + 55;\n        }).filter(num -> num > 0).sorted().distinct().map(num -> {\n            if (num < 10) {\n                return String.valueOf(num);\n            }\n            return String.valueOf((char)num.intValue());\n        }).collect(Collectors.joining(\",\"));\n        return MessageFormat.format(\"题号:{0}，答案:{1}\",\n                StringUtils.replaceIgnoreCase(answerTitle, \" \", \"\"), answer);\n    }\n\n    /**\n     * 从MatOfPoint多个点，转换为 minX->maxX,minY->maxY.\n     * @param chapters chapters\n     * @return SingleAnswerArea集合.\n     */\n    private List<SingleAnswerArea> convert(List<MatOfPoint> chapters) {\n        return chapters.stream().map(chapter -> {\n            List<Point> points = chapter.toList();\n            double xStart = 0;\n            double xEnd = 0;\n            double yStart = 0;\n            double yEnd = 0;\n            for (Point point: points) {\n                double x = point.x;\n                double y = point.y;\n                if (xStart == 0) {\n                    xStart = x;\n                    yStart = y;\n                }\n                if (x > xEnd) {\n                    xEnd = x;\n                } else if (x < xStart) {\n                    xStart = x;\n                }\n\n                if (y > yEnd) {\n                    yEnd = y;\n                } else if (y < yStart) {\n                    yStart = y;\n                }\n            }\n            return new SingleAnswerArea(xStart, xEnd, yStart, yEnd);\n        })\n                .sorted(Comparator.comparing(SingleAnswerArea::getYStart)\n                        .thenComparing(SingleAnswerArea::getHeight)\n                        .thenComparing(SingleAnswerArea::getXStart)).collect(Collectors.toList());\n    }\n\n    @Getter\n    @Setter\n    @AllArgsConstructor\n    @ToString\n    private class SingleAnswerArea {\n\n        private double xStart;\n\n        private double xEnd;\n\n        private double yStart;\n\n        private double yEnd;\n\n        public double getWidth() {\n            return xEnd - xStart;\n        }\n\n        public double getHeight() {\n            return yEnd - yStart;\n        }\n    }\n\n    /**\n     * 确定答题区中选项区域与答题区的宽度占比，用以确定是大题还是小题，且后续的每个选项的占比也会因为大题、小题而不同.\n     * @param srcMat 答题区，二值化后的Mat\n     * @return {@link Option}\n     */\n    private Option optionArea(Mat srcMat) {\n        List<MatOfPoint> chapter2 = new ArrayList<>();\n        Mat contourMat = new Mat();\n        Imgproc.findContours(srcMat, chapter2, contourMat, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);\n\n        Map<Double, List<MatOfPoint>> pointGroup = chapter2.stream().collect(Collectors.groupingBy(matOfPoint -> {\n            List<Point> points = matOfPoint.toList().stream().sorted(Comparator.comparing(point -> point.x)).collect(Collectors.toList());\n            double minPoint = points.get(0).x;\n            double maxPoint = points.get(points.size()-1).x;\n            return Math.abs(maxPoint - minPoint);\n        }));\n\n        double maxWidth = 0.0d;\n        double optionWidth = 0.0d;\n        MatOfPoint maxMatPoint = null;\n        MatOfPoint optionMatPoint = null;\n        for(Entry<Double, List<MatOfPoint>> pointEntry: pointGroup.entrySet()) {\n            Double width = pointEntry.getKey();\n            List<MatOfPoint> matOfPoints = pointEntry.getValue();\n            if(maxWidth == 0.0d) {\n                maxWidth = width;\n                maxMatPoint = matOfPoints.get(0);\n            } else if(maxWidth < width) {\n                optionWidth = maxWidth;\n                maxWidth = width;\n                optionMatPoint = maxMatPoint;\n                maxMatPoint = matOfPoints.get(0);\n            }\n        }\n        Imgproc.drawContours(srcMat, Collections.singletonList(optionMatPoint), -1, new Scalar(0, 0, 255), 2);\n        List<Point> xPoints = optionMatPoint.toList().stream().sorted(Comparator.comparing(point -> point.x)).collect(Collectors.toList());\n        List<Point> yPoints = optionMatPoint.toList().stream().sorted(Comparator.comparing(point -> point.y)).collect(Collectors.toList());\n        Range colRange = new Range(((Double)xPoints.get(0).x).intValue(), ((Double)xPoints.get(xPoints.size()-1).x).intValue());\n        Range rowRange = new Range(((Double)yPoints.get(0).y).intValue(), ((Double)yPoints.get(yPoints.size()-1).y).intValue());\n        Mat optionMat = new Mat(srcMat, rowRange, colRange);\n        contourMat.release();\n        double optionHeight = yPoints.get(yPoints.size()-1).y - yPoints.get(0).y;\n        return new Option(optionMat, optionWidth/maxWidth, optionWidth, optionHeight);\n    }\n\n    /**\n     * 选项区的结构.\n     */\n    @Getter\n    @Setter\n    @AllArgsConstructor\n    private class Option {\n\n        /**\n         * 选项Mat.\n         */\n        private Mat optionMat;\n        /**\n         * 选项区/答题区占比.\n         */\n        private double optionPercent;\n        /**\n         * 选项区宽度.\n         */\n        private double optionWidth;\n\n        private double optionHeight;\n    }\n}\n\n```\n\n","source":"_posts/java-通过-OpenCV-提取答题卡选择题答案.md","raw":"---\ntitle: java 通过 OpenCV 提取答题卡选择题答案\ndate: 2024-02-24 09:05:15\ncategories:\n- tools\ntags:\n- opencv\n- tesseract\n---\n### 答题卡识别技术选型\n\nOpenCV（Open Source Computer Vision Library） 是一种开源计算机视觉库，它提供了一些用于处理图像和视频的工具和算法。用于处理图片的纠偏。\n\ntesseract-OCR，识别印刷体文字是轻量的 OCR 引擎。用于识别问题号。测试过 tesseract 的 java SDK `tess4j` 识别结果和直接使用 tesseract 命令识别结果不一样。最终我选了直接使用 tesseract 命令识别。\n\n### 答题卡识别前置约束\n\n1. 需要以固定的格式设置问卷\n\n    - 答题区的宽度大于问题的宽度\n\n      ![openCV_1.jpg](images/2024/opencv_tesseract_answerarea/openCV_1.jpg)\n\n    - 需要固定部分宽度的比例\n\n      ![openCV_2.jpg](images/2024/opencv_tesseract_answerarea/openCV_2.png)\n\n2. 识别结果的好坏都和扫描图片的质量有关，建议是灰度 300dpi 扫描设置\n\n### 答题卡识别关键代码\n\n#### 获取答题区题号识别\n\n```java\nprivate List<String> getAnsTitles(String filePath) throws AnswerTitleException {\n        String outPath = filePath.substring(0, filePath.lastIndexOf(\".\"));\n        File file = new File(outPath + \".txt\");\n        try {\n            Runtime runtime = Runtime.getRuntime();\n            String command = \"tesseract \" +  filePath + \" \" + outPath +\" -l chi_sim \";\n            Process ps = runtime.exec(command);\n            ps.waitFor();\n            // 读取文件\n            String result = FileUtils.readLines(file, StandardCharsets.UTF_8).stream()\n                    .map(line -> line.replaceAll(\"\\n\", StringUtils.EMPTY))\n                    .collect(Collectors.joining(StringUtils.EMPTY));\n            log.debug(\"{} result: {}\", command, result);\n            Pattern pattern = Pattern.compile(\"答\\\\s*\\\\d+\\\\s*[-]*\\\\s*\\\\d*\");\n            Matcher matcher = pattern.matcher(result);\n            List<String> ansTitles = new ArrayList<>();\n            while(matcher.find()) {\n                ansTitles.add(matcher.group());\n            }\n            log.debug(\"{} result pattern: {}\", command, ansTitles.stream().collect(Collectors.joining(\",\")));\n            return ansTitles;\n        } catch (Exception e) {\n           throw new AnswerTitleException(MessageFormat.format(\"{0} answer-title-identify\", filePath), e);\n        } finally {\n            FileUtils.deleteQuietly(file);\n        }\n    }\n\n```\n\n#### 通过 openCV 截取答题卡区域\n\n```java\nstatic {\n  System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n}\npublic void recognize(String filePath) {\n         // 获取识别内容，确定答题号\n            Mat srcImgMat = null;\n            Mat cvtMat = null;\n            Mat correctImgMat = null;\n            try {\n                List<String> ansTitles = getAnsTitles(filePath);\n                srcImgMat = Imgcodecs.imread(filePath);\n                cvtMat = new Mat();\n                // 灰度\n                Imgproc.cvtColor(srcImgMat, cvtMat, Imgproc.COLOR_BGR2GRAY);\n                // 矫正\n                correctImgMat = imgCorrector.correct(cvtMat, filePath);\n                // 截答题区\n                List<Mat> answerAreaMats = answerCutter.answerCut(correctImgMat, filePath);\n                if (ansTitles.size() != answerAreaMats.size()) {\n                    answerAreaMats.stream().forEach(ansAreaMat -> MatUtil.releaseMat(ansAreaMat));\n                    throw new AnswerCutException(\"答题数和答案区数量不一致，跳过\");\n                }\n                List<AnswerArea> answerAreas = new ArrayList<>(ansTitles.size());\n                for(int i = 0; i < ansTitles.size(); i++) {\n                    answerAreas.add(new AnswerArea(ansTitles.get(i), answerAreaMats.get(i)));\n                }\n                return answerAreas;\n            } catch (CorrectException | AnswerCutException | AnswerTitleException e) {\n                log.error(\"file:{}\", filePath, e);\n            } finally {\n                MatUtil.releaseMat(srcImgMat);\n                MatUtil.releaseMat(cvtMat);\n                MatUtil.releaseMat(correctImgMat);\n            }\n            return Collections.emptyList();\n}\n\n\n@Getter\n@Setter\n@AllArgsConstructor\npublic class AnswerArea {\n\n    private String title;\n\n    private Mat areaMat;\n}\n\n```\n\n##### 图片纠偏\n\n图片纠偏，纠正角度超过 10 度的图片。\n\n```java\npublic class ImgCorrector {\n\n    private static final Scalar WHITE_PAGE = new Scalar(255, 255, 255);\n    private static final int CANNY_KERNEL_SIZE = 3;\n    private static final int CANNY_THRESHOLD = 40;\n    private static final int CANNY_THRESHOLD_RATIO = 3;\n    private static final int STRAIGHT_PINGJIAO = 180;\n    private static final int STRAIGHT_ZHIJIAO = 90;\n    private static final int THRESHOLD_300 = 300;\n    private static final int THRESHOLD_200 = 200;\n    private static final int THRESHOLD_100 = 100;\n\n    /**\n     * 矫正图片，当倾斜度超过 10 度都是不合理的矫正.\n     * 保持原长宽，不适合大角度纠偏.\n     * @param cvtMat 灰度Mat\n     * @param filePath 文件路径\n     * @return 矫正后的Mat\n     */\n    public Mat correct(Mat cvtMat, String filePath) throws CorrectException {\n        Mat mat = null;\n        try {\n            double degree = calcSlope(cvtMat);\n            // 当倾斜度超过 10 度都是不合理的矫正.\n            if (BigDecimal.valueOf(0.0d).equals(BigDecimal.valueOf(degree)) || Math.abs(degree) > 10.0d) {\n                log.warn(\"{} correct, if degree({}) is zero or bigger than 10 then no correct.\", filePath, degree);\n                return cvtMat;\n            }\n            log.debug(\"{} correct, degree({})\", filePath, degree);\n            Mat correctImgMat = new Mat();\n            double length = cvtMat.width() > cvtMat.height() ? cvtMat.width(): cvtMat.height();\n            // 确定翻转切入点\n            Point point = new Point(length/2, length/2);\n            mat = Imgproc.getRotationMatrix2D(point, degree, 1);\n            Imgproc.warpAffine(cvtMat, correctImgMat, mat,\n                    new Size(length, length), Imgproc.INTER_LINEAR, 0, WHITE_PAGE);\n            if (log.isDebugEnabled()) {\n                MatUtil.saveToTempFile(correctImgMat, filePath, \"correct\");\n            }\n            return correctImgMat;\n        } catch (Exception e) {\n            throw new CorrectException(e);\n        } finally {\n            releaseMat(mat);\n        }\n    }\n\n\n    /**\n     * 计算图片倾斜角度.\n     * 1. Canny 提取图像边缘检测\n     * 2. HoughLines 提取直线\n     * @param cvtMat 灰度图片mat\n     * @return 倾斜角度\n     */\n    private double calcSlope(Mat cvtMat) {\n        Mat cannyMat = null;\n        Mat blurMat = null;\n        Mat straightLineMat = null;\n        try {\n            blurMat = new Mat();\n            // 3x3 内核降噪\n            Imgproc.blur(cvtMat, blurMat, new Size(3, 3));\n            // canny 射线\n            cannyMat = new Mat();\n            Imgproc.Canny(blurMat, cannyMat,\n                    CANNY_THRESHOLD, CANNY_THRESHOLD * CANNY_THRESHOLD_RATIO, CANNY_KERNEL_SIZE);\n            // houghLines\n            straightLineMat = new Mat();\n            Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO,  THRESHOLD_300);\n//            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n//                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_300);\n//            }\n            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_200);\n            }\n            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_100);\n            }\n            if (straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {\n                System.out.println(\"没检测到直线，不纠偏\");\n                return 0.0d;\n            }\n            float average = getLineSlopeAvg(straightLineMat);\n            return average / Math.PI * STRAIGHT_PINGJIAO - STRAIGHT_ZHIJIAO;\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            releaseMat(blurMat);\n            releaseMat(cannyMat);\n            releaseMat(straightLineMat);\n        }\n        return 0.0d;\n    }\n\n    private float getLineSlopeAvg(Mat lines) {\n\n        Map<Boolean, List<Integer>> xIsX = new HashMap<>(lines.rows());\n        for(int x=0; x < lines.rows(); x++) {\n            double[] vec = lines.get(x, 0);\n            boolean isX = isX(vec);\n            List<Integer> indexs = xIsX.get(isX);\n            if (!xIsX.containsKey(isX)) {\n                indexs = new ArrayList<>();\n                xIsX.put(isX, indexs);\n            }\n            indexs.add(x);\n        }\n        List<Integer> xIndexs = xIsX.getOrDefault(true, Collections.emptyList());\n        List<Integer> yIndexs = xIsX.getOrDefault(false, Collections.emptyList());\n        int countX = xIndexs.size();\n        int countY = yIndexs.size();\n        List<Integer> indexs = countX > countY ? xIndexs : countX < countY ? yIndexs: ListUtils.union(xIndexs, yIndexs);\n        float sum = 0;\n        for(int index: indexs) {\n            double[] vec = lines.get(index, 0);\n            double theta = vec[1];\n            sum += theta;\n        }\n        return sum/indexs.size();\n    }\n\n    private boolean isX(double[] vec) {\n        double rho = vec[0];\n        double theta = vec[1];\n        double a = Math.cos(theta), b = Math.sin(theta);\n        double x0 = a*rho, y0 = b*rho;\n        double point1x = Math.round(x0 + 1000*(-b));\n        double point1y = Math.round(y0 + 1000*(a));\n        double point2x = Math.round(x0 - 1000*(-b));\n        double point2y = Math.round(y0 - 1000*(a));\n        return Math.abs(point1x- point2x) > Math.abs(point1y - point2y);\n    }\n\n    private void releaseMat(Mat imgMat) {\n        if (imgMat != null) {\n            imgMat.release();\n        }\n    }\n}\n```\n\n##### 截取答题卡区域\n\n答题卡区域与问题区域的区别是在设置的答题卡区长度大于问题区域。这样就能简单的截取到答题卡区\n\n```java\npublic class ImgAnswerCutter {\n\n    private static final int THRESHOLD_MAX = 255;\n    private static final int STRUCTURE_WIDTH = 50;\n    private static final int STRUCTURE_HEIGHT = 3;\n    private static final double POINT_HALF = 0.5;\n    private static final double POINT_EIGHT = 0.8;\n    private static final double POINT_NIGHTEIGHT = 0.98;\n    private static final double FILTER_HEIGHT = 20;\n    private static final double DOUBLE = 2;\n    /**\n     * 答题区切割.\n     * @param correctImgMat 矫正后的图片Mat\n     * @param filePath 文件路径\n     * @return 答题区切割后的 Mat 集合\n     */\n    public List<Mat> answerCut(Mat correctImgMat, String filePath) throws AnswerCutException {\n        Mat binaryMat = null;\n        Mat noiseMat = null;\n        Mat erodeMat = null;\n        Mat reverseMat = null;\n        Mat edgeMat = null;\n        try {\n            binaryMat = new Mat();\n            // 二值化 Mat\n            Imgproc.threshold(correctImgMat, binaryMat, THRESHOLD_MAX, THRESHOLD_MAX,\n                    Imgproc.THRESH_OTSU | Imgproc.THRESH_BINARY);\n            // 定义膨化 Mat\n            noiseMat = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(STRUCTURE_WIDTH, STRUCTURE_HEIGHT));\n            erodeMat = new Mat();\n            Imgproc.erode(binaryMat, erodeMat, noiseMat);\n            reverseMat = new Mat();\n            // 反值化 Mat\n            Core.bitwise_not(erodeMat, reverseMat);\n            List<MatOfPoint> matOfPoints = new ArrayList<>();\n            edgeMat = new Mat();\n            // 发现矩形条件\n            Imgproc.findContours(reverseMat, matOfPoints, edgeMat,\n                    Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE, new Point(0, 0));\n            // 合并小矩形\n            List<Rect> rects = mergeInnerAndTransRect(matOfPoints);\n            // 过滤掉离谱的矩形\n            AtomicInteger count = new AtomicInteger(0);\n            return filterAnswerRect(rects).stream()\n                    .map(rect -> {\n                        Mat ansAreaMat = new Mat(correctImgMat, rect);\n                        int num = count.getAndAdd(1);\n\n                        if (log.isDebugEnabled()) {\n                            MatUtil.saveToTempFile(ansAreaMat, filePath, \"anscut-\" + num);\n                        }\n                        return ansAreaMat;\n                    })\n                    .collect(Collectors.toList());\n        } catch (Exception e) {\n           throw new AnswerCutException(e);\n        } finally {\n            releaseMat(binaryMat);\n            releaseMat(noiseMat);\n            releaseMat(erodeMat);\n            releaseMat(reverseMat);\n            releaseMat(edgeMat);\n        }\n    }\n\n    /**\n     * 只留下长度最长的举证，兼容 2% 的宽度差.\n     * @param rects 矩阵集合.\n     * @return 最长的.\n     */\n    private List<Rect> filterAnswerRect(List<Rect> rects) {\n        int maxWidth = 0;\n        int  maxHeight = 0;\n        int secHeight = 0;\n        int minHeight = 0;\n        rects = rects.stream()\n                .sorted((rect1, rect2) -> NumberUtils.compare(rect1.height, rect2.height))\n                .collect(Collectors.toList());\n        for (Rect rect: rects) {\n            if (maxWidth < rect.width && rect.height > maxHeight * POINT_HALF) {\n                maxWidth = rect.width;\n            }\n            if (maxHeight < rect.height) {\n                secHeight = maxHeight;\n                maxHeight = rect.height;\n            }\n            if ((minHeight == 0 || minHeight > rect.height) && rect.height> FILTER_HEIGHT) {\n                minHeight = rect.height;\n            }\n        }\n        // 处理同一页有多行答案和单行答案,仅处理同一也只有一个多行多个单行的情况\n        if (maxHeight > minHeight * DOUBLE) {\n            maxHeight = secHeight;\n        }\n        final int height = maxHeight;\n        final int finalMaxWidth = maxWidth;\n        return rects.stream()\n                .filter(rect -> rect.width > finalMaxWidth * POINT_NIGHTEIGHT &&\n                        rect.height > height * POINT_EIGHT)\n                .sorted((rect1, rect2) -> NumberUtils.compare(rect1.y, rect2.y))\n                .collect(Collectors.toList());\n    }\n    /**\n     * 转型为 MatOfPoint,合并inner的小矩形.\n     * @param matOfPoints mat 点.\n     * @return 矩形集合.\n     */\n    private List<Rect> mergeInnerAndTransRect(List<MatOfPoint> matOfPoints) {\n        List<Rect> sortedRects = matOfPoints.stream().map(Imgproc::boundingRect).sorted((rec1, rec2) -> {\n            if(rec1.y < rec2.y) {\n                return -1;\n            }\n            if(rec1.y == rec2.y) {\n                if(rec1.width < rec2.width) {\n                    return 1;\n                }\n                if(rec1.height < rec2.height) {\n                    return 1;\n                }\n            }\n            return 1;\n        }).collect(Collectors.toList());\n        List<Rect> rects = new ArrayList<>();\n        for(Rect rect: sortedRects) {\n            if (!canMergeInner(rects, rect)) {\n                rects.add(rect);\n            }\n        }\n        return rects;\n    }\n\n    /**\n     * 判断当前 rect 的长宽高是否在范围内, x.y都在范围内，且x+width和 y+height都在范围内则能合并.\n     * @param rects 矩形集合\n     * @param rect 对比矩形\n     * @return 是否可merge\n     */\n    private boolean canMergeInner(List<Rect> rects, Rect rect) {\n        return rects.stream()\n                .anyMatch(rect1 -> rect1.x <= rect.x && rect1.y <= rect.y &&\n                        rect1.x+rect1.width >= rect.x + rect.width && rect1.y+rect1.height > rect.y+rect.height);\n    }\n\n    private void releaseMat(Mat imgMat) {\n        if (imgMat != null) {\n            imgMat.release();\n        }\n    }\n}\n```\n\n#### 得到答题区的选择项目\n\n通过 openCV 对答题区的二值、膨胀、canny 之后确定填图区域，并计算他与边的差值处于选项之间的差值确定是填涂的第几个答案。\n\n```java\n@Slf4j\npublic class RecognizeShadow {\n\n    private final static double[] MAINQ_PECENT = new double[]{0.0197d, 0.0388d, 0.0116d};\n    private final static double[] SUBQ_PECENT = new double[]{0.0205d, 0.0403d, 0.0120d};\n    /**\n     * 小问题的选项区占答题区的百分占比.\n     */\n    private double subPercent;\n    /**\n     * 大问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */\n    private double[] mainqPercent;\n    /**\n     * 小问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */\n    private double[] subqPercent;\n\n    public RecognizeShadow() {\n        this.subPercent = 0.88d;\n        this.mainqPercent = MAINQ_PECENT;\n        this.subqPercent = SUBQ_PECENT;\n    }\n\n    public RecognizeShadow(double subPercent, double[] mainqPercent, double[] subqPercent) {\n        if (mainqPercent.length != 3 || subqPercent.length != 3) {\n            throw new IllegalArgumentException(\"选项区的百分比必须是3个。num_0，第一个选项到竖线占选项区的百分比。\"\n                    + \"num_1，选项占选项区的百分比。num_2，选项之间占选项区的百分比。\");\n        }\n        this.subPercent = subPercent;\n        this.mainqPercent = mainqPercent;\n        this.subqPercent = subqPercent;\n    }\n    /**\n     *\n     * @param qPercent\n     * @return\n     */\n    public static double[] parseQPercent(String qPercent) {\n        qPercent = qPercent.replace(\"[\", \"\").replace(\"]\", \"\");\n        String[] percents = qPercent.split(\",\");\n        if (percents.length != 3) {\n            throw new IllegalArgumentException(\",字符长度不为3， 不符合要求\");\n        }\n        return new double[]{Double.parseDouble(percents[0]), Double.parseDouble(percents[1]), Double.parseDouble(percents[2])};\n    }\n\n\n    /**\n     * 识别阴影，并定位.\n     * @param answerAreas 阴影\n     * @param filePath 文件路径\n     * @return 结果识别\n     */\n    public List<String> recognizeShadow(List<AnswerArea> answerAreas, String filePath) {\n        return answerAreas.stream()\n                .map(answerArea -> {\n                    Mat splitMat = null;\n                    Mat noiseMat = null;\n                    Mat erodeMat = null;\n                    Mat dilateMat = null;\n                    Mat edgeMat = null;\n                    Mat contourMat = null;\n                    Mat optionMat = null;\n                    Mat areaMat = answerArea.getAreaMat();\n                    try {\n                        splitMat = new Mat();\n                        // 二值化\n                        Imgproc.threshold(areaMat, splitMat, 0, 255, Imgproc.THRESH_OTSU | Imgproc.THRESH_BINARY_INV);\n                        // 获取选项区域\n                        Option option = optionArea(splitMat);\n                        noiseMat = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(8, 8));\n                        erodeMat = new Mat();\n                        optionMat = option.getOptionMat();\n                        Imgproc.erode(optionMat, erodeMat, noiseMat);\n                        dilateMat = new Mat();\n                        // 膨胀\n                        Imgproc.dilate(erodeMat, dilateMat, noiseMat);\n                        edgeMat = new Mat();\n                        // canny\n                        Imgproc.Canny(dilateMat, edgeMat, 50, 150);\n                        List<MatOfPoint> chapter = new ArrayList<>();\n                        contourMat = new Mat();\n                        Imgproc.findContours(edgeMat, chapter, contourMat, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);\n                        if (log.isDebugEnabled()) {\n                            Imgproc.drawContours(optionMat, chapter, -1, new Scalar(0, 0, 255), 1);\n                            MatUtil.saveToTempFile(option.getOptionMat(), filePath, \"shadow\");\n                        }\n                        return calcAnswer(chapter, option, answerArea.getTitle());\n                    }finally {\n                        MatUtil.releaseMat(optionMat);\n                        MatUtil.releaseMat(splitMat);\n                        MatUtil.releaseMat(noiseMat);\n                        MatUtil.releaseMat(erodeMat);\n                        MatUtil.releaseMat(dilateMat);\n                        MatUtil.releaseMat(edgeMat);\n                        MatUtil.releaseMat(contourMat);\n                        MatUtil.releaseMat(areaMat);\n                    }\n                }).filter(StringUtils::isNotBlank).collect(Collectors.toList());\n    }\n\n\n\n    /**\n     * 通过选项的偏移量计算答案位置.\n     * @param chapter 被填涂的MatOfPoint\n     * @param option 选项区情况\n     * @param answerTitle 答题目\n     * @return 答题结果\n     */\n    private String calcAnswer(List<MatOfPoint> chapter, Option option, String answerTitle) {\n        double[] optionalPer = option.optionPercent < subPercent ? subqPercent: mainqPercent;\n        double optionAllWidth = option.getOptionWidth();\n        double optionAllHeight = option.getOptionHeight();\n        double leftGrapWidth = optionAllWidth * optionalPer[0];\n        double ansWidth = optionAllWidth * optionalPer[1];\n        double ansGapWidth = optionAllWidth * optionalPer[2];\n        double preAnsWidth = ansWidth + ansGapWidth;\n        // 最小填涂覆盖宽度.\n        double minMatchWidth = ansWidth * 0.6;\n        List<SingleAnswerArea> ttAnsAreas = convert(chapter);\n        int lineCount = (int)Math.round(( optionAllWidth -leftGrapWidth) /preAnsWidth);\n        String answer = ttAnsAreas.stream().map(ttAnsArea -> {\n            double yStart = ttAnsArea.getYStart();\n            double height = ttAnsArea.getHeight();\n            // 小于最小的填涂覆盖宽度则认为是无效的填涂.\n            if (ttAnsArea.getWidth() < minMatchWidth) {\n                log.warn(\"{} ttAnsArea:{}宽度{} 小于{}，无效填涂\", answerTitle, ttAnsArea, ttAnsArea.getWidth(), minMatchWidth);\n                return 0;\n            }\n            // 算出的跳过选项，此处使用 四舍五入 原则.\n            int skipXCount = (int)Math.round(((ttAnsArea.getXStart() -leftGrapWidth) /preAnsWidth));\n            skipXCount++;\n            if (yStart > optionAllHeight * 0.5 && height < optionAllHeight * 0.25) {\n                skipXCount += lineCount;\n            }\n            if (skipXCount < 10) {\n                return skipXCount;\n            }\n            // 认为大于 9 的是以A-Z标记，所以选项不超过 35 个选项.\n            return skipXCount + 55;\n        }).filter(num -> num > 0).sorted().distinct().map(num -> {\n            if (num < 10) {\n                return String.valueOf(num);\n            }\n            return String.valueOf((char)num.intValue());\n        }).collect(Collectors.joining(\",\"));\n        return MessageFormat.format(\"题号:{0}，答案:{1}\",\n                StringUtils.replaceIgnoreCase(answerTitle, \" \", \"\"), answer);\n    }\n\n    /**\n     * 从MatOfPoint多个点，转换为 minX->maxX,minY->maxY.\n     * @param chapters chapters\n     * @return SingleAnswerArea集合.\n     */\n    private List<SingleAnswerArea> convert(List<MatOfPoint> chapters) {\n        return chapters.stream().map(chapter -> {\n            List<Point> points = chapter.toList();\n            double xStart = 0;\n            double xEnd = 0;\n            double yStart = 0;\n            double yEnd = 0;\n            for (Point point: points) {\n                double x = point.x;\n                double y = point.y;\n                if (xStart == 0) {\n                    xStart = x;\n                    yStart = y;\n                }\n                if (x > xEnd) {\n                    xEnd = x;\n                } else if (x < xStart) {\n                    xStart = x;\n                }\n\n                if (y > yEnd) {\n                    yEnd = y;\n                } else if (y < yStart) {\n                    yStart = y;\n                }\n            }\n            return new SingleAnswerArea(xStart, xEnd, yStart, yEnd);\n        })\n                .sorted(Comparator.comparing(SingleAnswerArea::getYStart)\n                        .thenComparing(SingleAnswerArea::getHeight)\n                        .thenComparing(SingleAnswerArea::getXStart)).collect(Collectors.toList());\n    }\n\n    @Getter\n    @Setter\n    @AllArgsConstructor\n    @ToString\n    private class SingleAnswerArea {\n\n        private double xStart;\n\n        private double xEnd;\n\n        private double yStart;\n\n        private double yEnd;\n\n        public double getWidth() {\n            return xEnd - xStart;\n        }\n\n        public double getHeight() {\n            return yEnd - yStart;\n        }\n    }\n\n    /**\n     * 确定答题区中选项区域与答题区的宽度占比，用以确定是大题还是小题，且后续的每个选项的占比也会因为大题、小题而不同.\n     * @param srcMat 答题区，二值化后的Mat\n     * @return {@link Option}\n     */\n    private Option optionArea(Mat srcMat) {\n        List<MatOfPoint> chapter2 = new ArrayList<>();\n        Mat contourMat = new Mat();\n        Imgproc.findContours(srcMat, chapter2, contourMat, Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);\n\n        Map<Double, List<MatOfPoint>> pointGroup = chapter2.stream().collect(Collectors.groupingBy(matOfPoint -> {\n            List<Point> points = matOfPoint.toList().stream().sorted(Comparator.comparing(point -> point.x)).collect(Collectors.toList());\n            double minPoint = points.get(0).x;\n            double maxPoint = points.get(points.size()-1).x;\n            return Math.abs(maxPoint - minPoint);\n        }));\n\n        double maxWidth = 0.0d;\n        double optionWidth = 0.0d;\n        MatOfPoint maxMatPoint = null;\n        MatOfPoint optionMatPoint = null;\n        for(Entry<Double, List<MatOfPoint>> pointEntry: pointGroup.entrySet()) {\n            Double width = pointEntry.getKey();\n            List<MatOfPoint> matOfPoints = pointEntry.getValue();\n            if(maxWidth == 0.0d) {\n                maxWidth = width;\n                maxMatPoint = matOfPoints.get(0);\n            } else if(maxWidth < width) {\n                optionWidth = maxWidth;\n                maxWidth = width;\n                optionMatPoint = maxMatPoint;\n                maxMatPoint = matOfPoints.get(0);\n            }\n        }\n        Imgproc.drawContours(srcMat, Collections.singletonList(optionMatPoint), -1, new Scalar(0, 0, 255), 2);\n        List<Point> xPoints = optionMatPoint.toList().stream().sorted(Comparator.comparing(point -> point.x)).collect(Collectors.toList());\n        List<Point> yPoints = optionMatPoint.toList().stream().sorted(Comparator.comparing(point -> point.y)).collect(Collectors.toList());\n        Range colRange = new Range(((Double)xPoints.get(0).x).intValue(), ((Double)xPoints.get(xPoints.size()-1).x).intValue());\n        Range rowRange = new Range(((Double)yPoints.get(0).y).intValue(), ((Double)yPoints.get(yPoints.size()-1).y).intValue());\n        Mat optionMat = new Mat(srcMat, rowRange, colRange);\n        contourMat.release();\n        double optionHeight = yPoints.get(yPoints.size()-1).y - yPoints.get(0).y;\n        return new Option(optionMat, optionWidth/maxWidth, optionWidth, optionHeight);\n    }\n\n    /**\n     * 选项区的结构.\n     */\n    @Getter\n    @Setter\n    @AllArgsConstructor\n    private class Option {\n\n        /**\n         * 选项Mat.\n         */\n        private Mat optionMat;\n        /**\n         * 选项区/答题区占比.\n         */\n        private double optionPercent;\n        /**\n         * 选项区宽度.\n         */\n        private double optionWidth;\n\n        private double optionHeight;\n    }\n}\n\n```\n\n","slug":"java-通过-OpenCV-提取答题卡选择题答案","published":1,"updated":"2024-02-24T01:31:10.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clu285vm400034tc07meq5ysx","content":"<h3 id=\"答题卡识别技术选型\"><a href=\"#答题卡识别技术选型\" class=\"headerlink\" title=\"答题卡识别技术选型\"></a>答题卡识别技术选型</h3><p>OpenCV（Open Source Computer Vision Library） 是一种开源计算机视觉库，它提供了一些用于处理图像和视频的工具和算法。用于处理图片的纠偏。</p>\n<p>tesseract-OCR，识别印刷体文字是轻量的 OCR 引擎。用于识别问题号。测试过 tesseract 的 java SDK <code>tess4j</code> 识别结果和直接使用 tesseract 命令识别结果不一样。最终我选了直接使用 tesseract 命令识别。</p>\n<h3 id=\"答题卡识别前置约束\"><a href=\"#答题卡识别前置约束\" class=\"headerlink\" title=\"答题卡识别前置约束\"></a>答题卡识别前置约束</h3><ol>\n<li><p>需要以固定的格式设置问卷</p>\n<ul>\n<li><p>答题区的宽度大于问题的宽度</p>\n<p><img src=\"/images/2024/opencv_tesseract_answerarea/openCV_1.jpg\" alt=\"openCV_1.jpg\"></p>\n</li>\n<li><p>需要固定部分宽度的比例</p>\n<p><img src=\"/images/2024/opencv_tesseract_answerarea/openCV_2.png\" alt=\"openCV_2.jpg\"></p>\n</li>\n</ul>\n</li>\n<li><p>识别结果的好坏都和扫描图片的质量有关，建议是灰度 300dpi 扫描设置</p>\n</li>\n</ol>\n<h3 id=\"答题卡识别关键代码\"><a href=\"#答题卡识别关键代码\" class=\"headerlink\" title=\"答题卡识别关键代码\"></a>答题卡识别关键代码</h3><h4 id=\"获取答题区题号识别\"><a href=\"#获取答题区题号识别\" class=\"headerlink\" title=\"获取答题区题号识别\"></a>获取答题区题号识别</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">getAnsTitles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AnswerTitleException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> outPath <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outPath <span class=\"token operator\">+</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> command <span class=\"token operator\">=</span> <span class=\"token string\">\"tesseract \"</span> <span class=\"token operator\">+</span>  filePath <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> outPath <span class=\"token operator\">+</span><span class=\"token string\">\" -l chi_sim \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Process</span> ps <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 读取文件</span>\n            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLines</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">-&gt;</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} result: {}\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Pattern</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"答\\\\s*\\\\d+\\\\s*[-]*\\\\s*\\\\d*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Matcher</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> ansTitles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} result pattern: {}\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ansTitles<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerTitleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} answer-title-identify\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteQuietly</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"通过-openCV-截取答题卡区域\"><a href=\"#通过-openCV-截取答题卡区域\" class=\"headerlink\" title=\"通过 openCV 截取答题卡区域\"></a>通过 openCV 截取答题卡区域</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Core</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NATIVE_LIBRARY_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">recognize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\">// 获取识别内容，确定答题号</span>\n            <span class=\"token class-name\">Mat</span> srcImgMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Mat</span> cvtMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Mat</span> correctImgMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> ansTitles <span class=\"token operator\">=</span> <span class=\"token function\">getAnsTitles</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                srcImgMat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgcodecs</span><span class=\"token punctuation\">.</span><span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cvtMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 灰度</span>\n                <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>srcImgMat<span class=\"token punctuation\">,</span> cvtMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BGR2GRAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 矫正</span>\n                correctImgMat <span class=\"token operator\">=</span> imgCorrector<span class=\"token punctuation\">.</span><span class=\"token function\">correct</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 截答题区</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mat</span><span class=\"token punctuation\">&gt;</span></span> answerAreaMats <span class=\"token operator\">=</span> answerCutter<span class=\"token punctuation\">.</span><span class=\"token function\">answerCut</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> answerAreaMats<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    answerAreaMats<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>ansAreaMat <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>ansAreaMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerCutException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"答题数和答案区数量不一致，跳过\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnswerArea</span><span class=\"token punctuation\">&gt;</span></span> answerAreas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    answerAreas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerArea</span><span class=\"token punctuation\">(</span>ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> answerAreaMats<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> answerAreas<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CorrectException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">AnswerCutException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">AnswerTitleException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:{}\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>srcImgMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnswerArea</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Mat</span> areaMat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"图片纠偏\"><a href=\"#图片纠偏\" class=\"headerlink\" title=\"图片纠偏\"></a>图片纠偏</h5><p>图片纠偏，纠正角度超过 10 度的图片。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImgCorrector</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Scalar</span> <span class=\"token constant\">WHITE_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANNY_KERNEL_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANNY_THRESHOLD</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANNY_THRESHOLD_RATIO</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRAIGHT_PINGJIAO</span> <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRAIGHT_ZHIJIAO</span> <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_300</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_200</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_100</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 矫正图片，当倾斜度超过 10 度都是不合理的矫正.\n     * 保持原长宽，不适合大角度纠偏.\n     * @param cvtMat 灰度Mat\n     * @param filePath 文件路径\n     * @return 矫正后的Mat\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mat</span> <span class=\"token function\">correct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> cvtMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CorrectException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mat</span> mat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span> degree <span class=\"token operator\">=</span> <span class=\"token function\">calcSlope</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 当倾斜度超过 10 度都是不合理的矫正.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">10.0d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} correct, if degree({}) is zero or bigger than 10 then no correct.\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> cvtMat<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} correct, degree({})\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Mat</span> correctImgMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> length <span class=\"token operator\">=</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 确定翻转切入点</span>\n            <span class=\"token class-name\">Point</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRotationMatrix2D</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">warpAffine</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">,</span> correctImgMat<span class=\"token punctuation\">,</span> mat<span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTER_LINEAR</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WHITE_PAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToTempFile</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"correct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> correctImgMat<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorrectException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * 计算图片倾斜角度.\n     * 1. Canny 提取图像边缘检测\n     * 2. HoughLines 提取直线\n     * @param cvtMat 灰度图片mat\n     * @return 倾斜角度\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calcSlope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> cvtMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mat</span> cannyMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> blurMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> straightLineMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            blurMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 3x3 内核降噪</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">,</span> blurMat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// canny 射线</span>\n            cannyMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>Canny</span><span class=\"token punctuation\">(</span>blurMat<span class=\"token punctuation\">,</span> cannyMat<span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">CANNY_THRESHOLD</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANNY_THRESHOLD</span> <span class=\"token operator\">*</span> <span class=\"token constant\">CANNY_THRESHOLD_RATIO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANNY_KERNEL_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// houghLines</span>\n            straightLineMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>HoughLines</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">,</span> straightLineMat<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token constant\">STRAIGHT_PINGJIAO</span><span class=\"token punctuation\">,</span>  <span class=\"token constant\">THRESHOLD_300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {</span>\n<span class=\"token comment\">//                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_300);</span>\n<span class=\"token comment\">//            }</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>HoughLines</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">,</span> straightLineMat<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token constant\">STRAIGHT_PINGJIAO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>HoughLines</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">,</span> straightLineMat<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token constant\">STRAIGHT_PINGJIAO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没检测到直线，不纠偏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">float</span> average <span class=\"token operator\">=</span> <span class=\"token function\">getLineSlopeAvg</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> average <span class=\"token operator\">/</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token constant\">STRAIGHT_PINGJIAO</span> <span class=\"token operator\">-</span> <span class=\"token constant\">STRAIGHT_ZHIJIAO</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>blurMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getLineSlopeAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> xIsX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vec <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> isX <span class=\"token operator\">=</span> <span class=\"token function\">isX</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> indexs <span class=\"token operator\">=</span> xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>isX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>isX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                indexs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>isX<span class=\"token punctuation\">,</span> indexs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            indexs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> xIndexs <span class=\"token operator\">=</span> xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> yIndexs <span class=\"token operator\">=</span> xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> countX <span class=\"token operator\">=</span> xIndexs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> countY <span class=\"token operator\">=</span> yIndexs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">&gt;</span></span> indexs <span class=\"token operator\">=</span> countX <span class=\"token operator\">&gt;</span> countY <span class=\"token operator\">?</span> xIndexs <span class=\"token operator\">:</span> countX <span class=\"token operator\">&lt;</span> countY <span class=\"token operator\">?</span> yIndexs<span class=\"token operator\">:</span> <span class=\"token class-name\">ListUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>xIndexs<span class=\"token punctuation\">,</span> yIndexs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">:</span> indexs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vec <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> theta <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> theta<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token operator\">/</span>indexs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> rho <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> theta <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> x0 <span class=\"token operator\">=</span> a<span class=\"token operator\">*</span>rho<span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">=</span> b<span class=\"token operator\">*</span>rho<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point1x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point1y <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point2x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point2y <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>point1x<span class=\"token operator\">-</span> point2x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>point1y <span class=\"token operator\">-</span> point2y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> imgMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imgMat <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            imgMat<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"截取答题卡区域\"><a href=\"#截取答题卡区域\" class=\"headerlink\" title=\"截取答题卡区域\"></a>截取答题卡区域</h5><p>答题卡区域与问题区域的区别是在设置的答题卡区长度大于问题区域。这样就能简单的截取到答题卡区</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImgAnswerCutter</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_MAX</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRUCTURE_WIDTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRUCTURE_HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">POINT_HALF</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">POINT_EIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">POINT_NIGHTEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.98</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">FILTER_HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">DOUBLE</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 答题区切割.\n     * @param correctImgMat 矫正后的图片Mat\n     * @param filePath 文件路径\n     * @return 答题区切割后的 Mat 集合\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mat</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">answerCut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> correctImgMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AnswerCutException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Mat</span> binaryMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> noiseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> reverseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            binaryMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 二值化 Mat</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> binaryMat<span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_MAX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_MAX</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_OTSU</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_BINARY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 定义膨化 Mat</span>\n            noiseMat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MORPH_RECT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STRUCTURE_WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STRUCTURE_HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">erode</span><span class=\"token punctuation\">(</span>binaryMat<span class=\"token punctuation\">,</span> erodeMat<span class=\"token punctuation\">,</span> noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            reverseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 反值化 Mat</span>\n            <span class=\"token class-name\">Core</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitwise_not</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">,</span> reverseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> matOfPoints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 发现矩形条件</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>reverseMat<span class=\"token punctuation\">,</span> matOfPoints<span class=\"token punctuation\">,</span> edgeMat<span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RETR_LIST</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CHAIN_APPROX_SIMPLE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 合并小矩形</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> rects <span class=\"token operator\">=</span> <span class=\"token function\">mergeInnerAndTransRect</span><span class=\"token punctuation\">(</span>matOfPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 过滤掉离谱的矩形</span>\n            <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">filterAnswerRect</span><span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>rect <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Mat</span> ansAreaMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToTempFile</span><span class=\"token punctuation\">(</span>ansAreaMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"anscut-\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">return</span> ansAreaMat<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerCutException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>binaryMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>reverseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>edgeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 只留下长度最长的举证，兼容 2% 的宽度差.\n     * @param rects 矩阵集合.\n     * @return 最长的.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">filterAnswerRect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> rects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span>  maxHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> secHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        rects <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">NumberUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> rect<span class=\"token operator\">:</span> rects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxWidth <span class=\"token operator\">&lt;</span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&amp;&amp;</span> rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&gt;</span> maxHeight <span class=\"token operator\">*</span> <span class=\"token constant\">POINT_HALF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                maxWidth <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxHeight <span class=\"token operator\">&lt;</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                secHeight <span class=\"token operator\">=</span> maxHeight<span class=\"token punctuation\">;</span>\n                maxHeight <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>minHeight <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> minHeight <span class=\"token operator\">&gt;</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token operator\">&gt;</span> <span class=\"token constant\">FILTER_HEIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                minHeight <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 处理同一页有多行答案和单行答案,仅处理同一也只有一个多行多个单行的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxHeight <span class=\"token operator\">&gt;</span> minHeight <span class=\"token operator\">*</span> <span class=\"token constant\">DOUBLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxHeight <span class=\"token operator\">=</span> secHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> maxHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> finalMaxWidth <span class=\"token operator\">=</span> maxWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>rect <span class=\"token operator\">-&gt;</span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&gt;</span> finalMaxWidth <span class=\"token operator\">*</span> <span class=\"token constant\">POINT_NIGHTEIGHT</span> <span class=\"token operator\">&amp;&amp;</span>\n                        rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&gt;</span> height <span class=\"token operator\">*</span> <span class=\"token constant\">POINT_EIGHT</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">NumberUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     * 转型为 MatOfPoint,合并inner的小矩形.\n     * @param matOfPoints mat 点.\n     * @return 矩形集合.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">mergeInnerAndTransRect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> matOfPoints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> sortedRects <span class=\"token operator\">=</span> matOfPoints<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Imgproc</span><span class=\"token operator\">::</span><span class=\"token function\">boundingRect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">,</span> rec2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;</span> rec2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> rec2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;</span> rec2<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&lt;</span> rec2<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> rect<span class=\"token operator\">:</span> sortedRects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canMergeInner</span><span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> rects<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 判断当前 rect 的长宽高是否在范围内, x.y都在范围内，且x+width和 y+height都在范围内则能合并.\n     * @param rects 矩形集合\n     * @param rect 对比矩形\n     * @return 是否可merge\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canMergeInner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">&gt;</span></span> rects<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rect</span> rect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>rect1 <span class=\"token operator\">-&gt;</span> rect1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> rect1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;=</span> rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span>\n                        rect1<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>rect1<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&gt;=</span> rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&amp;&amp;</span> rect1<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>rect1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&gt;</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> imgMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imgMat <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            imgMat<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"得到答题区的选择项目\"><a href=\"#得到答题区的选择项目\" class=\"headerlink\" title=\"得到答题区的选择项目\"></a>得到答题区的选择项目</h4><p>通过 openCV 对答题区的二值、膨胀、canny 之后确定填图区域，并计算他与边的差值处于选项之间的差值确定是填涂的第几个答案。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecognizeShadow</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">MAINQ_PECENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.0197d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0388d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0116d</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">SUBQ_PECENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.0205d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0403d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0120d</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 小问题的选项区占答题区的百分占比.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> subPercent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 大问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mainqPercent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 小问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subqPercent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RecognizeShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subPercent <span class=\"token operator\">=</span> <span class=\"token number\">0.88d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainqPercent <span class=\"token operator\">=</span> <span class=\"token constant\">MAINQ_PECENT</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subqPercent <span class=\"token operator\">=</span> <span class=\"token constant\">SUBQ_PECENT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RecognizeShadow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> subPercent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mainqPercent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subqPercent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mainqPercent<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> subqPercent<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选项区的百分比必须是3个。num_0，第一个选项到竖线占选项区的百分比。\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"num_1，选项占选项区的百分比。num_2，选项之间占选项区的百分比。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subPercent <span class=\"token operator\">=</span> subPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainqPercent <span class=\"token operator\">=</span> mainqPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subqPercent <span class=\"token operator\">=</span> subqPercent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/**\n     *\n     * @param qPercent\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">parseQPercent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> qPercent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        qPercent <span class=\"token operator\">=</span> qPercent<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> percents <span class=\"token operator\">=</span> qPercent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",字符长度不为3， 不符合要求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\">/**\n     * 识别阴影，并定位.\n     * @param answerAreas 阴影\n     * @param filePath 文件路径\n     * @return 结果识别\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">recognizeShadow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnswerArea</span><span class=\"token punctuation\">&gt;</span></span> answerAreas<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> answerAreas<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>answerArea <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Mat</span> splitMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> noiseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> dilateMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> contourMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> optionMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> areaMat <span class=\"token operator\">=</span> answerArea<span class=\"token punctuation\">.</span><span class=\"token function\">getAreaMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        splitMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 二值化</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>areaMat<span class=\"token punctuation\">,</span> splitMat<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_OTSU</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_BINARY_INV</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 获取选项区域</span>\n                        <span class=\"token class-name\">Option</span> option <span class=\"token operator\">=</span> <span class=\"token function\">optionArea</span><span class=\"token punctuation\">(</span>splitMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        noiseMat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MORPH_RECT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        optionMat <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">erode</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">,</span> erodeMat<span class=\"token punctuation\">,</span> noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        dilateMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 膨胀</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">dilate</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">,</span> dilateMat<span class=\"token punctuation\">,</span> noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// canny</span>\n                        <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>Canny</span><span class=\"token punctuation\">(</span>dilateMat<span class=\"token punctuation\">,</span> edgeMat<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> chapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        contourMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>edgeMat<span class=\"token punctuation\">,</span> chapter<span class=\"token punctuation\">,</span> contourMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RETR_EXTERNAL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CHAIN_APPROX_SIMPLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawContours</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">,</span> chapter<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToTempFile</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shadow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">calcAnswer</span><span class=\"token punctuation\">(</span>chapter<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">,</span> answerArea<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>splitMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>dilateMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>edgeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>contourMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>areaMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token operator\">::</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token comment\">/**\n     * 通过选项的偏移量计算答案位置.\n     * @param chapter 被填涂的MatOfPoint\n     * @param option 选项区情况\n     * @param answerTitle 答题目\n     * @return 答题结果\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">calcAnswer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> chapter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Option</span> option<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> answerTitle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> optionalPer <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span>optionPercent <span class=\"token operator\">&lt;</span> subPercent <span class=\"token operator\">?</span> subqPercent<span class=\"token operator\">:</span> mainqPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionAllWidth <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionAllHeight <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> leftGrapWidth <span class=\"token operator\">=</span> optionAllWidth <span class=\"token operator\">*</span> optionalPer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> ansWidth <span class=\"token operator\">=</span> optionAllWidth <span class=\"token operator\">*</span> optionalPer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> ansGapWidth <span class=\"token operator\">=</span> optionAllWidth <span class=\"token operator\">*</span> optionalPer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> preAnsWidth <span class=\"token operator\">=</span> ansWidth <span class=\"token operator\">+</span> ansGapWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 最小填涂覆盖宽度.</span>\n        <span class=\"token keyword\">double</span> minMatchWidth <span class=\"token operator\">=</span> ansWidth <span class=\"token operator\">*</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token punctuation\">&gt;</span></span> ttAnsAreas <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>chapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lineCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> optionAllWidth <span class=\"token operator\">-</span>leftGrapWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>preAnsWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> answer <span class=\"token operator\">=</span> ttAnsAreas<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>ttAnsArea <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span> yStart <span class=\"token operator\">=</span> ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getYStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> height <span class=\"token operator\">=</span> ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 小于最小的填涂覆盖宽度则认为是无效的填涂.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> minMatchWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} ttAnsArea:{}宽度{} 小于{}，无效填涂\"</span><span class=\"token punctuation\">,</span> answerTitle<span class=\"token punctuation\">,</span> ttAnsArea<span class=\"token punctuation\">,</span> ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> minMatchWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 算出的跳过选项，此处使用 四舍五入 原则.</span>\n            <span class=\"token keyword\">int</span> skipXCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getXStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>leftGrapWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>preAnsWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            skipXCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yStart <span class=\"token operator\">&gt;</span> optionAllHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">&amp;&amp;</span> height <span class=\"token operator\">&lt;</span> optionAllHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                skipXCount <span class=\"token operator\">+=</span> lineCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skipXCount <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> skipXCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 认为大于 9 的是以A-Z标记，所以选项不超过 35 个选项.</span>\n            <span class=\"token keyword\">return</span> skipXCount <span class=\"token operator\">+</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-&gt;</span> num <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"题号:{0}，答案:{1}\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceIgnoreCase</span><span class=\"token punctuation\">(</span>answerTitle<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 从MatOfPoint多个点，转换为 minX-&gt;maxX,minY-&gt;maxY.\n     * @param chapters chapters\n     * @return SingleAnswerArea集合.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> chapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> chapters<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>chapter <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">&gt;</span></span> points <span class=\"token operator\">=</span> chapter<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> xStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> xEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> yStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> yEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> point<span class=\"token operator\">:</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xStart <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    xStart <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                    yStart <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> xEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    xEnd <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> xStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    xStart <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&gt;</span> yEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    yEnd <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> yStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    yStart <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleAnswerArea</span><span class=\"token punctuation\">(</span>xStart<span class=\"token punctuation\">,</span> xEnd<span class=\"token punctuation\">,</span> yStart<span class=\"token punctuation\">,</span> yEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token operator\">::</span><span class=\"token function\">getYStart</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">thenComparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token operator\">::</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">thenComparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token operator\">::</span><span class=\"token function\">getXStart</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@Setter</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@ToString</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleAnswerArea</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> xStart<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> xEnd<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> yStart<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> yEnd<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> xEnd <span class=\"token operator\">-</span> xStart<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> yEnd <span class=\"token operator\">-</span> yStart<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 确定答题区中选项区域与答题区的宽度占比，用以确定是大题还是小题，且后续的每个选项的占比也会因为大题、小题而不同.\n     * @param srcMat 答题区，二值化后的Mat\n     * @return {@link Option}\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Option</span> <span class=\"token function\">optionArea</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> srcMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> chapter2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> contourMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>srcMat<span class=\"token punctuation\">,</span> chapter2<span class=\"token punctuation\">,</span> contourMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RETR_LIST</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CHAIN_APPROX_SIMPLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> pointGroup <span class=\"token operator\">=</span> chapter2<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>matOfPoint <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">&gt;</span></span> points <span class=\"token operator\">=</span> matOfPoint<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">-&gt;</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> minPoint <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> maxPoint <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>maxPoint <span class=\"token operator\">-</span> minPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">double</span> maxWidth <span class=\"token operator\">=</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionWidth <span class=\"token operator\">=</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MatOfPoint</span> maxMatPoint <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MatOfPoint</span> optionMatPoint <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> pointEntry<span class=\"token operator\">:</span> pointGroup<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Double</span> width <span class=\"token operator\">=</span> pointEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">&gt;</span></span> matOfPoints <span class=\"token operator\">=</span> pointEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxWidth <span class=\"token operator\">==</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                maxWidth <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n                maxMatPoint <span class=\"token operator\">=</span> matOfPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxWidth <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                optionWidth <span class=\"token operator\">=</span> maxWidth<span class=\"token punctuation\">;</span>\n                maxWidth <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n                optionMatPoint <span class=\"token operator\">=</span> maxMatPoint<span class=\"token punctuation\">;</span>\n                maxMatPoint <span class=\"token operator\">=</span> matOfPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawContours</span><span class=\"token punctuation\">(</span>srcMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>optionMatPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">&gt;</span></span> xPoints <span class=\"token operator\">=</span> optionMatPoint<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">-&gt;</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">&gt;</span></span> yPoints <span class=\"token operator\">=</span> optionMatPoint<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">-&gt;</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Range</span> colRange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>xPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>xPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>xPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Range</span> rowRange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> optionMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span>srcMat<span class=\"token punctuation\">,</span> rowRange<span class=\"token punctuation\">,</span> colRange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contourMat<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionHeight <span class=\"token operator\">=</span> yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Option</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">,</span> optionWidth<span class=\"token operator\">/</span>maxWidth<span class=\"token punctuation\">,</span> optionWidth<span class=\"token punctuation\">,</span> optionHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * 选项区的结构.\n     */</span>\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@Setter</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Option</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">/**\n         * 选项Mat.\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Mat</span> optionMat<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * 选项区/答题区占比.\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> optionPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * 选项区宽度.\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> optionWidth<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> optionHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"答题卡识别技术选型\"><a href=\"#答题卡识别技术选型\" class=\"headerlink\" title=\"答题卡识别技术选型\"></a>答题卡识别技术选型</h3><p>OpenCV（Open Source Computer Vision Library） 是一种开源计算机视觉库，它提供了一些用于处理图像和视频的工具和算法。用于处理图片的纠偏。</p>\n<p>tesseract-OCR，识别印刷体文字是轻量的 OCR 引擎。用于识别问题号。测试过 tesseract 的 java SDK <code>tess4j</code> 识别结果和直接使用 tesseract 命令识别结果不一样。最终我选了直接使用 tesseract 命令识别。</p>\n<h3 id=\"答题卡识别前置约束\"><a href=\"#答题卡识别前置约束\" class=\"headerlink\" title=\"答题卡识别前置约束\"></a>答题卡识别前置约束</h3><ol>\n<li><p>需要以固定的格式设置问卷</p>\n<ul>\n<li><p>答题区的宽度大于问题的宽度</p>\n<p><img src=\"/images/2024/opencv_tesseract_answerarea/openCV_1.jpg\" alt=\"openCV_1.jpg\"></p>\n</li>\n<li><p>需要固定部分宽度的比例</p>\n<p><img src=\"/images/2024/opencv_tesseract_answerarea/openCV_2.png\" alt=\"openCV_2.jpg\"></p>\n</li>\n</ul>\n</li>\n<li><p>识别结果的好坏都和扫描图片的质量有关，建议是灰度 300dpi 扫描设置</p>\n</li>\n</ol>\n<h3 id=\"答题卡识别关键代码\"><a href=\"#答题卡识别关键代码\" class=\"headerlink\" title=\"答题卡识别关键代码\"></a>答题卡识别关键代码</h3><h4 id=\"获取答题区题号识别\"><a href=\"#获取答题区题号识别\" class=\"headerlink\" title=\"获取答题区题号识别\"></a>获取答题区题号识别</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAnsTitles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AnswerTitleException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> outPath <span class=\"token operator\">=</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>outPath <span class=\"token operator\">+</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Runtime</span> runtime <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> command <span class=\"token operator\">=</span> <span class=\"token string\">\"tesseract \"</span> <span class=\"token operator\">+</span>  filePath <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> outPath <span class=\"token operator\">+</span><span class=\"token string\">\" -l chi_sim \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Process</span> ps <span class=\"token operator\">=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ps<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 读取文件</span>\n            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readLines</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">-></span> line<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; result: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Pattern</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"答\\\\s*\\\\d+\\\\s*[-]*\\\\s*\\\\d*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Matcher</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ansTitles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; result pattern: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ansTitles<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerTitleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125; answer-title-identify\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">FileUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteQuietly</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"通过-openCV-截取答题卡区域\"><a href=\"#通过-openCV-截取答题卡区域\" class=\"headerlink\" title=\"通过 openCV 截取答题卡区域\"></a>通过 openCV 截取答题卡区域</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadLibrary</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Core</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NATIVE_LIBRARY_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">recognize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n         <span class=\"token comment\">// 获取识别内容，确定答题号</span>\n            <span class=\"token class-name\">Mat</span> srcImgMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Mat</span> cvtMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Mat</span> correctImgMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ansTitles <span class=\"token operator\">=</span> <span class=\"token function\">getAnsTitles</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                srcImgMat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgcodecs</span><span class=\"token punctuation\">.</span><span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                cvtMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 灰度</span>\n                <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>srcImgMat<span class=\"token punctuation\">,</span> cvtMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COLOR_BGR2GRAY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 矫正</span>\n                correctImgMat <span class=\"token operator\">=</span> imgCorrector<span class=\"token punctuation\">.</span><span class=\"token function\">correct</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 截答题区</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mat</span><span class=\"token punctuation\">></span></span> answerAreaMats <span class=\"token operator\">=</span> answerCutter<span class=\"token punctuation\">.</span><span class=\"token function\">answerCut</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> answerAreaMats<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    answerAreaMats<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>ansAreaMat <span class=\"token operator\">-></span> <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>ansAreaMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerCutException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"答题数和答案区数量不一致，跳过\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnswerArea</span><span class=\"token punctuation\">></span></span> answerAreas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    answerAreas<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerArea</span><span class=\"token punctuation\">(</span>ansTitles<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> answerAreaMats<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> answerAreas<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CorrectException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">AnswerCutException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">AnswerTitleException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>srcImgMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnswerArea</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Mat</span> areaMat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"图片纠偏\"><a href=\"#图片纠偏\" class=\"headerlink\" title=\"图片纠偏\"></a>图片纠偏</h5><p>图片纠偏，纠正角度超过 10 度的图片。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImgCorrector</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Scalar</span> <span class=\"token constant\">WHITE_PAGE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANNY_KERNEL_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANNY_THRESHOLD</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANNY_THRESHOLD_RATIO</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRAIGHT_PINGJIAO</span> <span class=\"token operator\">=</span> <span class=\"token number\">180</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRAIGHT_ZHIJIAO</span> <span class=\"token operator\">=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_300</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_200</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_100</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * 矫正图片，当倾斜度超过 10 度都是不合理的矫正.\n     * 保持原长宽，不适合大角度纠偏.\n     * @param cvtMat 灰度Mat\n     * @param filePath 文件路径\n     * @return 矫正后的Mat\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mat</span> <span class=\"token function\">correct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> cvtMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CorrectException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Mat</span> mat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span> degree <span class=\"token operator\">=</span> <span class=\"token function\">calcSlope</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 当倾斜度超过 10 度都是不合理的矫正.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">10.0d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; correct, if degree(&#123;&#125;) is zero or bigger than 10 then no correct.\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> cvtMat<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; correct, degree(&#123;&#125;)\"</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Mat</span> correctImgMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> length <span class=\"token operator\">=</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> cvtMat<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 确定翻转切入点</span>\n            <span class=\"token class-name\">Point</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRotationMatrix2D</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">warpAffine</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">,</span> correctImgMat<span class=\"token punctuation\">,</span> mat<span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTER_LINEAR</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WHITE_PAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToTempFile</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"correct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> correctImgMat<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorrectException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * 计算图片倾斜角度.\n     * 1. Canny 提取图像边缘检测\n     * 2. HoughLines 提取直线\n     * @param cvtMat 灰度图片mat\n     * @return 倾斜角度\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calcSlope</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> cvtMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Mat</span> cannyMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> blurMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> straightLineMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            blurMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 3x3 内核降噪</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>cvtMat<span class=\"token punctuation\">,</span> blurMat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// canny 射线</span>\n            cannyMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>Canny</span><span class=\"token punctuation\">(</span>blurMat<span class=\"token punctuation\">,</span> cannyMat<span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">CANNY_THRESHOLD</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANNY_THRESHOLD</span> <span class=\"token operator\">*</span> <span class=\"token constant\">CANNY_THRESHOLD_RATIO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CANNY_KERNEL_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// houghLines</span>\n            straightLineMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>HoughLines</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">,</span> straightLineMat<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token constant\">STRAIGHT_PINGJIAO</span><span class=\"token punctuation\">,</span>  <span class=\"token constant\">THRESHOLD_300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) &#123;</span>\n<span class=\"token comment\">//                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_300);</span>\n<span class=\"token comment\">//            &#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>HoughLines</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">,</span> straightLineMat<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token constant\">STRAIGHT_PINGJIAO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>HoughLines</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">,</span> straightLineMat<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token operator\">/</span><span class=\"token constant\">STRAIGHT_PINGJIAO</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> straightLineMat<span class=\"token punctuation\">.</span><span class=\"token function\">cols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没检测到直线，不纠偏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">float</span> average <span class=\"token operator\">=</span> <span class=\"token function\">getLineSlopeAvg</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> average <span class=\"token operator\">/</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token constant\">STRAIGHT_PINGJIAO</span> <span class=\"token operator\">-</span> <span class=\"token constant\">STRAIGHT_ZHIJIAO</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>blurMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>cannyMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>straightLineMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getLineSlopeAvg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> lines<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> xIsX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">rows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vec <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> isX <span class=\"token operator\">=</span> <span class=\"token function\">isX</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> indexs <span class=\"token operator\">=</span> xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>isX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>isX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                indexs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>isX<span class=\"token punctuation\">,</span> indexs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            indexs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> xIndexs <span class=\"token operator\">=</span> xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> yIndexs <span class=\"token operator\">=</span> xIsX<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> countX <span class=\"token operator\">=</span> xIndexs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> countY <span class=\"token operator\">=</span> yIndexs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> indexs <span class=\"token operator\">=</span> countX <span class=\"token operator\">></span> countY <span class=\"token operator\">?</span> xIndexs <span class=\"token operator\">:</span> countX <span class=\"token operator\">&lt;</span> countY <span class=\"token operator\">?</span> yIndexs<span class=\"token operator\">:</span> <span class=\"token class-name\">ListUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>xIndexs<span class=\"token punctuation\">,</span> yIndexs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token operator\">:</span> indexs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vec <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> theta <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+=</span> theta<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token operator\">/</span>indexs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">double</span> rho <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> theta <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> x0 <span class=\"token operator\">=</span> a<span class=\"token operator\">*</span>rho<span class=\"token punctuation\">,</span> y0 <span class=\"token operator\">=</span> b<span class=\"token operator\">*</span>rho<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point1x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point1y <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point2x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>x0 <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> point2y <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>y0 <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>point1x<span class=\"token operator\">-</span> point2x<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>point1y <span class=\"token operator\">-</span> point2y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> imgMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imgMat <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            imgMat<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"截取答题卡区域\"><a href=\"#截取答题卡区域\" class=\"headerlink\" title=\"截取答题卡区域\"></a>截取答题卡区域</h5><p>答题卡区域与问题区域的区别是在设置的答题卡区长度大于问题区域。这样就能简单的截取到答题卡区</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImgAnswerCutter</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">THRESHOLD_MAX</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRUCTURE_WIDTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STRUCTURE_HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">POINT_HALF</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">POINT_EIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">POINT_NIGHTEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.98</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">FILTER_HEIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> <span class=\"token constant\">DOUBLE</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 答题区切割.\n     * @param correctImgMat 矫正后的图片Mat\n     * @param filePath 文件路径\n     * @return 答题区切割后的 Mat 集合\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Mat</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">answerCut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> correctImgMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">AnswerCutException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Mat</span> binaryMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> noiseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> reverseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            binaryMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 二值化 Mat</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> binaryMat<span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_MAX</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THRESHOLD_MAX</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_OTSU</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_BINARY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 定义膨化 Mat</span>\n            noiseMat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MORPH_RECT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token constant\">STRUCTURE_WIDTH</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STRUCTURE_HEIGHT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">erode</span><span class=\"token punctuation\">(</span>binaryMat<span class=\"token punctuation\">,</span> erodeMat<span class=\"token punctuation\">,</span> noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            reverseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 反值化 Mat</span>\n            <span class=\"token class-name\">Core</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitwise_not</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">,</span> reverseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> matOfPoints <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 发现矩形条件</span>\n            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>reverseMat<span class=\"token punctuation\">,</span> matOfPoints<span class=\"token punctuation\">,</span> edgeMat<span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RETR_LIST</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CHAIN_APPROX_SIMPLE</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 合并小矩形</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> rects <span class=\"token operator\">=</span> <span class=\"token function\">mergeInnerAndTransRect</span><span class=\"token punctuation\">(</span>matOfPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 过滤掉离谱的矩形</span>\n            <span class=\"token class-name\">AtomicInteger</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">filterAnswerRect</span><span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>rect <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">Mat</span> ansAreaMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span>correctImgMat<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToTempFile</span><span class=\"token punctuation\">(</span>ansAreaMat<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"anscut-\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">return</span> ansAreaMat<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnswerCutException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>binaryMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>reverseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>edgeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 只留下长度最长的举证，兼容 2% 的宽度差.\n     * @param rects 矩阵集合.\n     * @return 最长的.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filterAnswerRect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> rects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> maxWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span>  maxHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> secHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        rects <span class=\"token operator\">=</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NumberUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> rect<span class=\"token operator\">:</span> rects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxWidth <span class=\"token operator\">&lt;</span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&amp;&amp;</span> rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> maxHeight <span class=\"token operator\">*</span> <span class=\"token constant\">POINT_HALF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                maxWidth <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxHeight <span class=\"token operator\">&lt;</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                secHeight <span class=\"token operator\">=</span> maxHeight<span class=\"token punctuation\">;</span>\n                maxHeight <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>minHeight <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> minHeight <span class=\"token operator\">></span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token operator\">></span> <span class=\"token constant\">FILTER_HEIGHT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                minHeight <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">// 处理同一页有多行答案和单行答案,仅处理同一也只有一个多行多个单行的情况</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxHeight <span class=\"token operator\">></span> minHeight <span class=\"token operator\">*</span> <span class=\"token constant\">DOUBLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            maxHeight <span class=\"token operator\">=</span> secHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> maxHeight<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> finalMaxWidth <span class=\"token operator\">=</span> maxWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>rect <span class=\"token operator\">-></span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">></span> finalMaxWidth <span class=\"token operator\">*</span> <span class=\"token constant\">POINT_NIGHTEIGHT</span> <span class=\"token operator\">&amp;&amp;</span>\n                        rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> height <span class=\"token operator\">*</span> <span class=\"token constant\">POINT_EIGHT</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">NumberUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>rect1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rect2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n     * 转型为 MatOfPoint,合并inner的小矩形.\n     * @param matOfPoints mat 点.\n     * @return 矩形集合.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">mergeInnerAndTransRect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> matOfPoints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> sortedRects <span class=\"token operator\">=</span> matOfPoints<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Imgproc</span><span class=\"token operator\">::</span><span class=\"token function\">boundingRect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">,</span> rec2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;</span> rec2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> rec2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;</span> rec2<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rec1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&lt;</span> rec2<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> rects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Rect</span> rect<span class=\"token operator\">:</span> sortedRects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canMergeInner</span><span class=\"token punctuation\">(</span>rects<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                rects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> rects<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 判断当前 rect 的长宽高是否在范围内, x.y都在范围内，且x+width和 y+height都在范围内则能合并.\n     * @param rects 矩形集合\n     * @param rect 对比矩形\n     * @return 是否可merge\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canMergeInner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Rect</span><span class=\"token punctuation\">></span></span> rects<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rect</span> rect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> rects<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>rect1 <span class=\"token operator\">-></span> rect1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> rect1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;=</span> rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&amp;&amp;</span>\n                        rect1<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span>rect1<span class=\"token punctuation\">.</span>width <span class=\"token operator\">>=</span> rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&amp;&amp;</span> rect1<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>rect1<span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> rect<span class=\"token punctuation\">.</span>y<span class=\"token operator\">+</span>rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> imgMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>imgMat <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            imgMat<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"得到答题区的选择项目\"><a href=\"#得到答题区的选择项目\" class=\"headerlink\" title=\"得到答题区的选择项目\"></a>得到答题区的选择项目</h4><p>通过 openCV 对答题区的二值、膨胀、canny 之后确定填图区域，并计算他与边的差值处于选项之间的差值确定是填涂的第几个答案。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RecognizeShadow</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">MAINQ_PECENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.0197d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0388d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0116d</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">SUBQ_PECENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0.0205d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0403d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0120d</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 小问题的选项区占答题区的百分占比.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> subPercent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 大问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mainqPercent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/**\n     * 小问题的三个占比，\n     * num_0,第一个选项到竖线占选项区的百分比\n     * num_1,选项占选项区的百分比\n     * num_2,选项之间占选项区的百分比\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subqPercent<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RecognizeShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subPercent <span class=\"token operator\">=</span> <span class=\"token number\">0.88d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainqPercent <span class=\"token operator\">=</span> <span class=\"token constant\">MAINQ_PECENT</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subqPercent <span class=\"token operator\">=</span> <span class=\"token constant\">SUBQ_PECENT</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RecognizeShadow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> subPercent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mainqPercent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> subqPercent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mainqPercent<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> subqPercent<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选项区的百分比必须是3个。num_0，第一个选项到竖线占选项区的百分比。\"</span>\n                    <span class=\"token operator\">+</span> <span class=\"token string\">\"num_1，选项占选项区的百分比。num_2，选项之间占选项区的百分比。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subPercent <span class=\"token operator\">=</span> subPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainqPercent <span class=\"token operator\">=</span> mainqPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subqPercent <span class=\"token operator\">=</span> subqPercent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">/**\n     *\n     * @param qPercent\n     * @return\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">parseQPercent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> qPercent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        qPercent <span class=\"token operator\">=</span> qPercent<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> percents <span class=\"token operator\">=</span> qPercent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",字符长度不为3， 不符合要求\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseDouble</span><span class=\"token punctuation\">(</span>percents<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\">/**\n     * 识别阴影，并定位.\n     * @param answerAreas 阴影\n     * @param filePath 文件路径\n     * @return 结果识别\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">recognizeShadow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnswerArea</span><span class=\"token punctuation\">></span></span> answerAreas<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> filePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> answerAreas<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>answerArea <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token class-name\">Mat</span> splitMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> noiseMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> dilateMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> contourMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> optionMat <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">Mat</span> areaMat <span class=\"token operator\">=</span> answerArea<span class=\"token punctuation\">.</span><span class=\"token function\">getAreaMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                        splitMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 二值化</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span>areaMat<span class=\"token punctuation\">,</span> splitMat<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_OTSU</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">THRESH_BINARY_INV</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 获取选项区域</span>\n                        <span class=\"token class-name\">Option</span> option <span class=\"token operator\">=</span> <span class=\"token function\">optionArea</span><span class=\"token punctuation\">(</span>splitMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        noiseMat <span class=\"token operator\">=</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStructuringElement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MORPH_RECT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        erodeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        optionMat <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">erode</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">,</span> erodeMat<span class=\"token punctuation\">,</span> noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        dilateMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// 膨胀</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">dilate</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">,</span> dilateMat<span class=\"token punctuation\">,</span> noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        edgeMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\">// canny</span>\n                        <span class=\"token class-name\">Imgproc<span class=\"token punctuation\">.</span>Canny</span><span class=\"token punctuation\">(</span>dilateMat<span class=\"token punctuation\">,</span> edgeMat<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> chapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        contourMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>edgeMat<span class=\"token punctuation\">,</span> chapter<span class=\"token punctuation\">,</span> contourMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RETR_EXTERNAL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CHAIN_APPROX_SIMPLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawContours</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">,</span> chapter<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveToTempFile</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionMat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token string\">\"shadow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">calcAnswer</span><span class=\"token punctuation\">(</span>chapter<span class=\"token punctuation\">,</span> option<span class=\"token punctuation\">,</span> answerArea<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>splitMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>noiseMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>erodeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>dilateMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>edgeMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>contourMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\">MatUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">releaseMat</span><span class=\"token punctuation\">(</span>areaMat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token operator\">::</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n\n    <span class=\"token comment\">/**\n     * 通过选项的偏移量计算答案位置.\n     * @param chapter 被填涂的MatOfPoint\n     * @param option 选项区情况\n     * @param answerTitle 答题目\n     * @return 答题结果\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">calcAnswer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> chapter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Option</span> option<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> answerTitle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> optionalPer <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span>optionPercent <span class=\"token operator\">&lt;</span> subPercent <span class=\"token operator\">?</span> subqPercent<span class=\"token operator\">:</span> mainqPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionAllWidth <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionAllHeight <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span><span class=\"token function\">getOptionHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> leftGrapWidth <span class=\"token operator\">=</span> optionAllWidth <span class=\"token operator\">*</span> optionalPer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> ansWidth <span class=\"token operator\">=</span> optionAllWidth <span class=\"token operator\">*</span> optionalPer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> ansGapWidth <span class=\"token operator\">=</span> optionAllWidth <span class=\"token operator\">*</span> optionalPer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> preAnsWidth <span class=\"token operator\">=</span> ansWidth <span class=\"token operator\">+</span> ansGapWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 最小填涂覆盖宽度.</span>\n        <span class=\"token keyword\">double</span> minMatchWidth <span class=\"token operator\">=</span> ansWidth <span class=\"token operator\">*</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token punctuation\">></span></span> ttAnsAreas <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>chapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lineCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> optionAllWidth <span class=\"token operator\">-</span>leftGrapWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>preAnsWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> answer <span class=\"token operator\">=</span> ttAnsAreas<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>ttAnsArea <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span> yStart <span class=\"token operator\">=</span> ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getYStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> height <span class=\"token operator\">=</span> ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 小于最小的填涂覆盖宽度则认为是无效的填涂.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> minMatchWidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125; ttAnsArea:&#123;&#125;宽度&#123;&#125; 小于&#123;&#125;，无效填涂\"</span><span class=\"token punctuation\">,</span> answerTitle<span class=\"token punctuation\">,</span> ttAnsArea<span class=\"token punctuation\">,</span> ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> minMatchWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 算出的跳过选项，此处使用 四舍五入 原则.</span>\n            <span class=\"token keyword\">int</span> skipXCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ttAnsArea<span class=\"token punctuation\">.</span><span class=\"token function\">getXStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>leftGrapWidth<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span>preAnsWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            skipXCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>yStart <span class=\"token operator\">></span> optionAllHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">&amp;&amp;</span> height <span class=\"token operator\">&lt;</span> optionAllHeight <span class=\"token operator\">*</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                skipXCount <span class=\"token operator\">+=</span> lineCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skipXCount <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> skipXCount<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">// 认为大于 9 的是以A-Z标记，所以选项不超过 35 个选项.</span>\n            <span class=\"token keyword\">return</span> skipXCount <span class=\"token operator\">+</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-></span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"题号:&#123;0&#125;，答案:&#123;1&#125;\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceIgnoreCase</span><span class=\"token punctuation\">(</span>answerTitle<span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 从MatOfPoint多个点，转换为 minX->maxX,minY->maxY.\n     * @param chapters chapters\n     * @return SingleAnswerArea集合.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> chapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> chapters<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>chapter <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span> points <span class=\"token operator\">=</span> chapter<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> xStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> xEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> yStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> yEnd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> point<span class=\"token operator\">:</span> points<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xStart <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    xStart <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                    yStart <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> xEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    xEnd <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> xStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    xStart <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">></span> yEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    yEnd <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> yStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    yStart <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleAnswerArea</span><span class=\"token punctuation\">(</span>xStart<span class=\"token punctuation\">,</span> xEnd<span class=\"token punctuation\">,</span> yStart<span class=\"token punctuation\">,</span> yEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token operator\">::</span><span class=\"token function\">getYStart</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">thenComparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token operator\">::</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">thenComparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SingleAnswerArea</span><span class=\"token operator\">::</span><span class=\"token function\">getXStart</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@Setter</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@ToString</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleAnswerArea</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> xStart<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> xEnd<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> yStart<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> yEnd<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> xEnd <span class=\"token operator\">-</span> xStart<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> yEnd <span class=\"token operator\">-</span> yStart<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 确定答题区中选项区域与答题区的宽度占比，用以确定是大题还是小题，且后续的每个选项的占比也会因为大题、小题而不同.\n     * @param srcMat 答题区，二值化后的Mat\n     * @return &#123;@link Option&#125;\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Option</span> <span class=\"token function\">optionArea</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mat</span> srcMat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> chapter2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> contourMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>srcMat<span class=\"token punctuation\">,</span> chapter2<span class=\"token punctuation\">,</span> contourMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RETR_LIST</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CHAIN_APPROX_SIMPLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> pointGroup <span class=\"token operator\">=</span> chapter2<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>matOfPoint <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span> points <span class=\"token operator\">=</span> matOfPoint<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">-></span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> minPoint <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> maxPoint <span class=\"token operator\">=</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>points<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>maxPoint <span class=\"token operator\">-</span> minPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">double</span> maxWidth <span class=\"token operator\">=</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionWidth <span class=\"token operator\">=</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MatOfPoint</span> maxMatPoint <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MatOfPoint</span> optionMatPoint <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> pointEntry<span class=\"token operator\">:</span> pointGroup<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Double</span> width <span class=\"token operator\">=</span> pointEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MatOfPoint</span><span class=\"token punctuation\">></span></span> matOfPoints <span class=\"token operator\">=</span> pointEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxWidth <span class=\"token operator\">==</span> <span class=\"token number\">0.0d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                maxWidth <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n                maxMatPoint <span class=\"token operator\">=</span> matOfPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>maxWidth <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                optionWidth <span class=\"token operator\">=</span> maxWidth<span class=\"token punctuation\">;</span>\n                maxWidth <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n                optionMatPoint <span class=\"token operator\">=</span> maxMatPoint<span class=\"token punctuation\">;</span>\n                maxMatPoint <span class=\"token operator\">=</span> matOfPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Imgproc</span><span class=\"token punctuation\">.</span><span class=\"token function\">drawContours</span><span class=\"token punctuation\">(</span>srcMat<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>optionMatPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scalar</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span> xPoints <span class=\"token operator\">=</span> optionMatPoint<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">-></span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Point</span><span class=\"token punctuation\">></span></span> yPoints <span class=\"token operator\">=</span> optionMatPoint<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span>point <span class=\"token operator\">-></span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Range</span> colRange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>xPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>xPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>xPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Range</span> rowRange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Range</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">)</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Mat</span> optionMat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mat</span><span class=\"token punctuation\">(</span>srcMat<span class=\"token punctuation\">,</span> rowRange<span class=\"token punctuation\">,</span> colRange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contourMat<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> optionHeight <span class=\"token operator\">=</span> yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> yPoints<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Option</span><span class=\"token punctuation\">(</span>optionMat<span class=\"token punctuation\">,</span> optionWidth<span class=\"token operator\">/</span>maxWidth<span class=\"token punctuation\">,</span> optionWidth<span class=\"token punctuation\">,</span> optionHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * 选项区的结构.\n     */</span>\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@Setter</span>\n    <span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Option</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">/**\n         * 选项Mat.\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Mat</span> optionMat<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * 选项区/答题区占比.\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> optionPercent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/**\n         * 选项区宽度.\n         */</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> optionWidth<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> optionHeight<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"出乎意外的 \"系统宕机\"","date":"2024-02-22T15:14:53.000Z","_content":"出乎意外的 “系统宕机”\n\n我徒弟一个刚毕业的精神小伙，近期处理现场提交的工单问题。驻地告诉他系统每天在用户下班后会宕机，需要他每天上班启动系统。徒弟没什么经验，就让线程调大内存参数 `-Xmx 16g -Xms 8g` 观察。第二天，驻地还是告诉他依旧是用户下班后会宕机。徒弟也是摸不到头脑找到了我。\n\n![](images/2024/notinmind_systemexit/3641708614410_.pic.jpg)\n\n### 出乎意外，情理之中\n\n首先，确定是否内存 OOM 导致宕机。在图片中是通过 `-XX:+HeapDumpOnOutOfMemoryError` 启动 OOM 是生成堆 dump 文件， OOM 是堆 dump 文件 `-XX:HeapDumpPath` 配置指定位置。 是否存在堆 dump 文件。**驻地回答说目录下没有任何文件。难道 OOM 启动配置是后加的？**\n\n![](images/2024/notinmind_systemexit/cocall61708612842881.jpg)\n\n其次，让驻地通过 linux 系统日志看能不能找到 OOM 的蛛丝马迹。随即发去搜索命令 `dmesg | grep -i -B10 'killed process'` 和 `grep -i 'killed process' /var/log/messages` 。**驻地回答说没有任何内容输出。**\n\n再想想驻地说的话，都是下班后宕机，下班后系统业务并不多，想再看看系统日志，确定什么时候宕机的。结果发现直到 `23:59:59` 都有数据库链接的测试日志。那是凌晨宕机？但是日志已经被驻地手动启动覆盖了。:star2: **手动启动** ，回看图片驻地的启动方式是命令行里输入 `java -jar xxx.jar &` 这是同步启动非后台启动，如果出现窗口失效断开连接的话，是会让程序走正常系统退出，驻地发回来的退出系统照片能匹配上。\n\n最终，让他修改成 `nohup java -jar xxx.jar > /dev/null 2>&1 &` 启动，第二天不再出现所谓的 \"系统宕机\"。\n\n![](images/2024/notinmind_systemexit/12.png)","source":"_posts/出乎意外的-系统宕机.md","raw":"---\ntitle: 出乎意外的 \"系统宕机\"\ndate: 2024-02-22 23:14:53\ncategories:\n- code\ntags:\n- code\n- exception\n---\n出乎意外的 “系统宕机”\n\n我徒弟一个刚毕业的精神小伙，近期处理现场提交的工单问题。驻地告诉他系统每天在用户下班后会宕机，需要他每天上班启动系统。徒弟没什么经验，就让线程调大内存参数 `-Xmx 16g -Xms 8g` 观察。第二天，驻地还是告诉他依旧是用户下班后会宕机。徒弟也是摸不到头脑找到了我。\n\n![](images/2024/notinmind_systemexit/3641708614410_.pic.jpg)\n\n### 出乎意外，情理之中\n\n首先，确定是否内存 OOM 导致宕机。在图片中是通过 `-XX:+HeapDumpOnOutOfMemoryError` 启动 OOM 是生成堆 dump 文件， OOM 是堆 dump 文件 `-XX:HeapDumpPath` 配置指定位置。 是否存在堆 dump 文件。**驻地回答说目录下没有任何文件。难道 OOM 启动配置是后加的？**\n\n![](images/2024/notinmind_systemexit/cocall61708612842881.jpg)\n\n其次，让驻地通过 linux 系统日志看能不能找到 OOM 的蛛丝马迹。随即发去搜索命令 `dmesg | grep -i -B10 'killed process'` 和 `grep -i 'killed process' /var/log/messages` 。**驻地回答说没有任何内容输出。**\n\n再想想驻地说的话，都是下班后宕机，下班后系统业务并不多，想再看看系统日志，确定什么时候宕机的。结果发现直到 `23:59:59` 都有数据库链接的测试日志。那是凌晨宕机？但是日志已经被驻地手动启动覆盖了。:star2: **手动启动** ，回看图片驻地的启动方式是命令行里输入 `java -jar xxx.jar &` 这是同步启动非后台启动，如果出现窗口失效断开连接的话，是会让程序走正常系统退出，驻地发回来的退出系统照片能匹配上。\n\n最终，让他修改成 `nohup java -jar xxx.jar > /dev/null 2>&1 &` 启动，第二天不再出现所谓的 \"系统宕机\"。\n\n![](images/2024/notinmind_systemexit/12.png)","slug":"出乎意外的-系统宕机","published":1,"updated":"2024-02-22T15:27:48.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clu285vm700064tc07iorc59y","content":"<p>出乎意外的 “系统宕机”</p>\n<p>我徒弟一个刚毕业的精神小伙，近期处理现场提交的工单问题。驻地告诉他系统每天在用户下班后会宕机，需要他每天上班启动系统。徒弟没什么经验，就让线程调大内存参数 <code>-Xmx 16g -Xms 8g</code> 观察。第二天，驻地还是告诉他依旧是用户下班后会宕机。徒弟也是摸不到头脑找到了我。</p>\n<p><img src=\"/images/2024/notinmind_systemexit/3641708614410_.pic.jpg\"></p>\n<h3 id=\"出乎意外，情理之中\"><a href=\"#出乎意外，情理之中\" class=\"headerlink\" title=\"出乎意外，情理之中\"></a>出乎意外，情理之中</h3><p>首先，确定是否内存 OOM 导致宕机。在图片中是通过 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 启动 OOM 是生成堆 dump 文件， OOM 是堆 dump 文件 <code>-XX:HeapDumpPath</code> 配置指定位置。 是否存在堆 dump 文件。<strong>驻地回答说目录下没有任何文件。难道 OOM 启动配置是后加的？</strong></p>\n<p><img src=\"/images/2024/notinmind_systemexit/cocall61708612842881.jpg\"></p>\n<p>其次，让驻地通过 linux 系统日志看能不能找到 OOM 的蛛丝马迹。随即发去搜索命令 <code>dmesg | grep -i -B10 'killed process'</code> 和 <code>grep -i 'killed process' /var/log/messages</code> 。<strong>驻地回答说没有任何内容输出。</strong></p>\n<p>再想想驻地说的话，都是下班后宕机，下班后系统业务并不多，想再看看系统日志，确定什么时候宕机的。结果发现直到 <code>23:59:59</code> 都有数据库链接的测试日志。那是凌晨宕机？但是日志已经被驻地手动启动覆盖了。<span class=\"github-emoji\"><span>🌟</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> <strong>手动启动</strong> ，回看图片驻地的启动方式是命令行里输入 <code>java -jar xxx.jar &amp;</code> 这是同步启动非后台启动，如果出现窗口失效断开连接的话，是会让程序走正常系统退出，驻地发回来的退出系统照片能匹配上。</p>\n<p>最终，让他修改成 <code>nohup java -jar xxx.jar &gt; /dev/null 2&gt;&amp;1 &amp;</code> 启动，第二天不再出现所谓的 “系统宕机”。</p>\n<p><img src=\"/images/2024/notinmind_systemexit/12.png\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<p>出乎意外的 “系统宕机”</p>\n<p>我徒弟一个刚毕业的精神小伙，近期处理现场提交的工单问题。驻地告诉他系统每天在用户下班后会宕机，需要他每天上班启动系统。徒弟没什么经验，就让线程调大内存参数 <code>-Xmx 16g -Xms 8g</code> 观察。第二天，驻地还是告诉他依旧是用户下班后会宕机。徒弟也是摸不到头脑找到了我。</p>\n<p><img src=\"/images/2024/notinmind_systemexit/3641708614410_.pic.jpg\"></p>\n<h3 id=\"出乎意外，情理之中\"><a href=\"#出乎意外，情理之中\" class=\"headerlink\" title=\"出乎意外，情理之中\"></a>出乎意外，情理之中</h3><p>首先，确定是否内存 OOM 导致宕机。在图片中是通过 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 启动 OOM 是生成堆 dump 文件， OOM 是堆 dump 文件 <code>-XX:HeapDumpPath</code> 配置指定位置。 是否存在堆 dump 文件。<strong>驻地回答说目录下没有任何文件。难道 OOM 启动配置是后加的？</strong></p>\n<p><img src=\"/images/2024/notinmind_systemexit/cocall61708612842881.jpg\"></p>\n<p>其次，让驻地通过 linux 系统日志看能不能找到 OOM 的蛛丝马迹。随即发去搜索命令 <code>dmesg | grep -i -B10 &#39;killed process&#39;</code> 和 <code>grep -i &#39;killed process&#39; /var/log/messages</code> 。<strong>驻地回答说没有任何内容输出。</strong></p>\n<p>再想想驻地说的话，都是下班后宕机，下班后系统业务并不多，想再看看系统日志，确定什么时候宕机的。结果发现直到 <code>23:59:59</code> 都有数据库链接的测试日志。那是凌晨宕机？但是日志已经被驻地手动启动覆盖了。:star2: <strong>手动启动</strong> ，回看图片驻地的启动方式是命令行里输入 <code>java -jar xxx.jar &amp;</code> 这是同步启动非后台启动，如果出现窗口失效断开连接的话，是会让程序走正常系统退出，驻地发回来的退出系统照片能匹配上。</p>\n<p>最终，让他修改成 <code>nohup java -jar xxx.jar &gt; /dev/null 2&gt;&amp;1 &amp;</code> 启动，第二天不再出现所谓的 “系统宕机”。</p>\n<p><img src=\"/images/2024/notinmind_systemexit/12.png\"></p>\n"},{"title":"怎么实现 mybatis 自动设置创建时间更新时间","date":"2024-02-18T04:41:41.000Z","_content":"## 怎么实现 mybatis 自动设置创建时间更新时间\n\n#### :mag: 相对流行方案弊端\n\nmybatis 提供 Interceptor 接口以插件方式提供扩展能力。互联网上大都是对数据表映射类对象中关于时间属性设置当前时间的解决方案。但这种方法无法解决 mapper.xml 写更新 SQL 或 @XXXProvider 拼 SQL 的方式插入或更新数据表。但是依托于数据表映射类本身没有问题，因为需要知道创建时间和更新时间对应的数据库字段信息，这是光拦截到 SQL 而无法判断时间相关的字段是否存在并赋值。\n\n#### :mortar_board: 更好的选择\n\n如果你项目中使用了 mybatis-plus 组件，恭喜你做这个决定你足够明智。 mybatis-plus 提供 MetaObjectHandler 抽象类实现公共字段自动写入能力。其大体思路是针对 @XXXProvider 拼 SQL 时将实体中标记需要自动填充的字段拼入 SQL 中，通过 metaObjectHandler 对实体属性字段填充相应值，最后带有自动填充字段的 PrepareStatement SQL 插入/更新数据表数据。\n\n但，项目上使用自写 `BaseMapper<E,ID>` 接口和 @XXXProvider 注解实现 BaseMapperSqlSourceBuilder 类完成 SQL 拼接。但未提供对公用字段自动写入能力。\n\n#### :mushroom: 在现状上解决问题\n\nInterceptor 拦截的位置是执行 SQL 之前，也就是 `@Signature(type = Executor.class, method=\"update\", args={MappedStatement.class, Object.class})` ，在 SQL 里拼接时间的字段和字段值。字段值可以直接设置的 `now()` 数据库函数，缺点是强依赖数据库。这个缺点需要通过 driver 信息找确切的数据库类型，切换时间函数。时间字段信息则是通过 `BaseMapper<E,ID>` 获取泛型 E 指向的 Class，通过属性名匹配（没办法老代码只能匹配属性名）或注解匹配找到时间字段。SQL 里拼接时间字段是通过包装 SqlSource 通过 `SqlSource#getBoundSql` 替换最终 SQL 和当前时间函数。\n\n- `mappedStatement#getId()`，id 的值对应类全路径，从这个类全路径获取类信息并确定 `BaseMapper<E,ID>` E 指向的泛型\n\n```java\n/**\n * 表的创建时间和更新时间会随着表的更新或插入行为进行赋值. 因为需要确定表中是否有创建时间或更新时间且确定时间字段名，所以需要使用的地方\n * 的 mapper 继承 {@link BaseMapper}<br>\n * 思路，从 BaseMapper 的泛型 T 获取实体类，从实体类里面解析出创建时间和更新时间字段对应的数据库字段名，这里创建时间和更新时间是通过名称\n * 匹配的，大小写不论包含匹配.针对插入行为会增加创建时间和更新时间，针对更新行为会更新更新时间.<br>\n * <lu>\n * <li>创建时间，dCjsj、cjsj、dtCjsj、dCjrq、cjrq、dtCjrq、createTime、dCreateTime、dtCreateTime</li>\n * <li>更新时间，dGxsj, gxsj, dtGxsj, dXgsj, xgsj, dtXgsj, dZhxgsj、zhxgsj、dtZhxgsj、updateTime、dUpdateTime、dtUpdateTime</li>\n * </lu>\n *\n * @author liulili\n * @date 2024/1/25 11:24\n */\n@Slf4j\n@Component\n@Intercepts(@Signature(type = Executor.class, method=\"update\", args={MappedStatement.class, Object.class}))\npublic class AutofillCreateOrUpdateTimeInterceptor implements Interceptor {\n\n    private final String[] CJSJ_COLUMN_NAMES = new String[] {\"cjsj\", \"dCjsj\", \"dtCjsj\", \"cjrq\", \"dCjrq\", \"dtCjrq\", \"createTime\", \"dCreateTime\", \"dtCreateTime\"};\n\n    private final String[] GXSJ_COLUMN_NAMES = new String[] {\"gxsj\", \"dGxsj\", \"dtGxsj\", \"xgsj\", \"dXgsj\", \"dtXgsj\", \"zhxgsj\", \"dZhxgsj\", \"dtZhxgsj\", \"updateTime\", \"dUpdateTime\", \"dtUpdateTime\"};\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        Object[] args = invocation.getArgs();\n        MappedStatement mappedStatement = (MappedStatement) args[0];\n        StatementType statement = mappedStatement.getStatementType();\n        if (statement == StatementType.CALLABLE) {\n            log.debug(\"【自动填充创建或修改时间】不支持在存储过程类型业务\");\n            return invocation.proceed();\n        }\n        SqlCommandType command = mappedStatement.getSqlCommandType();\n        String id = mappedStatement.getId();\n        String className = StringUtils.substring(id, 0, id.lastIndexOf(\".\"));\n        Class mapperClazz = null;\n        try {\n            mapperClazz = Class.forName(className);\n        } catch (Throwable e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作\", className, e);\n            } else if (log.isInfoEnabled()) {\n                log.info(\"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作\", className);\n            }\n            return invocation.proceed();\n        }\n        Class entityClazz = findEntityClazz(mapperClazz);\n        if (Objects.isNull(entityClazz)) {\n            log.debug(\"class[{}]非接口/未继承BaseMapper接口\", entityClazz);\n            return invocation.proceed();\n        }\n        CUTimeDTO cuTimeDTO = findCreateAndUpdateTimeColumn(entityClazz);\n        if (StringUtils.isBlank(cuTimeDTO.getUpdateTimeColumnName()) && StringUtils.isBlank(cuTimeDTO.getCreateTimeColumnName())) {\n            log.debug(\"class[{}]无匹配的创建时间和更新时间字段， 请参考 AutofillCreateOrUpdateTimeInterceptor#CJSJ_COLUMN_NAMES 和 AutofillCreateOrUpdateTimeInterceptor#GXSJ_COLUMN_NAMES\", entityClazz);\n            return invocation.proceed();\n        }\n        if (command == SqlCommandType.INSERT) {\n            autofillInsert(mappedStatement, args[1], entityClazz, cuTimeDTO);\n        } else if (command == SqlCommandType.UPDATE) {\n            autofillUpdate(mappedStatement, args[1], entityClazz, cuTimeDTO);\n        }\n        return invocation.proceed();\n    }\n\n    private void autofillUpdate(MappedStatement mappedStatement, Object param, Class entityClazz, CUTimeDTO cuTimeDTO) {\n        String updateTimeColumn = cuTimeDTO.getUpdateTimeColumnName();\n        if (StringUtils.isBlank(updateTimeColumn)) {\n            return;\n        }\n        BoundSql boundSql = mappedStatement.getBoundSql(param);\n        String sql = boundSql.getSql();\n        if (StringUtils.containsIgnoreCase(sql, updateTimeColumn)) {\n            autofillUTime(param, cuTimeDTO, entityClazz);\n            return;\n        }\n        SqlSource sqlSource = mappedStatement.getSqlSource();\n        SqlSource decoderSqlSource = new AutoFillUTimeUpdateSqlSource(sqlSource, updateTimeColumn, \"now()\");\n        BeanUtil.setProperty(mappedStatement, \"sqlSource\", decoderSqlSource);\n    }\n\n    private void autofillInsert(MappedStatement mappedStatement, Object param, Class entityClazz, CUTimeDTO cuTimeDTO) {\n        String createColumnName = cuTimeDTO.getCreateTimeColumnName();\n        String updateColumnName = cuTimeDTO.getUpdateTimeColumnName();\n        BoundSql boundSql = mappedStatement.getBoundSql(param);\n        String sql = boundSql.getSql();\n        List<String> addColumn = new ArrayList<>(2);\n        if (StringUtils.isNotBlank(createColumnName) && !StringUtils.containsIgnoreCase(sql, createColumnName)) {\n            addColumn.add(createColumnName);\n        }\n        if (StringUtils.isNotBlank(updateColumnName) && !StringUtils.containsIgnoreCase(sql, updateColumnName)) {\n            addColumn.add(updateColumnName);\n        }\n        if (CollectionUtils.isEmpty(addColumn)) {\n            autofillCUTime(param, cuTimeDTO, entityClazz);\n            return;\n        }\n        String columnName = addColumn.stream().collect(Collectors.joining(\",\"));\n        String columnValue = addColumn.stream().map(column -> \"now()\").collect(Collectors.joining(\",\"));\n        SqlSource sqlSource = mappedStatement.getSqlSource();\n        SqlSource decoderSqlSource = new AutoFillCUTimeInsertSqlSource(sqlSource, columnName, columnValue);\n        BeanUtil.setProperty(mappedStatement, \"sqlSource\", decoderSqlSource);\n    }\n\n    private void autofillCUTime(Object param, CUTimeDTO cuTimeDTO, Class entityClazz) {\n        if (Objects.isNull(param)) {\n            return;\n        }\n        if (param.getClass().isAssignableFrom(entityClazz)) {\n            Optional.ofNullable(cuTimeDTO.getCreateTimePropertyName())\n                    .ifPresent(createColumnName -> BeanUtil.setProperty(param, createColumnName, Calendar.getInstance().getTime()));\n            Optional.ofNullable(cuTimeDTO.getUpdateTimePropertyName())\n                    .ifPresent(updateColumnName -> BeanUtil.setProperty(param, updateColumnName, Calendar.getInstance().getTime()));\n            return;\n        }\n        if (param instanceof Collection) {\n            Collection paramColl = (Collection) param;\n            paramColl.stream().forEach(sparam -> autofillCUTime(sparam, cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param instanceof Map) {\n            Map paramMap = (Map) param;\n            Set<Map.Entry> entries = paramMap.entrySet();\n            entries.stream().forEach(entry -> autofillCUTime(entry.getValue(), cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param.getClass().isPrimitive() || param.getClass().isEnum()) {\n            return;\n        }\n        if (param.getClass().isArray()) {\n            Object[] paramArr = (Object[]) param;\n            Arrays.stream(paramArr).forEach(obj -> autofillCUTime(obj, cuTimeDTO, entityClazz));\n            return;\n        }\n        Field[] fields = param.getClass().getDeclaredFields();\n        Arrays.stream(fields).forEach(field -> {\n            Object property = null;\n            try {\n                property = BeanUtil.getProperty(param, field.getName());\n            } catch (Exception e) {\n                log.debug(\"param[{}]属性【{}】获取属性值失败\", param, field.getName(), e);\n            }\n            autofillCUTime(property, cuTimeDTO, entityClazz);\n        });\n    }\n\n    private void autofillUTime(Object param, CUTimeDTO cuTimeDTO, Class entityClazz) {\n        if (Objects.isNull(param) || param.getClass().isPrimitive() || param.getClass().isEnum()) {\n            return;\n        }\n        if (param.getClass().isAssignableFrom(entityClazz)) {\n            Optional.ofNullable(cuTimeDTO.getUpdateTimePropertyName()).ifPresent(updateColumnName -> BeanUtil.setProperty(param, updateColumnName, Calendar.getInstance().getTime()));\n            return;\n        }\n        if (param instanceof Collection) {\n            Collection paramColl = (Collection) param;\n            paramColl.stream().forEach(sparam -> autofillUTime(sparam, cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param instanceof Map) {\n            Map paramMap = (Map) param;\n            Set<Map.Entry> entries = paramMap.entrySet();\n            entries.stream().forEach(entry -> autofillUTime(entry.getValue(), cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param.getClass().isArray()) {\n            Object[] paramArr = (Object[]) param;\n            Arrays.stream(paramArr).forEach(obj -> autofillUTime(obj, cuTimeDTO, entityClazz));\n            return;\n        }\n        Field[] fields = param.getClass().getDeclaredFields();\n        Arrays.stream(fields).forEach(field -> {\n            Object property = null;\n            try {\n                property = BeanUtil.getProperty(param, field.getName());\n            } catch (Exception e) {\n                log.debug(\"param[{}]属性【{}】获取属性值失败\", param, field.getName(), e);\n            }\n            autofillUTime(property, cuTimeDTO, entityClazz);\n        });\n    }\n\n    private CUTimeDTO findCreateAndUpdateTimeColumn(Class entityClazz) {\n        Field[] fields = entityClazz.getDeclaredFields();\n        Map<String, Field> fieldMap = Arrays.stream(fields).collect(Collectors.toMap(Field::getName, field -> field));\n        Set<String> fieldKeys = fieldMap.keySet();\n        CUTimeDTO CUTimeDTO = new CUTimeDTO();\n        Optional<String> cjsjFieldNameOptional = fieldKeys.stream().filter(fieldKey -> Arrays.stream(CJSJ_COLUMN_NAMES)\n                .anyMatch(columnName -> StringUtils.equalsIgnoreCase(columnName, fieldKey))).findFirst();\n        cjsjFieldNameOptional.ifPresent(cjsjFieldName -> CUTimeDTO.setCreateTimePropertyName(cjsjFieldName));\n        CUTimeDTO.setCreateTimeColumnName(getColumnNameByColumnAnno(cjsjFieldNameOptional, fieldMap));\n        Optional<String> gxsjFieldNameOptional = fieldKeys.stream().filter(fieldKey -> Arrays.stream(GXSJ_COLUMN_NAMES)\n                .anyMatch(columnName -> StringUtils.equalsIgnoreCase(columnName, fieldKey))).findFirst();\n        gxsjFieldNameOptional.ifPresent(gxsjFieldName -> CUTimeDTO.setUpdateTimePropertyName(gxsjFieldName));\n        CUTimeDTO.setUpdateTimeColumnName(getColumnNameByColumnAnno(gxsjFieldNameOptional, fieldMap));\n        return CUTimeDTO;\n    }\n\n    private String getColumnNameByColumnAnno(Optional<String> fieldNameOptional, Map<String, Field> fieldMap) {\n        String columnName = null;\n        if (fieldNameOptional.isPresent()) {\n            String fieldName = fieldNameOptional.get();\n            Field field = fieldMap.get(fieldName);\n            Column column = field.getAnnotation(Column.class);\n            columnName = column.name();\n        }\n        return columnName;\n    }\n\n    private Class findEntityClazz(Class mapperClazz) {\n        if (!mapperClazz.isInterface()) {\n            return null;\n        }\n        Type[] interfaces = mapperClazz.getGenericInterfaces();\n        if (Objects.isNull(interfaces)) {\n            return null;\n        }\n        Optional<ParameterizedType> baseMapperTypeOptional = Arrays.stream(interfaces)\n                .filter(iface -> iface instanceof ParameterizedType)\n                .map(iface -> (ParameterizedType) iface)\n                .filter(iface -> ((Class) iface.getRawType()).isAssignableFrom(BaseMapper.class))\n                .findFirst();\n        if (!baseMapperTypeOptional.isPresent()) {\n            return null;\n        }\n        ParameterizedType baseMapperType = baseMapperTypeOptional.get();\n        return (Class) baseMapperType.getActualTypeArguments()[0];\n    }\n\n    @Override\n    public Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n    }\n\n}\n```\n\n设计的 DTO 用于确定属性对应的创建时间字段属性和更新时间字段属性。\n\n```java\n@Getter\n@Setter\n@Accessors(chain = true)\n@NoArgsConstructor\npublic class CUTimeDTO {\n\n    private String createTimePropertyName;\n\n    private String updateTimePropertyName;\n\n    private String createTimeColumnName;\n\n    private String updateTimeColumnName;\n}\n```\n\n包装对应的 SqlSource 在获取最后的 SQL （`SqlSource#getBoundSql`）中拼接创建和更新时间脚本。不在具体的 SqlSource 里面完成字段拼接加上预处理字段，是因为 mybatis 支持多种 SqlSource 包含 `StaticSqlSource`、`ProviderSqlSource`、`RawSqlSource`、`DynamicSqlSource`，且他们可以组合出现，可见还是有一定的复杂度的。所以才选择用包装类完成字段填充。这种是不建议自动填充那种包含不同值的字段的，因为这样会让预处理 SQL 没有发挥作用。\n\n```java\n@AllArgsConstructor\npublic class AutoFillUTimeUpdateSqlSource implements SqlSource {\n\n    private SqlSource sqlSource;\n\n    private String columnName;\n\n    private String columnValue;\n\n\n    @Override\n    public BoundSql getBoundSql(Object parameterObject) {\n        BoundSql boundSql = this.sqlSource.getBoundSql(parameterObject);\n        replaceBoundSql(boundSql);\n        return boundSql;\n    }\n    private void replaceBoundSql(BoundSql boundSql) {\n        String sql = boundSql.getSql();\n        String newSql = StringUtils.replaceIgnoreCase(sql, \"set \", \"set \" + columnName + \"=\" + columnValue + \",\");\n        BeanUtil.setProperty(boundSql, \"sql\", newSql);\n    }\n}\n```\n\n```java\n@AllArgsConstructor\npublic class AutoFillCUTimeInsertSqlSource implements SqlSource  {\n\n    private SqlSource sqlSource;\n\n    private String columnName;\n\n    private String columnValue;\n\n    @Override\n    public BoundSql getBoundSql(Object parameterObject) {\n        BoundSql boundSql = this.sqlSource.getBoundSql(parameterObject);\n        replaceBoundSql(boundSql);\n        return boundSql;\n    }\n\n    private void replaceBoundSql(BoundSql boundSql) {\n        String sql = boundSql.getSql();\n        Pattern pattern = Pattern.compile(\"\\\\(\");\n        Matcher matcher = pattern.matcher(sql);\n        String newSql = sql;\n        if (matcher.find()) {\n            int index = matcher.start();\n            newSql = sql.substring(0, index + 1) + columnName + \",\" + sql.substring(index + 1);\n        }\n\n        int index = StringUtils.indexOfIgnoreCase(newSql, \"values\");\n        int index1 = index + \"values\".length();\n        while(index1 < newSql.length() && index1 > 0) {\n            index1 = index1 + 1;\n            char next = newSql.charAt(index1);\n            if (next == ' ' || next == '\\\\' || next == 'n') {\n                continue;\n            }\n            if (next == '(') {\n                break;\n            }\n            index1 = StringUtils.indexOfIgnoreCase(newSql, \"values\", index1);\n        }\n        if (index1 == -1) {\n            return;\n        }\n        String replace = StringUtils.substring(newSql, index, index1 + 1);\n        newSql = newSql.replace(replace, replace + columnValue + \",\");\n        BeanUtil.setProperty(boundSql, \"sql\", newSql);\n    }\n}\n```\n\n#### :question: 猜测你会有这样的疑问\n\n为什么不让项目直接集成 mybatis-plus 修改 pojo 就能快速解决问题，不用这么复杂。当然我统一这个思路，但这个思路适合于 pojo 少，且使用 `@Table` 、`@Column` 等数据库型的注解的项目。否则，在大项目中还是工作量及风险还是比较高。但这不影响我推荐使用 mybatis-plus。\n","source":"_posts/怎么实现-mybatis-自动设置创建时间更新时间.md","raw":"---\ntitle: 怎么实现 mybatis 自动设置创建时间更新时间\ndate: 2024-02-18 12:41:41\ncategories:\n- code \ntags:\n- code\n- mybatis\n- mybatis-plus\n- 自动填充\n---\n## 怎么实现 mybatis 自动设置创建时间更新时间\n\n#### :mag: 相对流行方案弊端\n\nmybatis 提供 Interceptor 接口以插件方式提供扩展能力。互联网上大都是对数据表映射类对象中关于时间属性设置当前时间的解决方案。但这种方法无法解决 mapper.xml 写更新 SQL 或 @XXXProvider 拼 SQL 的方式插入或更新数据表。但是依托于数据表映射类本身没有问题，因为需要知道创建时间和更新时间对应的数据库字段信息，这是光拦截到 SQL 而无法判断时间相关的字段是否存在并赋值。\n\n#### :mortar_board: 更好的选择\n\n如果你项目中使用了 mybatis-plus 组件，恭喜你做这个决定你足够明智。 mybatis-plus 提供 MetaObjectHandler 抽象类实现公共字段自动写入能力。其大体思路是针对 @XXXProvider 拼 SQL 时将实体中标记需要自动填充的字段拼入 SQL 中，通过 metaObjectHandler 对实体属性字段填充相应值，最后带有自动填充字段的 PrepareStatement SQL 插入/更新数据表数据。\n\n但，项目上使用自写 `BaseMapper<E,ID>` 接口和 @XXXProvider 注解实现 BaseMapperSqlSourceBuilder 类完成 SQL 拼接。但未提供对公用字段自动写入能力。\n\n#### :mushroom: 在现状上解决问题\n\nInterceptor 拦截的位置是执行 SQL 之前，也就是 `@Signature(type = Executor.class, method=\"update\", args={MappedStatement.class, Object.class})` ，在 SQL 里拼接时间的字段和字段值。字段值可以直接设置的 `now()` 数据库函数，缺点是强依赖数据库。这个缺点需要通过 driver 信息找确切的数据库类型，切换时间函数。时间字段信息则是通过 `BaseMapper<E,ID>` 获取泛型 E 指向的 Class，通过属性名匹配（没办法老代码只能匹配属性名）或注解匹配找到时间字段。SQL 里拼接时间字段是通过包装 SqlSource 通过 `SqlSource#getBoundSql` 替换最终 SQL 和当前时间函数。\n\n- `mappedStatement#getId()`，id 的值对应类全路径，从这个类全路径获取类信息并确定 `BaseMapper<E,ID>` E 指向的泛型\n\n```java\n/**\n * 表的创建时间和更新时间会随着表的更新或插入行为进行赋值. 因为需要确定表中是否有创建时间或更新时间且确定时间字段名，所以需要使用的地方\n * 的 mapper 继承 {@link BaseMapper}<br>\n * 思路，从 BaseMapper 的泛型 T 获取实体类，从实体类里面解析出创建时间和更新时间字段对应的数据库字段名，这里创建时间和更新时间是通过名称\n * 匹配的，大小写不论包含匹配.针对插入行为会增加创建时间和更新时间，针对更新行为会更新更新时间.<br>\n * <lu>\n * <li>创建时间，dCjsj、cjsj、dtCjsj、dCjrq、cjrq、dtCjrq、createTime、dCreateTime、dtCreateTime</li>\n * <li>更新时间，dGxsj, gxsj, dtGxsj, dXgsj, xgsj, dtXgsj, dZhxgsj、zhxgsj、dtZhxgsj、updateTime、dUpdateTime、dtUpdateTime</li>\n * </lu>\n *\n * @author liulili\n * @date 2024/1/25 11:24\n */\n@Slf4j\n@Component\n@Intercepts(@Signature(type = Executor.class, method=\"update\", args={MappedStatement.class, Object.class}))\npublic class AutofillCreateOrUpdateTimeInterceptor implements Interceptor {\n\n    private final String[] CJSJ_COLUMN_NAMES = new String[] {\"cjsj\", \"dCjsj\", \"dtCjsj\", \"cjrq\", \"dCjrq\", \"dtCjrq\", \"createTime\", \"dCreateTime\", \"dtCreateTime\"};\n\n    private final String[] GXSJ_COLUMN_NAMES = new String[] {\"gxsj\", \"dGxsj\", \"dtGxsj\", \"xgsj\", \"dXgsj\", \"dtXgsj\", \"zhxgsj\", \"dZhxgsj\", \"dtZhxgsj\", \"updateTime\", \"dUpdateTime\", \"dtUpdateTime\"};\n    @Override\n    public Object intercept(Invocation invocation) throws Throwable {\n        Object[] args = invocation.getArgs();\n        MappedStatement mappedStatement = (MappedStatement) args[0];\n        StatementType statement = mappedStatement.getStatementType();\n        if (statement == StatementType.CALLABLE) {\n            log.debug(\"【自动填充创建或修改时间】不支持在存储过程类型业务\");\n            return invocation.proceed();\n        }\n        SqlCommandType command = mappedStatement.getSqlCommandType();\n        String id = mappedStatement.getId();\n        String className = StringUtils.substring(id, 0, id.lastIndexOf(\".\"));\n        Class mapperClazz = null;\n        try {\n            mapperClazz = Class.forName(className);\n        } catch (Throwable e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作\", className, e);\n            } else if (log.isInfoEnabled()) {\n                log.info(\"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作\", className);\n            }\n            return invocation.proceed();\n        }\n        Class entityClazz = findEntityClazz(mapperClazz);\n        if (Objects.isNull(entityClazz)) {\n            log.debug(\"class[{}]非接口/未继承BaseMapper接口\", entityClazz);\n            return invocation.proceed();\n        }\n        CUTimeDTO cuTimeDTO = findCreateAndUpdateTimeColumn(entityClazz);\n        if (StringUtils.isBlank(cuTimeDTO.getUpdateTimeColumnName()) && StringUtils.isBlank(cuTimeDTO.getCreateTimeColumnName())) {\n            log.debug(\"class[{}]无匹配的创建时间和更新时间字段， 请参考 AutofillCreateOrUpdateTimeInterceptor#CJSJ_COLUMN_NAMES 和 AutofillCreateOrUpdateTimeInterceptor#GXSJ_COLUMN_NAMES\", entityClazz);\n            return invocation.proceed();\n        }\n        if (command == SqlCommandType.INSERT) {\n            autofillInsert(mappedStatement, args[1], entityClazz, cuTimeDTO);\n        } else if (command == SqlCommandType.UPDATE) {\n            autofillUpdate(mappedStatement, args[1], entityClazz, cuTimeDTO);\n        }\n        return invocation.proceed();\n    }\n\n    private void autofillUpdate(MappedStatement mappedStatement, Object param, Class entityClazz, CUTimeDTO cuTimeDTO) {\n        String updateTimeColumn = cuTimeDTO.getUpdateTimeColumnName();\n        if (StringUtils.isBlank(updateTimeColumn)) {\n            return;\n        }\n        BoundSql boundSql = mappedStatement.getBoundSql(param);\n        String sql = boundSql.getSql();\n        if (StringUtils.containsIgnoreCase(sql, updateTimeColumn)) {\n            autofillUTime(param, cuTimeDTO, entityClazz);\n            return;\n        }\n        SqlSource sqlSource = mappedStatement.getSqlSource();\n        SqlSource decoderSqlSource = new AutoFillUTimeUpdateSqlSource(sqlSource, updateTimeColumn, \"now()\");\n        BeanUtil.setProperty(mappedStatement, \"sqlSource\", decoderSqlSource);\n    }\n\n    private void autofillInsert(MappedStatement mappedStatement, Object param, Class entityClazz, CUTimeDTO cuTimeDTO) {\n        String createColumnName = cuTimeDTO.getCreateTimeColumnName();\n        String updateColumnName = cuTimeDTO.getUpdateTimeColumnName();\n        BoundSql boundSql = mappedStatement.getBoundSql(param);\n        String sql = boundSql.getSql();\n        List<String> addColumn = new ArrayList<>(2);\n        if (StringUtils.isNotBlank(createColumnName) && !StringUtils.containsIgnoreCase(sql, createColumnName)) {\n            addColumn.add(createColumnName);\n        }\n        if (StringUtils.isNotBlank(updateColumnName) && !StringUtils.containsIgnoreCase(sql, updateColumnName)) {\n            addColumn.add(updateColumnName);\n        }\n        if (CollectionUtils.isEmpty(addColumn)) {\n            autofillCUTime(param, cuTimeDTO, entityClazz);\n            return;\n        }\n        String columnName = addColumn.stream().collect(Collectors.joining(\",\"));\n        String columnValue = addColumn.stream().map(column -> \"now()\").collect(Collectors.joining(\",\"));\n        SqlSource sqlSource = mappedStatement.getSqlSource();\n        SqlSource decoderSqlSource = new AutoFillCUTimeInsertSqlSource(sqlSource, columnName, columnValue);\n        BeanUtil.setProperty(mappedStatement, \"sqlSource\", decoderSqlSource);\n    }\n\n    private void autofillCUTime(Object param, CUTimeDTO cuTimeDTO, Class entityClazz) {\n        if (Objects.isNull(param)) {\n            return;\n        }\n        if (param.getClass().isAssignableFrom(entityClazz)) {\n            Optional.ofNullable(cuTimeDTO.getCreateTimePropertyName())\n                    .ifPresent(createColumnName -> BeanUtil.setProperty(param, createColumnName, Calendar.getInstance().getTime()));\n            Optional.ofNullable(cuTimeDTO.getUpdateTimePropertyName())\n                    .ifPresent(updateColumnName -> BeanUtil.setProperty(param, updateColumnName, Calendar.getInstance().getTime()));\n            return;\n        }\n        if (param instanceof Collection) {\n            Collection paramColl = (Collection) param;\n            paramColl.stream().forEach(sparam -> autofillCUTime(sparam, cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param instanceof Map) {\n            Map paramMap = (Map) param;\n            Set<Map.Entry> entries = paramMap.entrySet();\n            entries.stream().forEach(entry -> autofillCUTime(entry.getValue(), cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param.getClass().isPrimitive() || param.getClass().isEnum()) {\n            return;\n        }\n        if (param.getClass().isArray()) {\n            Object[] paramArr = (Object[]) param;\n            Arrays.stream(paramArr).forEach(obj -> autofillCUTime(obj, cuTimeDTO, entityClazz));\n            return;\n        }\n        Field[] fields = param.getClass().getDeclaredFields();\n        Arrays.stream(fields).forEach(field -> {\n            Object property = null;\n            try {\n                property = BeanUtil.getProperty(param, field.getName());\n            } catch (Exception e) {\n                log.debug(\"param[{}]属性【{}】获取属性值失败\", param, field.getName(), e);\n            }\n            autofillCUTime(property, cuTimeDTO, entityClazz);\n        });\n    }\n\n    private void autofillUTime(Object param, CUTimeDTO cuTimeDTO, Class entityClazz) {\n        if (Objects.isNull(param) || param.getClass().isPrimitive() || param.getClass().isEnum()) {\n            return;\n        }\n        if (param.getClass().isAssignableFrom(entityClazz)) {\n            Optional.ofNullable(cuTimeDTO.getUpdateTimePropertyName()).ifPresent(updateColumnName -> BeanUtil.setProperty(param, updateColumnName, Calendar.getInstance().getTime()));\n            return;\n        }\n        if (param instanceof Collection) {\n            Collection paramColl = (Collection) param;\n            paramColl.stream().forEach(sparam -> autofillUTime(sparam, cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param instanceof Map) {\n            Map paramMap = (Map) param;\n            Set<Map.Entry> entries = paramMap.entrySet();\n            entries.stream().forEach(entry -> autofillUTime(entry.getValue(), cuTimeDTO, entityClazz));\n            return;\n        }\n        if (param.getClass().isArray()) {\n            Object[] paramArr = (Object[]) param;\n            Arrays.stream(paramArr).forEach(obj -> autofillUTime(obj, cuTimeDTO, entityClazz));\n            return;\n        }\n        Field[] fields = param.getClass().getDeclaredFields();\n        Arrays.stream(fields).forEach(field -> {\n            Object property = null;\n            try {\n                property = BeanUtil.getProperty(param, field.getName());\n            } catch (Exception e) {\n                log.debug(\"param[{}]属性【{}】获取属性值失败\", param, field.getName(), e);\n            }\n            autofillUTime(property, cuTimeDTO, entityClazz);\n        });\n    }\n\n    private CUTimeDTO findCreateAndUpdateTimeColumn(Class entityClazz) {\n        Field[] fields = entityClazz.getDeclaredFields();\n        Map<String, Field> fieldMap = Arrays.stream(fields).collect(Collectors.toMap(Field::getName, field -> field));\n        Set<String> fieldKeys = fieldMap.keySet();\n        CUTimeDTO CUTimeDTO = new CUTimeDTO();\n        Optional<String> cjsjFieldNameOptional = fieldKeys.stream().filter(fieldKey -> Arrays.stream(CJSJ_COLUMN_NAMES)\n                .anyMatch(columnName -> StringUtils.equalsIgnoreCase(columnName, fieldKey))).findFirst();\n        cjsjFieldNameOptional.ifPresent(cjsjFieldName -> CUTimeDTO.setCreateTimePropertyName(cjsjFieldName));\n        CUTimeDTO.setCreateTimeColumnName(getColumnNameByColumnAnno(cjsjFieldNameOptional, fieldMap));\n        Optional<String> gxsjFieldNameOptional = fieldKeys.stream().filter(fieldKey -> Arrays.stream(GXSJ_COLUMN_NAMES)\n                .anyMatch(columnName -> StringUtils.equalsIgnoreCase(columnName, fieldKey))).findFirst();\n        gxsjFieldNameOptional.ifPresent(gxsjFieldName -> CUTimeDTO.setUpdateTimePropertyName(gxsjFieldName));\n        CUTimeDTO.setUpdateTimeColumnName(getColumnNameByColumnAnno(gxsjFieldNameOptional, fieldMap));\n        return CUTimeDTO;\n    }\n\n    private String getColumnNameByColumnAnno(Optional<String> fieldNameOptional, Map<String, Field> fieldMap) {\n        String columnName = null;\n        if (fieldNameOptional.isPresent()) {\n            String fieldName = fieldNameOptional.get();\n            Field field = fieldMap.get(fieldName);\n            Column column = field.getAnnotation(Column.class);\n            columnName = column.name();\n        }\n        return columnName;\n    }\n\n    private Class findEntityClazz(Class mapperClazz) {\n        if (!mapperClazz.isInterface()) {\n            return null;\n        }\n        Type[] interfaces = mapperClazz.getGenericInterfaces();\n        if (Objects.isNull(interfaces)) {\n            return null;\n        }\n        Optional<ParameterizedType> baseMapperTypeOptional = Arrays.stream(interfaces)\n                .filter(iface -> iface instanceof ParameterizedType)\n                .map(iface -> (ParameterizedType) iface)\n                .filter(iface -> ((Class) iface.getRawType()).isAssignableFrom(BaseMapper.class))\n                .findFirst();\n        if (!baseMapperTypeOptional.isPresent()) {\n            return null;\n        }\n        ParameterizedType baseMapperType = baseMapperTypeOptional.get();\n        return (Class) baseMapperType.getActualTypeArguments()[0];\n    }\n\n    @Override\n    public Object plugin(Object target) {\n        return Plugin.wrap(target, this);\n    }\n\n    @Override\n    public void setProperties(Properties properties) {\n    }\n\n}\n```\n\n设计的 DTO 用于确定属性对应的创建时间字段属性和更新时间字段属性。\n\n```java\n@Getter\n@Setter\n@Accessors(chain = true)\n@NoArgsConstructor\npublic class CUTimeDTO {\n\n    private String createTimePropertyName;\n\n    private String updateTimePropertyName;\n\n    private String createTimeColumnName;\n\n    private String updateTimeColumnName;\n}\n```\n\n包装对应的 SqlSource 在获取最后的 SQL （`SqlSource#getBoundSql`）中拼接创建和更新时间脚本。不在具体的 SqlSource 里面完成字段拼接加上预处理字段，是因为 mybatis 支持多种 SqlSource 包含 `StaticSqlSource`、`ProviderSqlSource`、`RawSqlSource`、`DynamicSqlSource`，且他们可以组合出现，可见还是有一定的复杂度的。所以才选择用包装类完成字段填充。这种是不建议自动填充那种包含不同值的字段的，因为这样会让预处理 SQL 没有发挥作用。\n\n```java\n@AllArgsConstructor\npublic class AutoFillUTimeUpdateSqlSource implements SqlSource {\n\n    private SqlSource sqlSource;\n\n    private String columnName;\n\n    private String columnValue;\n\n\n    @Override\n    public BoundSql getBoundSql(Object parameterObject) {\n        BoundSql boundSql = this.sqlSource.getBoundSql(parameterObject);\n        replaceBoundSql(boundSql);\n        return boundSql;\n    }\n    private void replaceBoundSql(BoundSql boundSql) {\n        String sql = boundSql.getSql();\n        String newSql = StringUtils.replaceIgnoreCase(sql, \"set \", \"set \" + columnName + \"=\" + columnValue + \",\");\n        BeanUtil.setProperty(boundSql, \"sql\", newSql);\n    }\n}\n```\n\n```java\n@AllArgsConstructor\npublic class AutoFillCUTimeInsertSqlSource implements SqlSource  {\n\n    private SqlSource sqlSource;\n\n    private String columnName;\n\n    private String columnValue;\n\n    @Override\n    public BoundSql getBoundSql(Object parameterObject) {\n        BoundSql boundSql = this.sqlSource.getBoundSql(parameterObject);\n        replaceBoundSql(boundSql);\n        return boundSql;\n    }\n\n    private void replaceBoundSql(BoundSql boundSql) {\n        String sql = boundSql.getSql();\n        Pattern pattern = Pattern.compile(\"\\\\(\");\n        Matcher matcher = pattern.matcher(sql);\n        String newSql = sql;\n        if (matcher.find()) {\n            int index = matcher.start();\n            newSql = sql.substring(0, index + 1) + columnName + \",\" + sql.substring(index + 1);\n        }\n\n        int index = StringUtils.indexOfIgnoreCase(newSql, \"values\");\n        int index1 = index + \"values\".length();\n        while(index1 < newSql.length() && index1 > 0) {\n            index1 = index1 + 1;\n            char next = newSql.charAt(index1);\n            if (next == ' ' || next == '\\\\' || next == 'n') {\n                continue;\n            }\n            if (next == '(') {\n                break;\n            }\n            index1 = StringUtils.indexOfIgnoreCase(newSql, \"values\", index1);\n        }\n        if (index1 == -1) {\n            return;\n        }\n        String replace = StringUtils.substring(newSql, index, index1 + 1);\n        newSql = newSql.replace(replace, replace + columnValue + \",\");\n        BeanUtil.setProperty(boundSql, \"sql\", newSql);\n    }\n}\n```\n\n#### :question: 猜测你会有这样的疑问\n\n为什么不让项目直接集成 mybatis-plus 修改 pojo 就能快速解决问题，不用这么复杂。当然我统一这个思路，但这个思路适合于 pojo 少，且使用 `@Table` 、`@Column` 等数据库型的注解的项目。否则，在大项目中还是工作量及风险还是比较高。但这不影响我推荐使用 mybatis-plus。\n","slug":"怎么实现-mybatis-自动设置创建时间更新时间","published":1,"updated":"2024-02-18T04:44:16.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clu285vm8000b4tc05ef5ea7k","content":"<h2 id=\"怎么实现-mybatis-自动设置创建时间更新时间\"><a href=\"#怎么实现-mybatis-自动设置创建时间更新时间\" class=\"headerlink\" title=\"怎么实现 mybatis 自动设置创建时间更新时间\"></a>怎么实现 mybatis 自动设置创建时间更新时间</h2><h4 id=\"mag-相对流行方案弊端\"><a href=\"#mag-相对流行方案弊端\" class=\"headerlink\" title=\":mag: 相对流行方案弊端\"></a><span class=\"github-emoji\"><span>🔍</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 相对流行方案弊端</h4><p>mybatis 提供 Interceptor 接口以插件方式提供扩展能力。互联网上大都是对数据表映射类对象中关于时间属性设置当前时间的解决方案。但这种方法无法解决 mapper.xml 写更新 SQL 或 @XXXProvider 拼 SQL 的方式插入或更新数据表。但是依托于数据表映射类本身没有问题，因为需要知道创建时间和更新时间对应的数据库字段信息，这是光拦截到 SQL 而无法判断时间相关的字段是否存在并赋值。</p>\n<h4 id=\"mortar-board-更好的选择\"><a href=\"#mortar-board-更好的选择\" class=\"headerlink\" title=\":mortar_board: 更好的选择\"></a><span class=\"github-emoji\"><span>🎓</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 更好的选择</h4><p>如果你项目中使用了 mybatis-plus 组件，恭喜你做这个决定你足够明智。 mybatis-plus 提供 MetaObjectHandler 抽象类实现公共字段自动写入能力。其大体思路是针对 @XXXProvider 拼 SQL 时将实体中标记需要自动填充的字段拼入 SQL 中，通过 metaObjectHandler 对实体属性字段填充相应值，最后带有自动填充字段的 PrepareStatement SQL 插入/更新数据表数据。</p>\n<p>但，项目上使用自写 <code>BaseMapper&lt;E,ID&gt;</code> 接口和 @XXXProvider 注解实现 BaseMapperSqlSourceBuilder 类完成 SQL 拼接。但未提供对公用字段自动写入能力。</p>\n<h4 id=\"mushroom-在现状上解决问题\"><a href=\"#mushroom-在现状上解决问题\" class=\"headerlink\" title=\":mushroom: 在现状上解决问题\"></a><span class=\"github-emoji\"><span>🍄</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 在现状上解决问题</h4><p>Interceptor 拦截的位置是执行 SQL 之前，也就是 <code>@Signature(type = Executor.class, method=\"update\", args={MappedStatement.class, Object.class})</code> ，在 SQL 里拼接时间的字段和字段值。字段值可以直接设置的 <code>now()</code> 数据库函数，缺点是强依赖数据库。这个缺点需要通过 driver 信息找确切的数据库类型，切换时间函数。时间字段信息则是通过 <code>BaseMapper&lt;E,ID&gt;</code> 获取泛型 E 指向的 Class，通过属性名匹配（没办法老代码只能匹配属性名）或注解匹配找到时间字段。SQL 里拼接时间字段是通过包装 SqlSource 通过 <code>SqlSource#getBoundSql</code> 替换最终 SQL 和当前时间函数。</p>\n<ul>\n<li><code>mappedStatement#getId()</code>，id 的值对应类全路径，从这个类全路径获取类信息并确定 <code>BaseMapper&lt;E,ID&gt;</code> E 指向的泛型</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 表的创建时间和更新时间会随着表的更新或插入行为进行赋值. 因为需要确定表中是否有创建时间或更新时间且确定时间字段名，所以需要使用的地方\n * 的 mapper 继承 {@link BaseMapper}&lt;br&gt;\n * 思路，从 BaseMapper 的泛型 T 获取实体类，从实体类里面解析出创建时间和更新时间字段对应的数据库字段名，这里创建时间和更新时间是通过名称\n * 匹配的，大小写不论包含匹配.针对插入行为会增加创建时间和更新时间，针对更新行为会更新更新时间.&lt;br&gt;\n * &lt;lu&gt;\n * &lt;li&gt;创建时间，dCjsj、cjsj、dtCjsj、dCjrq、cjrq、dtCjrq、createTime、dCreateTime、dtCreateTime&lt;/li&gt;\n * &lt;li&gt;更新时间，dGxsj, gxsj, dtGxsj, dXgsj, xgsj, dtXgsj, dZhxgsj、zhxgsj、dtZhxgsj、updateTime、dUpdateTime、dtUpdateTime&lt;/li&gt;\n * &lt;/lu&gt;\n *\n * @author liulili\n * @date 2024/1/25 11:24\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Intercepts</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Signature</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">Executor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">MappedStatement</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutofillCreateOrUpdateTimeInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Interceptor</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">CJSJ_COLUMN_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"cjsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dCjsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtCjsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cjrq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dCjrq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtCjrq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dCreateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtCreateTime\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">GXSJ_COLUMN_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"gxsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dGxsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtGxsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dXgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtXgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhxgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dZhxgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtZhxgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dUpdateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtUpdateTime\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MappedStatement</span> mappedStatement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StatementType</span> statement <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getStatementType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statement <span class=\"token operator\">==</span> <span class=\"token class-name\">StatementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CALLABLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【自动填充创建或修改时间】不支持在存储过程类型业务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">SqlCommandType</span> command <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getSqlCommandType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> mapperClazz <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            mapperClazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作\"</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作\"</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Class</span> entityClazz <span class=\"token operator\">=</span> <span class=\"token function\">findEntityClazz</span><span class=\"token punctuation\">(</span>mapperClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class[{}]非接口/未继承BaseMapper接口\"</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO <span class=\"token operator\">=</span> <span class=\"token function\">findCreateAndUpdateTimeColumn</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class[{}]无匹配的创建时间和更新时间字段， 请参考 AutofillCreateOrUpdateTimeInterceptor#CJSJ_COLUMN_NAMES 和 AutofillCreateOrUpdateTimeInterceptor#GXSJ_COLUMN_NAMES\"</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token class-name\">SqlCommandType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSERT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">autofillInsert</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token class-name\">SqlCommandType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">autofillUpdate</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span> mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> updateTimeColumn <span class=\"token operator\">=</span> cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>updateTimeColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> updateTimeColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">SqlSource</span> sqlSource <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SqlSource</span> decoderSqlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoFillUTimeUpdateSqlSource</span><span class=\"token punctuation\">(</span>sqlSource<span class=\"token punctuation\">,</span> updateTimeColumn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"now()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sqlSource\"</span><span class=\"token punctuation\">,</span> decoderSqlSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillInsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span> mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> createColumnName <span class=\"token operator\">=</span> cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> updateColumnName <span class=\"token operator\">=</span> cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> addColumn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>createColumnName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> createColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>createColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>updateColumnName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> updateColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>updateColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>addColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> columnName <span class=\"token operator\">=</span> addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> columnValue <span class=\"token operator\">=</span> addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">-&gt;</span> <span class=\"token string\">\"now()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SqlSource</span> sqlSource <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SqlSource</span> decoderSqlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoFillCUTimeInsertSqlSource</span><span class=\"token punctuation\">(</span>sqlSource<span class=\"token punctuation\">,</span> columnName<span class=\"token punctuation\">,</span> columnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sqlSource\"</span><span class=\"token punctuation\">,</span> decoderSqlSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTimePropertyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>createColumnName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> createColumnName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimePropertyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>updateColumnName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> updateColumnName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Collection</span> paramColl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            paramColl<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sparam <span class=\"token operator\">-&gt;</span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>sparam<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Map</span> paramMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&gt;</span></span> entries <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            entries<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">-&gt;</span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>paramArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">-&gt;</span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>field <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span> property <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                property <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param[{}]属性【{}】获取属性值失败\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimePropertyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>updateColumnName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> updateColumnName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Collection</span> paramColl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            paramColl<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sparam <span class=\"token operator\">-&gt;</span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>sparam<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Map</span> paramMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&gt;</span></span> entries <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            entries<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">-&gt;</span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>paramArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">-&gt;</span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>field <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span> property <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                property <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param[{}]属性【{}】获取属性值失败\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token function\">findCreateAndUpdateTimeColumn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> entityClazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">&gt;</span></span> fieldMap <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> field <span class=\"token operator\">-&gt;</span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> fieldKeys <span class=\"token operator\">=</span> fieldMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> cjsjFieldNameOptional <span class=\"token operator\">=</span> fieldKeys<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>fieldKey <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CJSJ_COLUMN_NAMES</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">,</span> fieldKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cjsjFieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>cjsjFieldName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTimePropertyName</span><span class=\"token punctuation\">(</span>cjsjFieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token function\">getColumnNameByColumnAnno</span><span class=\"token punctuation\">(</span>cjsjFieldNameOptional<span class=\"token punctuation\">,</span> fieldMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> gxsjFieldNameOptional <span class=\"token operator\">=</span> fieldKeys<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>fieldKey <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GXSJ_COLUMN_NAMES</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">,</span> fieldKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gxsjFieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>gxsjFieldName <span class=\"token operator\">-&gt;</span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpdateTimePropertyName</span><span class=\"token punctuation\">(</span>gxsjFieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token function\">getColumnNameByColumnAnno</span><span class=\"token punctuation\">(</span>gxsjFieldNameOptional<span class=\"token punctuation\">,</span> fieldMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getColumnNameByColumnAnno</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> fieldNameOptional<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">&gt;</span></span> fieldMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> columnName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> fieldName <span class=\"token operator\">=</span> fieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> fieldMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Column</span> column <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Column</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            columnName <span class=\"token operator\">=</span> column<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> columnName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span> <span class=\"token function\">findEntityClazz</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> mapperClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mapperClazz<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> mapperClazz<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">&gt;</span></span> baseMapperTypeOptional <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>iface <span class=\"token operator\">-&gt;</span> iface <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>iface <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">)</span> iface<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>iface <span class=\"token operator\">-&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span> iface<span class=\"token punctuation\">.</span><span class=\"token function\">getRawType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>baseMapperTypeOptional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">ParameterizedType</span> baseMapperType <span class=\"token operator\">=</span> baseMapperTypeOptional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span> baseMapperType<span class=\"token punctuation\">.</span><span class=\"token function\">getActualTypeArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设计的 DTO 用于确定属性对应的创建时间字段属性和更新时间字段属性。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@Accessors</span><span class=\"token punctuation\">(</span>chain <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> createTimePropertyName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> updateTimePropertyName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> createTimeColumnName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> updateTimeColumnName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>包装对应的 SqlSource 在获取最后的 SQL （<code>SqlSource#getBoundSql</code>）中拼接创建和更新时间脚本。不在具体的 SqlSource 里面完成字段拼接加上预处理字段，是因为 mybatis 支持多种 SqlSource 包含 <code>StaticSqlSource</code>、<code>ProviderSqlSource</code>、<code>RawSqlSource</code>、<code>DynamicSqlSource</code>，且他们可以组合出现，可见还是有一定的复杂度的。所以才选择用包装类完成字段填充。这种是不建议自动填充那种包含不同值的字段的，因为这样会让预处理 SQL 没有发挥作用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFillUTimeUpdateSqlSource</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SqlSource</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSource</span> sqlSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnValue<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BoundSql</span> <span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> parameterObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sqlSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>parameterObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> boundSql<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BoundSql</span> boundSql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> newSql <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"set \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"set \"</span> <span class=\"token operator\">+</span> columnName <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> columnValue <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sql\"</span><span class=\"token punctuation\">,</span> newSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFillCUTimeInsertSqlSource</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SqlSource</span>  <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSource</span> sqlSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnValue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BoundSql</span> <span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> parameterObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sqlSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>parameterObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> boundSql<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BoundSql</span> boundSql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Pattern</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Matcher</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> newSql <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            newSql <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> columnName <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOfIgnoreCase</span><span class=\"token punctuation\">(</span>newSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"values\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token string\">\"values\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">&lt;</span> newSql<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index1 <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index1 <span class=\"token operator\">=</span> index1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> next <span class=\"token operator\">=</span> newSql<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> next <span class=\"token operator\">==</span> <span class=\"token char\">'\\\\'</span> <span class=\"token operator\">||</span> next <span class=\"token operator\">==</span> <span class=\"token char\">'n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            index1 <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOfIgnoreCase</span><span class=\"token punctuation\">(</span>newSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"values\"</span><span class=\"token punctuation\">,</span> index1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">String</span> replace <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>newSql<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> index1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newSql <span class=\"token operator\">=</span> newSql<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>replace<span class=\"token punctuation\">,</span> replace <span class=\"token operator\">+</span> columnValue <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sql\"</span><span class=\"token punctuation\">,</span> newSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"question-猜测你会有这样的疑问\"><a href=\"#question-猜测你会有这样的疑问\" class=\"headerlink\" title=\":question: 猜测你会有这样的疑问\"></a><span class=\"github-emoji\"><span>❓</span><img src=\"https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8\" aria-hidden=\"true\" onerror=\"this.parent.classList.add('github-emoji-fallback')\"></span> 猜测你会有这样的疑问</h4><p>为什么不让项目直接集成 mybatis-plus 修改 pojo 就能快速解决问题，不用这么复杂。当然我统一这个思路，但这个思路适合于 pojo 少，且使用 <code>@Table</code> 、<code>@Column</code> 等数据库型的注解的项目。否则，在大项目中还是工作量及风险还是比较高。但这不影响我推荐使用 mybatis-plus。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"怎么实现-mybatis-自动设置创建时间更新时间\"><a href=\"#怎么实现-mybatis-自动设置创建时间更新时间\" class=\"headerlink\" title=\"怎么实现 mybatis 自动设置创建时间更新时间\"></a>怎么实现 mybatis 自动设置创建时间更新时间</h2><h4 id=\"mag-相对流行方案弊端\"><a href=\"#mag-相对流行方案弊端\" class=\"headerlink\" title=\":mag: 相对流行方案弊端\"></a>:mag: 相对流行方案弊端</h4><p>mybatis 提供 Interceptor 接口以插件方式提供扩展能力。互联网上大都是对数据表映射类对象中关于时间属性设置当前时间的解决方案。但这种方法无法解决 mapper.xml 写更新 SQL 或 @XXXProvider 拼 SQL 的方式插入或更新数据表。但是依托于数据表映射类本身没有问题，因为需要知道创建时间和更新时间对应的数据库字段信息，这是光拦截到 SQL 而无法判断时间相关的字段是否存在并赋值。</p>\n<h4 id=\"mortar-board-更好的选择\"><a href=\"#mortar-board-更好的选择\" class=\"headerlink\" title=\":mortar_board: 更好的选择\"></a>:mortar_board: 更好的选择</h4><p>如果你项目中使用了 mybatis-plus 组件，恭喜你做这个决定你足够明智。 mybatis-plus 提供 MetaObjectHandler 抽象类实现公共字段自动写入能力。其大体思路是针对 @XXXProvider 拼 SQL 时将实体中标记需要自动填充的字段拼入 SQL 中，通过 metaObjectHandler 对实体属性字段填充相应值，最后带有自动填充字段的 PrepareStatement SQL 插入/更新数据表数据。</p>\n<p>但，项目上使用自写 <code>BaseMapper&lt;E,ID&gt;</code> 接口和 @XXXProvider 注解实现 BaseMapperSqlSourceBuilder 类完成 SQL 拼接。但未提供对公用字段自动写入能力。</p>\n<h4 id=\"mushroom-在现状上解决问题\"><a href=\"#mushroom-在现状上解决问题\" class=\"headerlink\" title=\":mushroom: 在现状上解决问题\"></a>:mushroom: 在现状上解决问题</h4><p>Interceptor 拦截的位置是执行 SQL 之前，也就是 <code>@Signature(type = Executor.class, method=&quot;update&quot;, args=&#123;MappedStatement.class, Object.class&#125;)</code> ，在 SQL 里拼接时间的字段和字段值。字段值可以直接设置的 <code>now()</code> 数据库函数，缺点是强依赖数据库。这个缺点需要通过 driver 信息找确切的数据库类型，切换时间函数。时间字段信息则是通过 <code>BaseMapper&lt;E,ID&gt;</code> 获取泛型 E 指向的 Class，通过属性名匹配（没办法老代码只能匹配属性名）或注解匹配找到时间字段。SQL 里拼接时间字段是通过包装 SqlSource 通过 <code>SqlSource#getBoundSql</code> 替换最终 SQL 和当前时间函数。</p>\n<ul>\n<li><code>mappedStatement#getId()</code>，id 的值对应类全路径，从这个类全路径获取类信息并确定 <code>BaseMapper&lt;E,ID&gt;</code> E 指向的泛型</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 表的创建时间和更新时间会随着表的更新或插入行为进行赋值. 因为需要确定表中是否有创建时间或更新时间且确定时间字段名，所以需要使用的地方\n * 的 mapper 继承 &#123;@link BaseMapper&#125;&lt;br>\n * 思路，从 BaseMapper 的泛型 T 获取实体类，从实体类里面解析出创建时间和更新时间字段对应的数据库字段名，这里创建时间和更新时间是通过名称\n * 匹配的，大小写不论包含匹配.针对插入行为会增加创建时间和更新时间，针对更新行为会更新更新时间.&lt;br>\n * &lt;lu>\n * &lt;li>创建时间，dCjsj、cjsj、dtCjsj、dCjrq、cjrq、dtCjrq、createTime、dCreateTime、dtCreateTime&lt;/li>\n * &lt;li>更新时间，dGxsj, gxsj, dtGxsj, dXgsj, xgsj, dtXgsj, dZhxgsj、zhxgsj、dtZhxgsj、updateTime、dUpdateTime、dtUpdateTime&lt;/li>\n * &lt;/lu>\n *\n * @author liulili\n * @date 2024/1/25 11:24\n */</span>\n<span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@Intercepts</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Signature</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">Executor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"update\"</span><span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">MappedStatement</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutofillCreateOrUpdateTimeInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Interceptor</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">CJSJ_COLUMN_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"cjsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dCjsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtCjsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cjrq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dCjrq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtCjrq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dCreateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtCreateTime\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token constant\">GXSJ_COLUMN_NAMES</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"gxsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dGxsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtGxsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dXgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtXgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhxgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dZhxgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtZhxgsj\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"updateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dUpdateTime\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dtUpdateTime\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MappedStatement</span> mappedStatement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StatementType</span> statement <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getStatementType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statement <span class=\"token operator\">==</span> <span class=\"token class-name\">StatementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CALLABLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"【自动填充创建或修改时间】不支持在存储过程类型业务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">SqlCommandType</span> command <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getSqlCommandType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> id <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Class</span> mapperClazz <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            mapperClazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className[&#123;&#125;]不是Class无法继续【自动填充创建或修改时间】的工作\"</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">.</span><span class=\"token function\">isInfoEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className[&#123;&#125;]不是Class无法继续【自动填充创建或修改时间】的工作\"</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Class</span> entityClazz <span class=\"token operator\">=</span> <span class=\"token function\">findEntityClazz</span><span class=\"token punctuation\">(</span>mapperClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class[&#123;&#125;]非接口/未继承BaseMapper接口\"</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO <span class=\"token operator\">=</span> <span class=\"token function\">findCreateAndUpdateTimeColumn</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class[&#123;&#125;]无匹配的创建时间和更新时间字段， 请参考 AutofillCreateOrUpdateTimeInterceptor#CJSJ_COLUMN_NAMES 和 AutofillCreateOrUpdateTimeInterceptor#GXSJ_COLUMN_NAMES\"</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token class-name\">SqlCommandType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INSERT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autofillInsert</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token class-name\">SqlCommandType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autofillUpdate</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillUpdate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span> mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> updateTimeColumn <span class=\"token operator\">=</span> cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>updateTimeColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> updateTimeColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">SqlSource</span> sqlSource <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SqlSource</span> decoderSqlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoFillUTimeUpdateSqlSource</span><span class=\"token punctuation\">(</span>sqlSource<span class=\"token punctuation\">,</span> updateTimeColumn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"now()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sqlSource\"</span><span class=\"token punctuation\">,</span> decoderSqlSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillInsert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MappedStatement</span> mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> createColumnName <span class=\"token operator\">=</span> cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> updateColumnName <span class=\"token operator\">=</span> cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> addColumn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>createColumnName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> createColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>createColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotBlank</span><span class=\"token punctuation\">(</span>updateColumnName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> updateColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>updateColumnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CollectionUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>addColumn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">String</span> columnName <span class=\"token operator\">=</span> addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> columnValue <span class=\"token operator\">=</span> addColumn<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">-></span> <span class=\"token string\">\"now()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SqlSource</span> sqlSource <span class=\"token operator\">=</span> mappedStatement<span class=\"token punctuation\">.</span><span class=\"token function\">getSqlSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">SqlSource</span> decoderSqlSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AutoFillCUTimeInsertSqlSource</span><span class=\"token punctuation\">(</span>sqlSource<span class=\"token punctuation\">,</span> columnName<span class=\"token punctuation\">,</span> columnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>mappedStatement<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sqlSource\"</span><span class=\"token punctuation\">,</span> decoderSqlSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTimePropertyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>createColumnName <span class=\"token operator\">-></span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> createColumnName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimePropertyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>updateColumnName <span class=\"token operator\">-></span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> updateColumnName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Collection</span> paramColl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            paramColl<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sparam <span class=\"token operator\">-></span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>sparam<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Map</span> paramMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            entries<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">-></span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>paramArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">-></span> <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>field <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Object</span> property <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                property <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param[&#123;&#125;]属性【&#123;&#125;】获取属性值失败\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">autofillCUTime</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> param<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CUTimeDTO</span> cuTimeDTO<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPrimitive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>cuTimeDTO<span class=\"token punctuation\">.</span><span class=\"token function\">getUpdateTimePropertyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>updateColumnName <span class=\"token operator\">-></span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> updateColumnName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Collection</span> paramColl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            paramColl<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sparam <span class=\"token operator\">-></span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>sparam<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Map</span> paramMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            entries<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">-></span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> param<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>paramArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">-></span> <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>field <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Object</span> property <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n                property <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param[&#123;&#125;]属性【&#123;&#125;】获取属性值失败\"</span><span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">autofillUTime</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> cuTimeDTO<span class=\"token punctuation\">,</span> entityClazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token function\">findCreateAndUpdateTimeColumn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> entityClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Field</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fields <span class=\"token operator\">=</span> entityClazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">></span></span> fieldMap <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span> field <span class=\"token operator\">-></span> field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fieldKeys <span class=\"token operator\">=</span> fieldMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cjsjFieldNameOptional <span class=\"token operator\">=</span> fieldKeys<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>fieldKey <span class=\"token operator\">-></span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CJSJ_COLUMN_NAMES</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">-></span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">,</span> fieldKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cjsjFieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>cjsjFieldName <span class=\"token operator\">-></span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTimePropertyName</span><span class=\"token punctuation\">(</span>cjsjFieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token function\">getColumnNameByColumnAnno</span><span class=\"token punctuation\">(</span>cjsjFieldNameOptional<span class=\"token punctuation\">,</span> fieldMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> gxsjFieldNameOptional <span class=\"token operator\">=</span> fieldKeys<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>fieldKey <span class=\"token operator\">-></span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GXSJ_COLUMN_NAMES</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>columnName <span class=\"token operator\">-></span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">,</span> fieldKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        gxsjFieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span>gxsjFieldName <span class=\"token operator\">-></span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpdateTimePropertyName</span><span class=\"token punctuation\">(</span>gxsjFieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUpdateTimeColumnName</span><span class=\"token punctuation\">(</span><span class=\"token function\">getColumnNameByColumnAnno</span><span class=\"token punctuation\">(</span>gxsjFieldNameOptional<span class=\"token punctuation\">,</span> fieldMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CUTimeDTO</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getColumnNameByColumnAnno</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> fieldNameOptional<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Field</span><span class=\"token punctuation\">></span></span> fieldMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> columnName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">String</span> fieldName <span class=\"token operator\">=</span> fieldNameOptional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Field</span> field <span class=\"token operator\">=</span> fieldMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Column</span> column <span class=\"token operator\">=</span> field<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Column</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            columnName <span class=\"token operator\">=</span> column<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> columnName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span> <span class=\"token function\">findEntityClazz</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> mapperClazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mapperClazz<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces <span class=\"token operator\">=</span> mapperClazz<span class=\"token punctuation\">.</span><span class=\"token function\">getGenericInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">></span></span> baseMapperTypeOptional <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>iface <span class=\"token operator\">-></span> iface <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>iface <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ParameterizedType</span><span class=\"token punctuation\">)</span> iface<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>iface <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span> iface<span class=\"token punctuation\">.</span><span class=\"token function\">getRawType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BaseMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>baseMapperTypeOptional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">ParameterizedType</span> baseMapperType <span class=\"token operator\">=</span> baseMapperTypeOptional<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">)</span> baseMapperType<span class=\"token punctuation\">.</span><span class=\"token function\">getActualTypeArguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">plugin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Properties</span> properties<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设计的 DTO 用于确定属性对应的创建时间字段属性和更新时间字段属性。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@Accessors</span><span class=\"token punctuation\">(</span>chain <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CUTimeDTO</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> createTimePropertyName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> updateTimePropertyName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> createTimeColumnName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> updateTimeColumnName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>包装对应的 SqlSource 在获取最后的 SQL （<code>SqlSource#getBoundSql</code>）中拼接创建和更新时间脚本。不在具体的 SqlSource 里面完成字段拼接加上预处理字段，是因为 mybatis 支持多种 SqlSource 包含 <code>StaticSqlSource</code>、<code>ProviderSqlSource</code>、<code>RawSqlSource</code>、<code>DynamicSqlSource</code>，且他们可以组合出现，可见还是有一定的复杂度的。所以才选择用包装类完成字段填充。这种是不建议自动填充那种包含不同值的字段的，因为这样会让预处理 SQL 没有发挥作用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFillUTimeUpdateSqlSource</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SqlSource</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSource</span> sqlSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnValue<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BoundSql</span> <span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> parameterObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sqlSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>parameterObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> boundSql<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BoundSql</span> boundSql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> newSql <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceIgnoreCase</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"set \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"set \"</span> <span class=\"token operator\">+</span> columnName <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> columnValue <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sql\"</span><span class=\"token punctuation\">,</span> newSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AutoFillCUTimeInsertSqlSource</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SqlSource</span>  <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SqlSource</span> sqlSource<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> columnValue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BoundSql</span> <span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> parameterObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">BoundSql</span> boundSql <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sqlSource<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundSql</span><span class=\"token punctuation\">(</span>parameterObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> boundSql<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">replaceBoundSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BoundSql</span> boundSql<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">String</span> sql <span class=\"token operator\">=</span> boundSql<span class=\"token punctuation\">.</span><span class=\"token function\">getSql</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Pattern</span> pattern <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\(\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Matcher</span> matcher <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">matcher</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> newSql <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matcher<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> matcher<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            newSql <span class=\"token operator\">=</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> columnName <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> sql<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOfIgnoreCase</span><span class=\"token punctuation\">(</span>newSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"values\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> index <span class=\"token operator\">+</span> <span class=\"token string\">\"values\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">&lt;</span> newSql<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index1 <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            index1 <span class=\"token operator\">=</span> index1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> next <span class=\"token operator\">=</span> newSql<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>index1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token char\">' '</span> <span class=\"token operator\">||</span> next <span class=\"token operator\">==</span> <span class=\"token char\">'\\\\'</span> <span class=\"token operator\">||</span> next <span class=\"token operator\">==</span> <span class=\"token char\">'n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            index1 <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOfIgnoreCase</span><span class=\"token punctuation\">(</span>newSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"values\"</span><span class=\"token punctuation\">,</span> index1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index1 <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">String</span> replace <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>newSql<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> index1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newSql <span class=\"token operator\">=</span> newSql<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>replace<span class=\"token punctuation\">,</span> replace <span class=\"token operator\">+</span> columnValue <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span>boundSql<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sql\"</span><span class=\"token punctuation\">,</span> newSql<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"question-猜测你会有这样的疑问\"><a href=\"#question-猜测你会有这样的疑问\" class=\"headerlink\" title=\":question: 猜测你会有这样的疑问\"></a>:question: 猜测你会有这样的疑问</h4><p>为什么不让项目直接集成 mybatis-plus 修改 pojo 就能快速解决问题，不用这么复杂。当然我统一这个思路，但这个思路适合于 pojo 少，且使用 <code>@Table</code> 、<code>@Column</code> 等数据库型的注解的项目。否则，在大项目中还是工作量及风险还是比较高。但这不影响我推荐使用 mybatis-plus。</p>\n"},{"title":"JVM 的垃圾回收器们","date":"2024-03-22T05:28:28.000Z","_content":"### 堆内存分配\n\nJVM 将堆内存划分为新生代、老年代和 metadata 空间。新生代被分为 eden 空间、Survivor From 空间、Survivor To 空间。垃圾回收基本是对 eden 空间、Survivor From 空间和老年代的内存回收。但是，不是每次垃圾回收都会触发老年代的内存回收，这个在 [垃圾回收器们](#垃圾回收器们) 会再次总结。\n\n![JVM_heap.png](images/2024/jvm/JVM_1.png)\n\n### 回收对象\n\n当对象不再被引用时，此时对象被认为是**垃圾对象**，会在垃圾回收器运行时被回收。在 JVM 有强引用、弱引用、软引用和虚引用四种对象引用类型。其中，**强引用**，为最常见的引用类型，通过关键字 new 创建的对象默认是强引用。只要强引用指向一个对象就表示对象依旧活着。**弱引用**，将对象引用保存在弱引用对象中，如果垃圾回收器运行时，这个弱引用对象对垃圾回收器而言依旧会被回收。而弱引用使用场景，在没有强引用指向的对象时，在被 \bGC 前还能通过弱引用来获取对象，使用该对象并能再次用一个强引用指向它，不用重新运行逻辑装载对象。**软引用**，对象应用保存在软引用对象中，垃圾回收器运行时会判断堆内存是否充足。如果充足，垃圾回收器不会在当下回收被软引用对象指向的对象。如果不充足，垃圾回收器会立即回收被软引用对象指向的对象。**虚引用**，将对象引用保存在虚引用对象中，通过虚引用对象无法获取指向的对象，除非对象强引用未断连。如果垃圾回收器运行时，虚引用对象指向对象回收后，垃圾回收器会把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收，完成对象回收后的资源释放。\n\n```java\n    String test = new String(\"test123\");\n    // 弱引用\n    WeakReference<String> testWeakReference = new WeakReference<String>(test);\n    testWeakReference.get();\n    // 软引用\n    SoftReference<String> testSoftReference = new SoftReference<String>(test);\n    testSoftReference.get();\n    // 虚引用\n    ReferenceQueue<String> referenceQueue = new ReferenceQueue();\n    PhantomReference<String> testPhantomReference = new PhantomReference<String>(test, referenceQueue);\n    // 虚引用通过队列 poll 判断 test 被回收.\n    referenceQueue.poll();\n```\n\n### 垃圾回收器算法\n\n#### 标记-清理（Mark-Sweep)\n\n首先，扫描整个空间通过对象可达性判断找到没有被引用的对象，标记这类对象需要清理。其次，扫描整个空间清理被标记的对象。缺点，直接清理标记对象，可能会照成内存空间碎片化。需要整个空间扫描两次。\n\n![mark-sweep.jpg](images/2024/jvm/JVM_2.jpeg)\n\n#### 复制（Copying）\n\n将内存划分为两个大小相等的空间，保证每次仅有一个空间被使用。当被使用的空间快用完触发回收时，需要在当前空间扫描出活跃对象，将活跃对象拷贝到另一个未使用空间，清理使用空间（这时使用空间就会变成未被使用空间）。缺点，内存运行时被使用空间为 1/2。\n\n![copying.jpg](images/2024/jvm/JVM_3.jpeg)\n\n在 JVM 运行过程中，大部分对象是 “朝生夕死” 约占 98%。也就是说真正需要长期活着的对象占用少。也就说明这样的对半空间，不算浪费很多。其中，98% 对象在 eden 区域在内存划分中占大头默认比例为 80%。复制算法作用于 Survivor From 空间  和 Survivor To 空间，默认占用 10%。\n\n#### 标记-整理（Mark-Compact）\n\n标记依旧是标记需要清理的对象。整理是将存货的对象向一端移动，然后将边界外的对象清理掉。这样没有内存碎片。与清理相比，整理后没有内存碎片。与拷贝相比，整理并没有划分出一半空闲空间。\n\n![mark-compact.jpg](images/2024/jvm/JVM_4.jpeg)\n\n### GC 术语\n\n部分收集（Partial GC），目标不是完整收集整个 Java 堆的垃圾收集。其中，新生代收集（Minor GC/Young GC），目标只是新生代的垃圾收集。老年代收集（Major GC/Old GC），只是老年代的垃圾收集，目前只有 CMS 会有单独收集老年代的行为，另外请注意 Major GC 这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。混合收集（Mixed GC），目标是收集整个新生代以及部分老年代的垃圾收集，目前只有 G1 s回收器会有这种行为。整堆收集（Full GC），收集整个 Java 堆的垃圾收集。\n\n可以作为 GC Root 对象的有，虚拟机栈（栈帧中的本地变量表）中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中 JNI 引用的对象。\n\n### 垃圾回收器们\n\n以算法来说，分代回收是按照不同区域的特点，选用适合的垃圾回收算法和垃圾回收器，年轻代垃圾回收频繁追求响应时间短和程序终止时间短。分为年轻代回收器，Serial、ParNew、Parallel Scavenge、G1、ZGC。老年代回收器，SerialOld 、Parallel Old、CMS、G1。\n\n#### Serial\n\n串行回收器，最古老、最简单的垃圾回收器。进行垃圾收集时只使用一个线程。使用的是标记复制算法。在标记和复制两个环节上，暂停所有应用线程（`stop-the-word`）。\n\n#### Serial Old\n\n单线程串行老年代标记整理算法的垃圾回收。与 Serial 匹配的老年代垃圾回收器。如果老年代内存大，意味着垃圾回收耗时很长。\n\n#### Parallel Scavenge\n\n使用标记复制算法及多线程进行年轻代垃圾回收。但与 ParNew 相比，它能达到一个可控的吞吐量。吞吐量 =  CPU 运行用户线程时间 / CPU 总时间。使用 `-XX:MaxGCPauseMillis` 最大垃圾收集停顿时间，`-XX:GCTimeRatio` 垃圾回收时间占总时间比例。如果设置时间变短，这意味着回收更加频繁，导致吞吐量降低。\n\n#### Parallel Old\n\n多线程并行老年代标记整理算法的垃圾回收，吞吐量优先的垃圾回收器。与 Parallel Scavenge 匹配的老年代垃圾回收器。使用 `-XX:UseParallelOldGC` 开启此垃圾回收器。\n\n#### ParNew\n\n使用标记复制算法及多线程进行年轻代垃圾回收。垃圾回收过程中，会暂停所有应用线程。`-XX:ParallelGCThreads` 设置垃圾回收器并行执行线程数，默认开启和 CPU 数据相同的线程数。\n\n#### CMS\n\nCMS 采用标记清除算法，只会回收老年代空间。CMS 是一种预处理垃圾回收器，需要在老年代内存耗尽前完成垃圾回收，否则会导致并发回收失败，失败会退化为 SerialOld 垃圾回收器。因此 CMS 可设置 `-XX:CMSInitiatingOccupancyFraction` 确定开始垃圾回收启动阈值。`-XX:+UseConcMarkSweepGC` 启动 CMS 老年代垃圾回收。\n\n**CMS 初始标记（STW）**，标记老年代 GC Roots 直接引用对象，`-XX:+CMSParallelInitalMarkEnabled` 开启标记并行化，`-XX:ParallelGCThreads` 线程数不要超过 CPU 核数。\n\n**CMS 并发标记**，沿着初始标记的对象寻找存活对象，该阶段与应用程序并发运行。需要对并发标记过程中，对老年代对象引用关系发生变更，需要重新标记（会标记为 Dirty）。并发标记时，用不同颜色标记（三色标记法）老年代对象，黑色表示对象已经被扫描过且存活、灰色表示对象至少存在一个引用还没有被扫描过、白色表示对象没有被扫描过。\n\n**并发预处理**，并发预清理主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为Dirty 的 Card ）。\n\n**可终止预处理**，可终止预处理阶段与并发预处理节点一样，主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为 Dirty 的 Card ）。但是可终止预处理是有条件触发的，触发条件由CMS的两个参数控制 `-CMSScheduleRemarkEdenSizeThreshold` 默认值 2M 和 `-CMSScheduleRemarkEdenPenetration` 默认值 50%，当 Eden 空间使用超过 2M 时，启动可终止预处理，当 Eden 空间使用率到达 50% 时中断，进入重新标记阶段。\n\n**重新标记（STW）**，主要是标记整个老年代的所有的存活对象，该阶段会扫描整个堆内存。扫描新生代的原因是因为老年代中的对象，如果被新生代中的对象引用，会被视为存活对象，即使新生代的对象已经不可达，也会使用这些不可达的对象当GC Root 来扫描老年代。重新标记阶段耗时较长，可以通过设置参数`-XX:+CMSScavengeBeforeRemark` 在重新标记前先执行一次 Minor GC，回收掉新生代中不可达对象，并将剩余对象转入幸存者区或晋升到老年代，这样在扫描新生代时，只需要扫描幸存者区对象即可，将大大减少扫描对象所需时长。\n\n同时，可通过设置 `-CMSParallelRemarkEnabled` 开启并行重新标记，提高标记效率，减少重新标记处理时长。\n\n**并发清除**，主要是清除那些没有被标记的对象，回收内存空间。但过程中产生的垃圾只能在下次 GC 中处理。因为是清理方法产生的碎片，因变量 `-XX:UseCMSCompactAtFullCollection` 压缩开关， `-XX:CMSFullGCsBeforeCompaction` 决定经过多少次 FullGC 之后进行空间压缩。\n\n**并发重置**，主要是重置 CMS 数据结构，准备在下一个CMS生命周期中使用。\n\n#### G1\n\nG1 将 java 堆划分为多个大小相等的独立区域，JVM 建议将其分为 2048 个 Region，而 Region 大小为 堆大小/2048。G1 保留了年轻代和老年代概念，不再物理隔离，都是可以不连续 Region 集合。可以通过 `-XX:G1NewSizePercent` 设置新生代初始占比，通过 `-XX:G1MaxNewSizePercent` 设置新生代最大占比。一个 Region 可能之前是年轻代，如果 Region 进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。G1 有专门分配大对象的 Region 叫 **Humongous 区**（专门存放短期巨型对象不用直接进入老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销），大对象大小超过 150% Region 就会被放入 Humongous 区，如果一个对象太大会申请多个 Region，如果剩余 Region 不够对象空间，会触发一次 Full GC。Full GC 会收集年轻代、老年代和 Humongous 区。\n\nG1 为每个分区各自分配一个 RSet（Remembered Set）它内部类似于一个反向指针，记录了其它 Region 对当前 Region 的引用情况。但因为如果引用源是本分区的对象，那么就不需要记录在 RSet 中、且同时 G1 每次 GC 时，所有的新生代都会被扫描，因此引用源是年轻代的对象，也不需要在 RSet 中记录，所以最终只需要记录老年代到新生代之间的引用即可。\n\nCard，每个 Region 内部又被分成了若干个大小为512 Byte的 Card，标识堆内存最小可用粒度。分配的对象会占用物理上连续的若干个卡片。当查找对分区Region 内对象的引用时便可通过记录卡片来查找该引用对象。每个Region就有一个卡表来映射vRegion 中的卡页，整堆有个全局卡片表(`Global Card Table`) 存储所有Region的卡表情况。每一个Region的Card，都用一个 Byte 来记录是否修改过。卡表即这些byte的集合。实际上，如果把RS理解成一个概念模型，那么 Card Table 就可以说是 RSet 的一种实现方式。\n\n![G1.png](images/2024/jvm/JVM_6.png)\n\n垃圾回收过程，\n\n1. 初始标记：标记 GC ROOT 能关联到的对象，需要STW\n2. 并发标记：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，扫描完成后还会重新处理并发标记过程中产生变动的对象。使用三色标记法标记对象。\n3. 最终标记：短暂暂停用户线程，再处理一次，需要STW\n4. 复制回收：更新 Regio n的统计数据，对每个Region的回收价值和成本排序，根据用户设置的停顿时间制定回收计划。再把需要回收的 Region 中存活对象复制到空的Region，同时清理旧的Region。需要STW。\n\n**YongGC** ，要么 eden 区放满，要么 G1 计算回收时间接近 `-XX:MaxGCPauseMills` 设置值会触发。G1会收集每个 Region 回收之后的空间大小、回收需要的时间。根据评估得到的价值，在后台维护一个优先级列表，然后基于我们设置的停顿时间优先回收**价值收益最大**的 Region。但 YongGC 的标记-复制是全过程 STW。\n\n**MixedGC**，老年代对占有率达到 `-XX:InitiatingHeapOccupancyPercent` 值触发，回收 Yong 和 部分Old（G1 优先队列的优先顺序）以及大对象区。主要使用复制算法，拷贝过程中发现没有足够的空 region 承载拷贝对象时触发 Full GC。\n\n**FullGC**，STW 采用单线程进行标记、清理和压缩整理。\n\nG1 是 jdk9+ 的默认垃圾回收器。\n\n#### ZGC\n\nZGC 是 jdk11 引入极低延迟的垃圾回收器，号称能处理 TB 级内存且停顿时间（STW）不超过 10ms，停顿时间不会随着堆大小或者活跃对象的大小而增加。ZGC 目前而言不分代。ZGC Region 分为三种容量，小型 Region 为 2MB 用于放置小于 256 KB 的小对象，中型 Region 为 32MB 放置大于等于 256KB 但小于 4MB 对象，大型 Region 容量不固定必须为 2MB 的整数倍放置 4MB 或以上的大对象且每个大型 Region 中只会存放一个大对象。\n\nZGC 在标记、转移和重定位阶段几乎都是并发的，这是 ZGC 实现停顿时间小于 10 ms 目标的最关键原因。ZGC 分为多个阶段，初始标记、并发标记、再标记、并发转移准备、初始转移、并发转移。可见只有 初始标记、再标记 和初始转移 会 STW。\n\n![ZGC.png](images/2024/jvm/JVM_5.png)\n\nZGC 实现多个并发过程，是依据**着色指针** 实现，而且仅在 64 位操作系统上可用，将 64 位虚拟地址空间划分为 [0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。ZGC使用了内存多重映射（Multi-Mapping）将多个不同的虚拟内存地址映射到同一个物理内存地址上，这是一种多对一映射。\n\n![JVM_64bit.png](images/2024/jvm/jvm_7.png)\n\n初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短。再标记阶段 STW 时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC 几乎所有暂停都只依赖于 GC Roots 集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全 STW，且停顿时间随存活对象的大小增加而增加。\n\n从堆中读取对象，且对象中属性指向的对象，会加入读屏障。如果这时候对象在 GC 时被移动了，接下来 JVM 就会加上一个读屏障，这个屏障会把读出的指针更新到对象的新地址上，并且把堆里的这个指针“修正”到原本的字段里。这样就算 GC 把对象移动了，读屏障也会发现并修正指针，于是应用代码就永远都会持有更新后的有效指针，而且不需要 STW。\n\n垃圾回收过程：\n\n1. **初始化**：ZGC 初始化之后，整个内存空间的地址视图被设置为 Remapped，标记是在染色指针上。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。\n\n2. **并发标记阶段**：第一次进入标记阶段时视图为 M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从 Remapped 调整为 M0。所以，在标记阶段结束之后，对象的地址要么是 M0 视图，要么是 Remapped。如果对象的地址是 M0 视图，那么说明对象是活跃的；如果对象的地址是Remapped 视图，说明对象是不活跃的。\n\n3. **并发转移阶段**：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被 GC 转移线程或者应用线程访问过，那么就将对象的地址视图从 M0 调整为 Remapped。\n\n### 参考\n\n- [JVM堆内存和非堆内存](https://xstarcd.github.io/wiki/Java/JVM_Heap_Non-heap.html)\n\n- [万字详解，一文带你掌握 JVM 垃圾回收！](https://zhuanlan.zhihu.com/p/111016492)\n\n- [ZGC 垃圾回收分析](https://mikechen.cc/16719.html)\n\n- [垃圾回收器G1&ZGC详解](https://blog.csdn.net/u011107814/article/details/118420893)\n\n- [G1 垃圾收集器详解 - 掘金](https://juejin.cn/post/7209266987049844791)\n\n- [CMS 垃圾回收](https://cloud.tencent.com/developer/article/1897189)\n\n- [新一代垃圾回收器ZGC的探索与实践 - 美团技术团队](https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html)\n\n- [JVM ZGC 内存管理 | JustNote](https://www.selinux.tech/java/core/jvm-zgc-memory)\n\n- [深入解析ZGC垃圾回收器 - Booksea - 博客园](https://www.cnblogs.com/booksea/p/17665685.html)()\n","source":"_posts/JVM-的垃圾回收器们.md","raw":"---\ntitle: JVM 的垃圾回收器们\ndate: 2024-03-22 13:28:28\ncategories:\n- 基础\ntags:\n- JVM\n- 垃圾回收\n- ZGC\n---\n### 堆内存分配\n\nJVM 将堆内存划分为新生代、老年代和 metadata 空间。新生代被分为 eden 空间、Survivor From 空间、Survivor To 空间。垃圾回收基本是对 eden 空间、Survivor From 空间和老年代的内存回收。但是，不是每次垃圾回收都会触发老年代的内存回收，这个在 [垃圾回收器们](#垃圾回收器们) 会再次总结。\n\n![JVM_heap.png](images/2024/jvm/JVM_1.png)\n\n### 回收对象\n\n当对象不再被引用时，此时对象被认为是**垃圾对象**，会在垃圾回收器运行时被回收。在 JVM 有强引用、弱引用、软引用和虚引用四种对象引用类型。其中，**强引用**，为最常见的引用类型，通过关键字 new 创建的对象默认是强引用。只要强引用指向一个对象就表示对象依旧活着。**弱引用**，将对象引用保存在弱引用对象中，如果垃圾回收器运行时，这个弱引用对象对垃圾回收器而言依旧会被回收。而弱引用使用场景，在没有强引用指向的对象时，在被 \bGC 前还能通过弱引用来获取对象，使用该对象并能再次用一个强引用指向它，不用重新运行逻辑装载对象。**软引用**，对象应用保存在软引用对象中，垃圾回收器运行时会判断堆内存是否充足。如果充足，垃圾回收器不会在当下回收被软引用对象指向的对象。如果不充足，垃圾回收器会立即回收被软引用对象指向的对象。**虚引用**，将对象引用保存在虚引用对象中，通过虚引用对象无法获取指向的对象，除非对象强引用未断连。如果垃圾回收器运行时，虚引用对象指向对象回收后，垃圾回收器会把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收，完成对象回收后的资源释放。\n\n```java\n    String test = new String(\"test123\");\n    // 弱引用\n    WeakReference<String> testWeakReference = new WeakReference<String>(test);\n    testWeakReference.get();\n    // 软引用\n    SoftReference<String> testSoftReference = new SoftReference<String>(test);\n    testSoftReference.get();\n    // 虚引用\n    ReferenceQueue<String> referenceQueue = new ReferenceQueue();\n    PhantomReference<String> testPhantomReference = new PhantomReference<String>(test, referenceQueue);\n    // 虚引用通过队列 poll 判断 test 被回收.\n    referenceQueue.poll();\n```\n\n### 垃圾回收器算法\n\n#### 标记-清理（Mark-Sweep)\n\n首先，扫描整个空间通过对象可达性判断找到没有被引用的对象，标记这类对象需要清理。其次，扫描整个空间清理被标记的对象。缺点，直接清理标记对象，可能会照成内存空间碎片化。需要整个空间扫描两次。\n\n![mark-sweep.jpg](images/2024/jvm/JVM_2.jpeg)\n\n#### 复制（Copying）\n\n将内存划分为两个大小相等的空间，保证每次仅有一个空间被使用。当被使用的空间快用完触发回收时，需要在当前空间扫描出活跃对象，将活跃对象拷贝到另一个未使用空间，清理使用空间（这时使用空间就会变成未被使用空间）。缺点，内存运行时被使用空间为 1/2。\n\n![copying.jpg](images/2024/jvm/JVM_3.jpeg)\n\n在 JVM 运行过程中，大部分对象是 “朝生夕死” 约占 98%。也就是说真正需要长期活着的对象占用少。也就说明这样的对半空间，不算浪费很多。其中，98% 对象在 eden 区域在内存划分中占大头默认比例为 80%。复制算法作用于 Survivor From 空间  和 Survivor To 空间，默认占用 10%。\n\n#### 标记-整理（Mark-Compact）\n\n标记依旧是标记需要清理的对象。整理是将存货的对象向一端移动，然后将边界外的对象清理掉。这样没有内存碎片。与清理相比，整理后没有内存碎片。与拷贝相比，整理并没有划分出一半空闲空间。\n\n![mark-compact.jpg](images/2024/jvm/JVM_4.jpeg)\n\n### GC 术语\n\n部分收集（Partial GC），目标不是完整收集整个 Java 堆的垃圾收集。其中，新生代收集（Minor GC/Young GC），目标只是新生代的垃圾收集。老年代收集（Major GC/Old GC），只是老年代的垃圾收集，目前只有 CMS 会有单独收集老年代的行为，另外请注意 Major GC 这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。混合收集（Mixed GC），目标是收集整个新生代以及部分老年代的垃圾收集，目前只有 G1 s回收器会有这种行为。整堆收集（Full GC），收集整个 Java 堆的垃圾收集。\n\n可以作为 GC Root 对象的有，虚拟机栈（栈帧中的本地变量表）中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中 JNI 引用的对象。\n\n### 垃圾回收器们\n\n以算法来说，分代回收是按照不同区域的特点，选用适合的垃圾回收算法和垃圾回收器，年轻代垃圾回收频繁追求响应时间短和程序终止时间短。分为年轻代回收器，Serial、ParNew、Parallel Scavenge、G1、ZGC。老年代回收器，SerialOld 、Parallel Old、CMS、G1。\n\n#### Serial\n\n串行回收器，最古老、最简单的垃圾回收器。进行垃圾收集时只使用一个线程。使用的是标记复制算法。在标记和复制两个环节上，暂停所有应用线程（`stop-the-word`）。\n\n#### Serial Old\n\n单线程串行老年代标记整理算法的垃圾回收。与 Serial 匹配的老年代垃圾回收器。如果老年代内存大，意味着垃圾回收耗时很长。\n\n#### Parallel Scavenge\n\n使用标记复制算法及多线程进行年轻代垃圾回收。但与 ParNew 相比，它能达到一个可控的吞吐量。吞吐量 =  CPU 运行用户线程时间 / CPU 总时间。使用 `-XX:MaxGCPauseMillis` 最大垃圾收集停顿时间，`-XX:GCTimeRatio` 垃圾回收时间占总时间比例。如果设置时间变短，这意味着回收更加频繁，导致吞吐量降低。\n\n#### Parallel Old\n\n多线程并行老年代标记整理算法的垃圾回收，吞吐量优先的垃圾回收器。与 Parallel Scavenge 匹配的老年代垃圾回收器。使用 `-XX:UseParallelOldGC` 开启此垃圾回收器。\n\n#### ParNew\n\n使用标记复制算法及多线程进行年轻代垃圾回收。垃圾回收过程中，会暂停所有应用线程。`-XX:ParallelGCThreads` 设置垃圾回收器并行执行线程数，默认开启和 CPU 数据相同的线程数。\n\n#### CMS\n\nCMS 采用标记清除算法，只会回收老年代空间。CMS 是一种预处理垃圾回收器，需要在老年代内存耗尽前完成垃圾回收，否则会导致并发回收失败，失败会退化为 SerialOld 垃圾回收器。因此 CMS 可设置 `-XX:CMSInitiatingOccupancyFraction` 确定开始垃圾回收启动阈值。`-XX:+UseConcMarkSweepGC` 启动 CMS 老年代垃圾回收。\n\n**CMS 初始标记（STW）**，标记老年代 GC Roots 直接引用对象，`-XX:+CMSParallelInitalMarkEnabled` 开启标记并行化，`-XX:ParallelGCThreads` 线程数不要超过 CPU 核数。\n\n**CMS 并发标记**，沿着初始标记的对象寻找存活对象，该阶段与应用程序并发运行。需要对并发标记过程中，对老年代对象引用关系发生变更，需要重新标记（会标记为 Dirty）。并发标记时，用不同颜色标记（三色标记法）老年代对象，黑色表示对象已经被扫描过且存活、灰色表示对象至少存在一个引用还没有被扫描过、白色表示对象没有被扫描过。\n\n**并发预处理**，并发预清理主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为Dirty 的 Card ）。\n\n**可终止预处理**，可终止预处理阶段与并发预处理节点一样，主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为 Dirty 的 Card ）。但是可终止预处理是有条件触发的，触发条件由CMS的两个参数控制 `-CMSScheduleRemarkEdenSizeThreshold` 默认值 2M 和 `-CMSScheduleRemarkEdenPenetration` 默认值 50%，当 Eden 空间使用超过 2M 时，启动可终止预处理，当 Eden 空间使用率到达 50% 时中断，进入重新标记阶段。\n\n**重新标记（STW）**，主要是标记整个老年代的所有的存活对象，该阶段会扫描整个堆内存。扫描新生代的原因是因为老年代中的对象，如果被新生代中的对象引用，会被视为存活对象，即使新生代的对象已经不可达，也会使用这些不可达的对象当GC Root 来扫描老年代。重新标记阶段耗时较长，可以通过设置参数`-XX:+CMSScavengeBeforeRemark` 在重新标记前先执行一次 Minor GC，回收掉新生代中不可达对象，并将剩余对象转入幸存者区或晋升到老年代，这样在扫描新生代时，只需要扫描幸存者区对象即可，将大大减少扫描对象所需时长。\n\n同时，可通过设置 `-CMSParallelRemarkEnabled` 开启并行重新标记，提高标记效率，减少重新标记处理时长。\n\n**并发清除**，主要是清除那些没有被标记的对象，回收内存空间。但过程中产生的垃圾只能在下次 GC 中处理。因为是清理方法产生的碎片，因变量 `-XX:UseCMSCompactAtFullCollection` 压缩开关， `-XX:CMSFullGCsBeforeCompaction` 决定经过多少次 FullGC 之后进行空间压缩。\n\n**并发重置**，主要是重置 CMS 数据结构，准备在下一个CMS生命周期中使用。\n\n#### G1\n\nG1 将 java 堆划分为多个大小相等的独立区域，JVM 建议将其分为 2048 个 Region，而 Region 大小为 堆大小/2048。G1 保留了年轻代和老年代概念，不再物理隔离，都是可以不连续 Region 集合。可以通过 `-XX:G1NewSizePercent` 设置新生代初始占比，通过 `-XX:G1MaxNewSizePercent` 设置新生代最大占比。一个 Region 可能之前是年轻代，如果 Region 进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。G1 有专门分配大对象的 Region 叫 **Humongous 区**（专门存放短期巨型对象不用直接进入老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销），大对象大小超过 150% Region 就会被放入 Humongous 区，如果一个对象太大会申请多个 Region，如果剩余 Region 不够对象空间，会触发一次 Full GC。Full GC 会收集年轻代、老年代和 Humongous 区。\n\nG1 为每个分区各自分配一个 RSet（Remembered Set）它内部类似于一个反向指针，记录了其它 Region 对当前 Region 的引用情况。但因为如果引用源是本分区的对象，那么就不需要记录在 RSet 中、且同时 G1 每次 GC 时，所有的新生代都会被扫描，因此引用源是年轻代的对象，也不需要在 RSet 中记录，所以最终只需要记录老年代到新生代之间的引用即可。\n\nCard，每个 Region 内部又被分成了若干个大小为512 Byte的 Card，标识堆内存最小可用粒度。分配的对象会占用物理上连续的若干个卡片。当查找对分区Region 内对象的引用时便可通过记录卡片来查找该引用对象。每个Region就有一个卡表来映射vRegion 中的卡页，整堆有个全局卡片表(`Global Card Table`) 存储所有Region的卡表情况。每一个Region的Card，都用一个 Byte 来记录是否修改过。卡表即这些byte的集合。实际上，如果把RS理解成一个概念模型，那么 Card Table 就可以说是 RSet 的一种实现方式。\n\n![G1.png](images/2024/jvm/JVM_6.png)\n\n垃圾回收过程，\n\n1. 初始标记：标记 GC ROOT 能关联到的对象，需要STW\n2. 并发标记：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，扫描完成后还会重新处理并发标记过程中产生变动的对象。使用三色标记法标记对象。\n3. 最终标记：短暂暂停用户线程，再处理一次，需要STW\n4. 复制回收：更新 Regio n的统计数据，对每个Region的回收价值和成本排序，根据用户设置的停顿时间制定回收计划。再把需要回收的 Region 中存活对象复制到空的Region，同时清理旧的Region。需要STW。\n\n**YongGC** ，要么 eden 区放满，要么 G1 计算回收时间接近 `-XX:MaxGCPauseMills` 设置值会触发。G1会收集每个 Region 回收之后的空间大小、回收需要的时间。根据评估得到的价值，在后台维护一个优先级列表，然后基于我们设置的停顿时间优先回收**价值收益最大**的 Region。但 YongGC 的标记-复制是全过程 STW。\n\n**MixedGC**，老年代对占有率达到 `-XX:InitiatingHeapOccupancyPercent` 值触发，回收 Yong 和 部分Old（G1 优先队列的优先顺序）以及大对象区。主要使用复制算法，拷贝过程中发现没有足够的空 region 承载拷贝对象时触发 Full GC。\n\n**FullGC**，STW 采用单线程进行标记、清理和压缩整理。\n\nG1 是 jdk9+ 的默认垃圾回收器。\n\n#### ZGC\n\nZGC 是 jdk11 引入极低延迟的垃圾回收器，号称能处理 TB 级内存且停顿时间（STW）不超过 10ms，停顿时间不会随着堆大小或者活跃对象的大小而增加。ZGC 目前而言不分代。ZGC Region 分为三种容量，小型 Region 为 2MB 用于放置小于 256 KB 的小对象，中型 Region 为 32MB 放置大于等于 256KB 但小于 4MB 对象，大型 Region 容量不固定必须为 2MB 的整数倍放置 4MB 或以上的大对象且每个大型 Region 中只会存放一个大对象。\n\nZGC 在标记、转移和重定位阶段几乎都是并发的，这是 ZGC 实现停顿时间小于 10 ms 目标的最关键原因。ZGC 分为多个阶段，初始标记、并发标记、再标记、并发转移准备、初始转移、并发转移。可见只有 初始标记、再标记 和初始转移 会 STW。\n\n![ZGC.png](images/2024/jvm/JVM_5.png)\n\nZGC 实现多个并发过程，是依据**着色指针** 实现，而且仅在 64 位操作系统上可用，将 64 位虚拟地址空间划分为 [0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。ZGC使用了内存多重映射（Multi-Mapping）将多个不同的虚拟内存地址映射到同一个物理内存地址上，这是一种多对一映射。\n\n![JVM_64bit.png](images/2024/jvm/jvm_7.png)\n\n初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短。再标记阶段 STW 时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC 几乎所有暂停都只依赖于 GC Roots 集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全 STW，且停顿时间随存活对象的大小增加而增加。\n\n从堆中读取对象，且对象中属性指向的对象，会加入读屏障。如果这时候对象在 GC 时被移动了，接下来 JVM 就会加上一个读屏障，这个屏障会把读出的指针更新到对象的新地址上，并且把堆里的这个指针“修正”到原本的字段里。这样就算 GC 把对象移动了，读屏障也会发现并修正指针，于是应用代码就永远都会持有更新后的有效指针，而且不需要 STW。\n\n垃圾回收过程：\n\n1. **初始化**：ZGC 初始化之后，整个内存空间的地址视图被设置为 Remapped，标记是在染色指针上。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。\n\n2. **并发标记阶段**：第一次进入标记阶段时视图为 M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从 Remapped 调整为 M0。所以，在标记阶段结束之后，对象的地址要么是 M0 视图，要么是 Remapped。如果对象的地址是 M0 视图，那么说明对象是活跃的；如果对象的地址是Remapped 视图，说明对象是不活跃的。\n\n3. **并发转移阶段**：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被 GC 转移线程或者应用线程访问过，那么就将对象的地址视图从 M0 调整为 Remapped。\n\n### 参考\n\n- [JVM堆内存和非堆内存](https://xstarcd.github.io/wiki/Java/JVM_Heap_Non-heap.html)\n\n- [万字详解，一文带你掌握 JVM 垃圾回收！](https://zhuanlan.zhihu.com/p/111016492)\n\n- [ZGC 垃圾回收分析](https://mikechen.cc/16719.html)\n\n- [垃圾回收器G1&ZGC详解](https://blog.csdn.net/u011107814/article/details/118420893)\n\n- [G1 垃圾收集器详解 - 掘金](https://juejin.cn/post/7209266987049844791)\n\n- [CMS 垃圾回收](https://cloud.tencent.com/developer/article/1897189)\n\n- [新一代垃圾回收器ZGC的探索与实践 - 美团技术团队](https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html)\n\n- [JVM ZGC 内存管理 | JustNote](https://www.selinux.tech/java/core/jvm-zgc-memory)\n\n- [深入解析ZGC垃圾回收器 - Booksea - 博客园](https://www.cnblogs.com/booksea/p/17665685.html)()\n","slug":"JVM-的垃圾回收器们","published":1,"updated":"2024-03-22T05:34:01.235Z","_id":"clu287msm000077c0bqkdfujz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"堆内存分配\"><a href=\"#堆内存分配\" class=\"headerlink\" title=\"堆内存分配\"></a>堆内存分配</h3><p>JVM 将堆内存划分为新生代、老年代和 metadata 空间。新生代被分为 eden 空间、Survivor From 空间、Survivor To 空间。垃圾回收基本是对 eden 空间、Survivor From 空间和老年代的内存回收。但是，不是每次垃圾回收都会触发老年代的内存回收，这个在 <a href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%BB%AC\">垃圾回收器们</a> 会再次总结。</p>\n<p><img src=\"/images/2024/jvm/JVM_1.png\" alt=\"JVM_heap.png\"></p>\n<h3 id=\"回收对象\"><a href=\"#回收对象\" class=\"headerlink\" title=\"回收对象\"></a>回收对象</h3><p>当对象不再被引用时，此时对象被认为是<strong>垃圾对象</strong>，会在垃圾回收器运行时被回收。在 JVM 有强引用、弱引用、软引用和虚引用四种对象引用类型。其中，<strong>强引用</strong>，为最常见的引用类型，通过关键字 new 创建的对象默认是强引用。只要强引用指向一个对象就表示对象依旧活着。<strong>弱引用</strong>，将对象引用保存在弱引用对象中，如果垃圾回收器运行时，这个弱引用对象对垃圾回收器而言依旧会被回收。而弱引用使用场景，在没有强引用指向的对象时，在被 \bGC 前还能通过弱引用来获取对象，使用该对象并能再次用一个强引用指向它，不用重新运行逻辑装载对象。<strong>软引用</strong>，对象应用保存在软引用对象中，垃圾回收器运行时会判断堆内存是否充足。如果充足，垃圾回收器不会在当下回收被软引用对象指向的对象。如果不充足，垃圾回收器会立即回收被软引用对象指向的对象。<strong>虚引用</strong>，将对象引用保存在虚引用对象中，通过虚引用对象无法获取指向的对象，除非对象强引用未断连。如果垃圾回收器运行时，虚引用对象指向对象回收后，垃圾回收器会把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收，完成对象回收后的资源释放。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 弱引用</span>\n<span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> testWeakReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestWeakReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 软引用</span>\n<span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> testSoftReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestSoftReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 虚引用</span>\n<span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> referenceQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PhantomReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> testPhantomReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhantomReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span> referenceQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 虚引用通过队列 poll 判断 test 被回收.</span>\nreferenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"垃圾回收器算法\"><a href=\"#垃圾回收器算法\" class=\"headerlink\" title=\"垃圾回收器算法\"></a>垃圾回收器算法</h3><h4 id=\"标记-清理（Mark-Sweep\"><a href=\"#标记-清理（Mark-Sweep\" class=\"headerlink\" title=\"标记-清理（Mark-Sweep)\"></a>标记-清理（Mark-Sweep)</h4><p>首先，扫描整个空间通过对象可达性判断找到没有被引用的对象，标记这类对象需要清理。其次，扫描整个空间清理被标记的对象。缺点，直接清理标记对象，可能会照成内存空间碎片化。需要整个空间扫描两次。</p>\n<p><img src=\"/images/2024/jvm/JVM_2.jpeg\" alt=\"mark-sweep.jpg\"></p>\n<h4 id=\"复制（Copying）\"><a href=\"#复制（Copying）\" class=\"headerlink\" title=\"复制（Copying）\"></a>复制（Copying）</h4><p>将内存划分为两个大小相等的空间，保证每次仅有一个空间被使用。当被使用的空间快用完触发回收时，需要在当前空间扫描出活跃对象，将活跃对象拷贝到另一个未使用空间，清理使用空间（这时使用空间就会变成未被使用空间）。缺点，内存运行时被使用空间为 1/2。</p>\n<p><img src=\"/images/2024/jvm/JVM_3.jpeg\" alt=\"copying.jpg\"></p>\n<p>在 JVM 运行过程中，大部分对象是 “朝生夕死” 约占 98%。也就是说真正需要长期活着的对象占用少。也就说明这样的对半空间，不算浪费很多。其中，98% 对象在 eden 区域在内存划分中占大头默认比例为 80%。复制算法作用于 Survivor From 空间  和 Survivor To 空间，默认占用 10%。</p>\n<h4 id=\"标记-整理（Mark-Compact）\"><a href=\"#标记-整理（Mark-Compact）\" class=\"headerlink\" title=\"标记-整理（Mark-Compact）\"></a>标记-整理（Mark-Compact）</h4><p>标记依旧是标记需要清理的对象。整理是将存货的对象向一端移动，然后将边界外的对象清理掉。这样没有内存碎片。与清理相比，整理后没有内存碎片。与拷贝相比，整理并没有划分出一半空闲空间。</p>\n<p><img src=\"/images/2024/jvm/JVM_4.jpeg\" alt=\"mark-compact.jpg\"></p>\n<h3 id=\"GC-术语\"><a href=\"#GC-术语\" class=\"headerlink\" title=\"GC 术语\"></a>GC 术语</h3><p>部分收集（Partial GC），目标不是完整收集整个 Java 堆的垃圾收集。其中，新生代收集（Minor GC/Young GC），目标只是新生代的垃圾收集。老年代收集（Major GC/Old GC），只是老年代的垃圾收集，目前只有 CMS 会有单独收集老年代的行为，另外请注意 Major GC 这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。混合收集（Mixed GC），目标是收集整个新生代以及部分老年代的垃圾收集，目前只有 G1 s回收器会有这种行为。整堆收集（Full GC），收集整个 Java 堆的垃圾收集。</p>\n<p>可以作为 GC Root 对象的有，虚拟机栈（栈帧中的本地变量表）中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中 JNI 引用的对象。</p>\n<h3 id=\"垃圾回收器们\"><a href=\"#垃圾回收器们\" class=\"headerlink\" title=\"垃圾回收器们\"></a>垃圾回收器们</h3><p>以算法来说，分代回收是按照不同区域的特点，选用适合的垃圾回收算法和垃圾回收器，年轻代垃圾回收频繁追求响应时间短和程序终止时间短。分为年轻代回收器，Serial、ParNew、Parallel Scavenge、G1、ZGC。老年代回收器，SerialOld 、Parallel Old、CMS、G1。</p>\n<h4 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h4><p>串行回收器，最古老、最简单的垃圾回收器。进行垃圾收集时只使用一个线程。使用的是标记复制算法。在标记和复制两个环节上，暂停所有应用线程（<code>stop-the-word</code>）。</p>\n<h4 id=\"Serial-Old\"><a href=\"#Serial-Old\" class=\"headerlink\" title=\"Serial Old\"></a>Serial Old</h4><p>单线程串行老年代标记整理算法的垃圾回收。与 Serial 匹配的老年代垃圾回收器。如果老年代内存大，意味着垃圾回收耗时很长。</p>\n<h4 id=\"Parallel-Scavenge\"><a href=\"#Parallel-Scavenge\" class=\"headerlink\" title=\"Parallel Scavenge\"></a>Parallel Scavenge</h4><p>使用标记复制算法及多线程进行年轻代垃圾回收。但与 ParNew 相比，它能达到一个可控的吞吐量。吞吐量 =  CPU 运行用户线程时间 / CPU 总时间。使用 <code>-XX:MaxGCPauseMillis</code> 最大垃圾收集停顿时间，<code>-XX:GCTimeRatio</code> 垃圾回收时间占总时间比例。如果设置时间变短，这意味着回收更加频繁，导致吞吐量降低。</p>\n<h4 id=\"Parallel-Old\"><a href=\"#Parallel-Old\" class=\"headerlink\" title=\"Parallel Old\"></a>Parallel Old</h4><p>多线程并行老年代标记整理算法的垃圾回收，吞吐量优先的垃圾回收器。与 Parallel Scavenge 匹配的老年代垃圾回收器。使用 <code>-XX:UseParallelOldGC</code> 开启此垃圾回收器。</p>\n<h4 id=\"ParNew\"><a href=\"#ParNew\" class=\"headerlink\" title=\"ParNew\"></a>ParNew</h4><p>使用标记复制算法及多线程进行年轻代垃圾回收。垃圾回收过程中，会暂停所有应用线程。<code>-XX:ParallelGCThreads</code> 设置垃圾回收器并行执行线程数，默认开启和 CPU 数据相同的线程数。</p>\n<h4 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h4><p>CMS 采用标记清除算法，只会回收老年代空间。CMS 是一种预处理垃圾回收器，需要在老年代内存耗尽前完成垃圾回收，否则会导致并发回收失败，失败会退化为 SerialOld 垃圾回收器。因此 CMS 可设置 <code>-XX:CMSInitiatingOccupancyFraction</code> 确定开始垃圾回收启动阈值。<code>-XX:+UseConcMarkSweepGC</code> 启动 CMS 老年代垃圾回收。</p>\n<p><strong>CMS 初始标记（STW）</strong>，标记老年代 GC Roots 直接引用对象，<code>-XX:+CMSParallelInitalMarkEnabled</code> 开启标记并行化，<code>-XX:ParallelGCThreads</code> 线程数不要超过 CPU 核数。</p>\n<p><strong>CMS 并发标记</strong>，沿着初始标记的对象寻找存活对象，该阶段与应用程序并发运行。需要对并发标记过程中，对老年代对象引用关系发生变更，需要重新标记（会标记为 Dirty）。并发标记时，用不同颜色标记（三色标记法）老年代对象，黑色表示对象已经被扫描过且存活、灰色表示对象至少存在一个引用还没有被扫描过、白色表示对象没有被扫描过。</p>\n<p><strong>并发预处理</strong>，并发预清理主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为Dirty 的 Card&nbsp;）。</p>\n<p><strong>可终止预处理</strong>，可终止预处理阶段与并发预处理节点一样，主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为 Dirty 的 Card&nbsp;）。但是可终止预处理是有条件触发的，触发条件由CMS的两个参数控制 <code>-CMSScheduleRemarkEdenSizeThreshold</code> 默认值 2M 和 <code>-CMSScheduleRemarkEdenPenetration</code> 默认值 50%，当 Eden 空间使用超过 2M 时，启动可终止预处理，当 Eden 空间使用率到达 50% 时中断，进入重新标记阶段。</p>\n<p><strong>重新标记（STW）</strong>，主要是标记整个老年代的所有的存活对象，该阶段会扫描整个堆内存。扫描新生代的原因是因为老年代中的对象，如果被新生代中的对象引用，会被视为存活对象，即使新生代的对象已经不可达，也会使用这些不可达的对象当GC Root 来扫描老年代。重新标记阶段耗时较长，可以通过设置参数<code>-XX:+CMSScavengeBeforeRemark</code> 在重新标记前先执行一次 Minor GC，回收掉新生代中不可达对象，并将剩余对象转入幸存者区或晋升到老年代，这样在扫描新生代时，只需要扫描幸存者区对象即可，将大大减少扫描对象所需时长。</p>\n<p>同时，可通过设置 <code>-CMSParallelRemarkEnabled</code> 开启并行重新标记，提高标记效率，减少重新标记处理时长。</p>\n<p><strong>并发清除</strong>，主要是清除那些没有被标记的对象，回收内存空间。但过程中产生的垃圾只能在下次 GC 中处理。因为是清理方法产生的碎片，因变量 <code>-XX:UseCMSCompactAtFullCollection</code> 压缩开关， <code>-XX:CMSFullGCsBeforeCompaction</code> 决定经过多少次 FullGC 之后进行空间压缩。</p>\n<p><strong>并发重置</strong>，主要是重置 CMS 数据结构，准备在下一个CMS生命周期中使用。</p>\n<h4 id=\"G1\"><a href=\"#G1\" class=\"headerlink\" title=\"G1\"></a>G1</h4><p>G1 将 java 堆划分为多个大小相等的独立区域，JVM 建议将其分为 2048 个 Region，而 Region 大小为 堆大小/2048。G1 保留了年轻代和老年代概念，不再物理隔离，都是可以不连续 Region 集合。可以通过 <code>-XX:G1NewSizePercent</code> 设置新生代初始占比，通过 <code>-XX:G1MaxNewSizePercent</code> 设置新生代最大占比。一个 Region 可能之前是年轻代，如果 Region 进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。G1 有专门分配大对象的 Region 叫 <strong>Humongous 区</strong>（专门存放短期巨型对象不用直接进入老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销），大对象大小超过 150% Region 就会被放入 Humongous 区，如果一个对象太大会申请多个 Region，如果剩余 Region 不够对象空间，会触发一次 Full GC。Full GC 会收集年轻代、老年代和 Humongous 区。</p>\n<p>G1 为每个分区各自分配一个 RSet（Remembered Set）它内部类似于一个反向指针，记录了其它&nbsp;Region 对当前&nbsp;Region 的引用情况。但因为如果引用源是本分区的对象，那么就不需要记录在 RSet 中、且同时 G1 每次 GC 时，所有的新生代都会被扫描，因此引用源是年轻代的对象，也不需要在 RSet 中记录，所以最终只需要记录老年代到新生代之间的引用即可。</p>\n<p>Card，每个 Region 内部又被分成了若干个大小为512 Byte的 Card，标识堆内存最小可用粒度。分配的对象会占用物理上连续的若干个卡片。当查找对分区Region 内对象的引用时便可通过记录卡片来查找该引用对象。每个Region就有一个卡表来映射vRegion 中的卡页，整堆有个全局卡片表(<code>Global Card Table</code>) 存储所有Region的卡表情况。每一个Region的Card，都用一个 Byte 来记录是否修改过。卡表即这些byte的集合。实际上，如果把RS理解成一个概念模型，那么 Card Table 就可以说是 RSet 的一种实现方式。</p>\n<p><img src=\"/images/2024/jvm/JVM_6.png\" alt=\"G1.png\"></p>\n<p>垃圾回收过程，</p>\n<ol>\n<li>初始标记：标记 GC ROOT 能关联到的对象，需要STW</li>\n<li>并发标记：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，扫描完成后还会重新处理并发标记过程中产生变动的对象。使用三色标记法标记对象。</li>\n<li>最终标记：短暂暂停用户线程，再处理一次，需要STW</li>\n<li>复制回收：更新 Regio n的统计数据，对每个Region的回收价值和成本排序，根据用户设置的停顿时间制定回收计划。再把需要回收的 Region 中存活对象复制到空的Region，同时清理旧的Region。需要STW。</li>\n</ol>\n<p><strong>YongGC</strong> ，要么 eden 区放满，要么 G1 计算回收时间接近 <code>-XX:MaxGCPauseMills</code> 设置值会触发。G1会收集每个 Region 回收之后的空间大小、回收需要的时间。根据评估得到的价值，在后台维护一个优先级列表，然后基于我们设置的停顿时间优先回收<strong>价值收益最大</strong>的 Region。但 YongGC 的标记-复制是全过程 STW。</p>\n<p><strong>MixedGC</strong>，老年代对占有率达到 <code>-XX:InitiatingHeapOccupancyPercent</code> 值触发，回收 Yong 和 部分Old（G1 优先队列的优先顺序）以及大对象区。主要使用复制算法，拷贝过程中发现没有足够的空 region 承载拷贝对象时触发 Full GC。</p>\n<p><strong>FullGC</strong>，STW 采用单线程进行标记、清理和压缩整理。</p>\n<p>G1 是 jdk9+ 的默认垃圾回收器。</p>\n<h4 id=\"ZGC\"><a href=\"#ZGC\" class=\"headerlink\" title=\"ZGC\"></a>ZGC</h4><p>ZGC 是 jdk11 引入极低延迟的垃圾回收器，号称能处理 TB 级内存且停顿时间（STW）不超过 10ms，停顿时间不会随着堆大小或者活跃对象的大小而增加。ZGC 目前而言不分代。ZGC Region 分为三种容量，小型 Region 为 2MB 用于放置小于 256 KB 的小对象，中型 Region 为 32MB 放置大于等于 256KB 但小于 4MB 对象，大型 Region 容量不固定必须为 2MB 的整数倍放置 4MB 或以上的大对象且每个大型 Region 中只会存放一个大对象。</p>\n<p>ZGC 在标记、转移和重定位阶段几乎都是并发的，这是 ZGC 实现停顿时间小于 10 ms 目标的最关键原因。ZGC 分为多个阶段，初始标记、并发标记、再标记、并发转移准备、初始转移、并发转移。可见只有 初始标记、再标记 和初始转移 会 STW。</p>\n<p><img src=\"/images/2024/jvm/JVM_5.png\" alt=\"ZGC.png\"></p>\n<p>ZGC 实现多个并发过程，是依据<strong>着色指针</strong> 实现，而且仅在 64 位操作系统上可用，将 64 位虚拟地址空间划分为 [0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。ZGC使用了内存多重映射（Multi-Mapping）将多个不同的虚拟内存地址映射到同一个物理内存地址上，这是一种多对一映射。</p>\n<p><img src=\"/images/2024/jvm/jvm_7.png\" alt=\"JVM_64bit.png\"></p>\n<p>初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短。再标记阶段 STW 时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC 几乎所有暂停都只依赖于 GC Roots 集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全 STW，且停顿时间随存活对象的大小增加而增加。</p>\n<p>从堆中读取对象，且对象中属性指向的对象，会加入读屏障。如果这时候对象在 GC 时被移动了，接下来 JVM 就会加上一个读屏障，这个屏障会把读出的指针更新到对象的新地址上，并且把堆里的这个指针“修正”到原本的字段里。这样就算 GC 把对象移动了，读屏障也会发现并修正指针，于是应用代码就永远都会持有更新后的有效指针，而且不需要 STW。</p>\n<p>垃圾回收过程：</p>\n<ol>\n<li><p><strong>初始化</strong>：ZGC 初始化之后，整个内存空间的地址视图被设置为 Remapped，标记是在染色指针上。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。</p>\n</li>\n<li><p><strong>并发标记阶段</strong>：第一次进入标记阶段时视图为 M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从 Remapped 调整为 M0。所以，在标记阶段结束之后，对象的地址要么是 M0 视图，要么是 Remapped。如果对象的地址是 M0 视图，那么说明对象是活跃的；如果对象的地址是Remapped 视图，说明对象是不活跃的。</p>\n</li>\n<li><p><strong>并发转移阶段</strong>：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被 GC 转移线程或者应用线程访问过，那么就将对象的地址视图从 M0 调整为 Remapped。</p>\n</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://xstarcd.github.io/wiki/Java/JVM_Heap_Non-heap.html\">JVM堆内存和非堆内存</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/111016492\">万字详解，一文带你掌握 JVM 垃圾回收！</a></p>\n</li>\n<li><p><a href=\"https://mikechen.cc/16719.html\">ZGC 垃圾回收分析</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u011107814/article/details/118420893\">垃圾回收器G1&amp;ZGC详解</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7209266987049844791\">G1 垃圾收集器详解 - 掘金</a></p>\n</li>\n<li><p><a href=\"https://cloud.tencent.com/developer/article/1897189\">CMS 垃圾回收</a></p>\n</li>\n<li><p><a href=\"https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html\">新一代垃圾回收器ZGC的探索与实践 - 美团技术团队</a></p>\n</li>\n<li><p><a href=\"https://www.selinux.tech/java/core/jvm-zgc-memory\">JVM ZGC 内存管理 | JustNote</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/booksea/p/17665685.html\">深入解析ZGC垃圾回收器 - Booksea - 博客园</a>()</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"https://code-thinking-1253855093.file.myqcloud.com/pics/20211111115823.png","name":"程序员Carl","introduction":"认准代码随想录，学习算法不迷路","url":"https://www.programmercarl.com/","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"堆内存分配\"><a href=\"#堆内存分配\" class=\"headerlink\" title=\"堆内存分配\"></a>堆内存分配</h3><p>JVM 将堆内存划分为新生代、老年代和 metadata 空间。新生代被分为 eden 空间、Survivor From 空间、Survivor To 空间。垃圾回收基本是对 eden 空间、Survivor From 空间和老年代的内存回收。但是，不是每次垃圾回收都会触发老年代的内存回收，这个在 <a href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%BB%AC\">垃圾回收器们</a> 会再次总结。</p>\n<p><img src=\"/images/2024/jvm/JVM_1.png\" alt=\"JVM_heap.png\"></p>\n<h3 id=\"回收对象\"><a href=\"#回收对象\" class=\"headerlink\" title=\"回收对象\"></a>回收对象</h3><p>当对象不再被引用时，此时对象被认为是<strong>垃圾对象</strong>，会在垃圾回收器运行时被回收。在 JVM 有强引用、弱引用、软引用和虚引用四种对象引用类型。其中，<strong>强引用</strong>，为最常见的引用类型，通过关键字 new 创建的对象默认是强引用。只要强引用指向一个对象就表示对象依旧活着。<strong>弱引用</strong>，将对象引用保存在弱引用对象中，如果垃圾回收器运行时，这个弱引用对象对垃圾回收器而言依旧会被回收。而弱引用使用场景，在没有强引用指向的对象时，在被 \bGC 前还能通过弱引用来获取对象，使用该对象并能再次用一个强引用指向它，不用重新运行逻辑装载对象。<strong>软引用</strong>，对象应用保存在软引用对象中，垃圾回收器运行时会判断堆内存是否充足。如果充足，垃圾回收器不会在当下回收被软引用对象指向的对象。如果不充足，垃圾回收器会立即回收被软引用对象指向的对象。<strong>虚引用</strong>，将对象引用保存在虚引用对象中，通过虚引用对象无法获取指向的对象，除非对象强引用未断连。如果垃圾回收器运行时，虚引用对象指向对象回收后，垃圾回收器会把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收，完成对象回收后的资源释放。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 弱引用</span>\n<span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> testWeakReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestWeakReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 软引用</span>\n<span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> testSoftReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestSoftReference<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 虚引用</span>\n<span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> referenceQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PhantomReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> testPhantomReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhantomReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span> referenceQueue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 虚引用通过队列 poll 判断 test 被回收.</span>\nreferenceQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"垃圾回收器算法\"><a href=\"#垃圾回收器算法\" class=\"headerlink\" title=\"垃圾回收器算法\"></a>垃圾回收器算法</h3><h4 id=\"标记-清理（Mark-Sweep\"><a href=\"#标记-清理（Mark-Sweep\" class=\"headerlink\" title=\"标记-清理（Mark-Sweep)\"></a>标记-清理（Mark-Sweep)</h4><p>首先，扫描整个空间通过对象可达性判断找到没有被引用的对象，标记这类对象需要清理。其次，扫描整个空间清理被标记的对象。缺点，直接清理标记对象，可能会照成内存空间碎片化。需要整个空间扫描两次。</p>\n<p><img src=\"/images/2024/jvm/JVM_2.jpeg\" alt=\"mark-sweep.jpg\"></p>\n<h4 id=\"复制（Copying）\"><a href=\"#复制（Copying）\" class=\"headerlink\" title=\"复制（Copying）\"></a>复制（Copying）</h4><p>将内存划分为两个大小相等的空间，保证每次仅有一个空间被使用。当被使用的空间快用完触发回收时，需要在当前空间扫描出活跃对象，将活跃对象拷贝到另一个未使用空间，清理使用空间（这时使用空间就会变成未被使用空间）。缺点，内存运行时被使用空间为 1/2。</p>\n<p><img src=\"/images/2024/jvm/JVM_3.jpeg\" alt=\"copying.jpg\"></p>\n<p>在 JVM 运行过程中，大部分对象是 “朝生夕死” 约占 98%。也就是说真正需要长期活着的对象占用少。也就说明这样的对半空间，不算浪费很多。其中，98% 对象在 eden 区域在内存划分中占大头默认比例为 80%。复制算法作用于 Survivor From 空间  和 Survivor To 空间，默认占用 10%。</p>\n<h4 id=\"标记-整理（Mark-Compact）\"><a href=\"#标记-整理（Mark-Compact）\" class=\"headerlink\" title=\"标记-整理（Mark-Compact）\"></a>标记-整理（Mark-Compact）</h4><p>标记依旧是标记需要清理的对象。整理是将存货的对象向一端移动，然后将边界外的对象清理掉。这样没有内存碎片。与清理相比，整理后没有内存碎片。与拷贝相比，整理并没有划分出一半空闲空间。</p>\n<p><img src=\"/images/2024/jvm/JVM_4.jpeg\" alt=\"mark-compact.jpg\"></p>\n<h3 id=\"GC-术语\"><a href=\"#GC-术语\" class=\"headerlink\" title=\"GC 术语\"></a>GC 术语</h3><p>部分收集（Partial GC），目标不是完整收集整个 Java 堆的垃圾收集。其中，新生代收集（Minor GC/Young GC），目标只是新生代的垃圾收集。老年代收集（Major GC/Old GC），只是老年代的垃圾收集，目前只有 CMS 会有单独收集老年代的行为，另外请注意 Major GC 这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。混合收集（Mixed GC），目标是收集整个新生代以及部分老年代的垃圾收集，目前只有 G1 s回收器会有这种行为。整堆收集（Full GC），收集整个 Java 堆的垃圾收集。</p>\n<p>可以作为 GC Root 对象的有，虚拟机栈（栈帧中的本地变量表）中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中 JNI 引用的对象。</p>\n<h3 id=\"垃圾回收器们\"><a href=\"#垃圾回收器们\" class=\"headerlink\" title=\"垃圾回收器们\"></a>垃圾回收器们</h3><p>以算法来说，分代回收是按照不同区域的特点，选用适合的垃圾回收算法和垃圾回收器，年轻代垃圾回收频繁追求响应时间短和程序终止时间短。分为年轻代回收器，Serial、ParNew、Parallel Scavenge、G1、ZGC。老年代回收器，SerialOld 、Parallel Old、CMS、G1。</p>\n<h4 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h4><p>串行回收器，最古老、最简单的垃圾回收器。进行垃圾收集时只使用一个线程。使用的是标记复制算法。在标记和复制两个环节上，暂停所有应用线程（<code>stop-the-word</code>）。</p>\n<h4 id=\"Serial-Old\"><a href=\"#Serial-Old\" class=\"headerlink\" title=\"Serial Old\"></a>Serial Old</h4><p>单线程串行老年代标记整理算法的垃圾回收。与 Serial 匹配的老年代垃圾回收器。如果老年代内存大，意味着垃圾回收耗时很长。</p>\n<h4 id=\"Parallel-Scavenge\"><a href=\"#Parallel-Scavenge\" class=\"headerlink\" title=\"Parallel Scavenge\"></a>Parallel Scavenge</h4><p>使用标记复制算法及多线程进行年轻代垃圾回收。但与 ParNew 相比，它能达到一个可控的吞吐量。吞吐量 =  CPU 运行用户线程时间 / CPU 总时间。使用 <code>-XX:MaxGCPauseMillis</code> 最大垃圾收集停顿时间，<code>-XX:GCTimeRatio</code> 垃圾回收时间占总时间比例。如果设置时间变短，这意味着回收更加频繁，导致吞吐量降低。</p>\n<h4 id=\"Parallel-Old\"><a href=\"#Parallel-Old\" class=\"headerlink\" title=\"Parallel Old\"></a>Parallel Old</h4><p>多线程并行老年代标记整理算法的垃圾回收，吞吐量优先的垃圾回收器。与 Parallel Scavenge 匹配的老年代垃圾回收器。使用 <code>-XX:UseParallelOldGC</code> 开启此垃圾回收器。</p>\n<h4 id=\"ParNew\"><a href=\"#ParNew\" class=\"headerlink\" title=\"ParNew\"></a>ParNew</h4><p>使用标记复制算法及多线程进行年轻代垃圾回收。垃圾回收过程中，会暂停所有应用线程。<code>-XX:ParallelGCThreads</code> 设置垃圾回收器并行执行线程数，默认开启和 CPU 数据相同的线程数。</p>\n<h4 id=\"CMS\"><a href=\"#CMS\" class=\"headerlink\" title=\"CMS\"></a>CMS</h4><p>CMS 采用标记清除算法，只会回收老年代空间。CMS 是一种预处理垃圾回收器，需要在老年代内存耗尽前完成垃圾回收，否则会导致并发回收失败，失败会退化为 SerialOld 垃圾回收器。因此 CMS 可设置 <code>-XX:CMSInitiatingOccupancyFraction</code> 确定开始垃圾回收启动阈值。<code>-XX:+UseConcMarkSweepGC</code> 启动 CMS 老年代垃圾回收。</p>\n<p><strong>CMS 初始标记（STW）</strong>，标记老年代 GC Roots 直接引用对象，<code>-XX:+CMSParallelInitalMarkEnabled</code> 开启标记并行化，<code>-XX:ParallelGCThreads</code> 线程数不要超过 CPU 核数。</p>\n<p><strong>CMS 并发标记</strong>，沿着初始标记的对象寻找存活对象，该阶段与应用程序并发运行。需要对并发标记过程中，对老年代对象引用关系发生变更，需要重新标记（会标记为 Dirty）。并发标记时，用不同颜色标记（三色标记法）老年代对象，黑色表示对象已经被扫描过且存活、灰色表示对象至少存在一个引用还没有被扫描过、白色表示对象没有被扫描过。</p>\n<p><strong>并发预处理</strong>，并发预清理主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为Dirty 的 Card ）。</p>\n<p><strong>可终止预处理</strong>，可终止预处理阶段与并发预处理节点一样，主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为 Dirty 的 Card ）。但是可终止预处理是有条件触发的，触发条件由CMS的两个参数控制 <code>-CMSScheduleRemarkEdenSizeThreshold</code> 默认值 2M 和 <code>-CMSScheduleRemarkEdenPenetration</code> 默认值 50%，当 Eden 空间使用超过 2M 时，启动可终止预处理，当 Eden 空间使用率到达 50% 时中断，进入重新标记阶段。</p>\n<p><strong>重新标记（STW）</strong>，主要是标记整个老年代的所有的存活对象，该阶段会扫描整个堆内存。扫描新生代的原因是因为老年代中的对象，如果被新生代中的对象引用，会被视为存活对象，即使新生代的对象已经不可达，也会使用这些不可达的对象当GC Root 来扫描老年代。重新标记阶段耗时较长，可以通过设置参数<code>-XX:+CMSScavengeBeforeRemark</code> 在重新标记前先执行一次 Minor GC，回收掉新生代中不可达对象，并将剩余对象转入幸存者区或晋升到老年代，这样在扫描新生代时，只需要扫描幸存者区对象即可，将大大减少扫描对象所需时长。</p>\n<p>同时，可通过设置 <code>-CMSParallelRemarkEnabled</code> 开启并行重新标记，提高标记效率，减少重新标记处理时长。</p>\n<p><strong>并发清除</strong>，主要是清除那些没有被标记的对象，回收内存空间。但过程中产生的垃圾只能在下次 GC 中处理。因为是清理方法产生的碎片，因变量 <code>-XX:UseCMSCompactAtFullCollection</code> 压缩开关， <code>-XX:CMSFullGCsBeforeCompaction</code> 决定经过多少次 FullGC 之后进行空间压缩。</p>\n<p><strong>并发重置</strong>，主要是重置 CMS 数据结构，准备在下一个CMS生命周期中使用。</p>\n<h4 id=\"G1\"><a href=\"#G1\" class=\"headerlink\" title=\"G1\"></a>G1</h4><p>G1 将 java 堆划分为多个大小相等的独立区域，JVM 建议将其分为 2048 个 Region，而 Region 大小为 堆大小/2048。G1 保留了年轻代和老年代概念，不再物理隔离，都是可以不连续 Region 集合。可以通过 <code>-XX:G1NewSizePercent</code> 设置新生代初始占比，通过 <code>-XX:G1MaxNewSizePercent</code> 设置新生代最大占比。一个 Region 可能之前是年轻代，如果 Region 进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。G1 有专门分配大对象的 Region 叫 <strong>Humongous 区</strong>（专门存放短期巨型对象不用直接进入老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销），大对象大小超过 150% Region 就会被放入 Humongous 区，如果一个对象太大会申请多个 Region，如果剩余 Region 不够对象空间，会触发一次 Full GC。Full GC 会收集年轻代、老年代和 Humongous 区。</p>\n<p>G1 为每个分区各自分配一个 RSet（Remembered Set）它内部类似于一个反向指针，记录了其它 Region 对当前 Region 的引用情况。但因为如果引用源是本分区的对象，那么就不需要记录在 RSet 中、且同时 G1 每次 GC 时，所有的新生代都会被扫描，因此引用源是年轻代的对象，也不需要在 RSet 中记录，所以最终只需要记录老年代到新生代之间的引用即可。</p>\n<p>Card，每个 Region 内部又被分成了若干个大小为512 Byte的 Card，标识堆内存最小可用粒度。分配的对象会占用物理上连续的若干个卡片。当查找对分区Region 内对象的引用时便可通过记录卡片来查找该引用对象。每个Region就有一个卡表来映射vRegion 中的卡页，整堆有个全局卡片表(<code>Global Card Table</code>) 存储所有Region的卡表情况。每一个Region的Card，都用一个 Byte 来记录是否修改过。卡表即这些byte的集合。实际上，如果把RS理解成一个概念模型，那么 Card Table 就可以说是 RSet 的一种实现方式。</p>\n<p><img src=\"/images/2024/jvm/JVM_6.png\" alt=\"G1.png\"></p>\n<p>垃圾回收过程，</p>\n<ol>\n<li>初始标记：标记 GC ROOT 能关联到的对象，需要STW</li>\n<li>并发标记：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，扫描完成后还会重新处理并发标记过程中产生变动的对象。使用三色标记法标记对象。</li>\n<li>最终标记：短暂暂停用户线程，再处理一次，需要STW</li>\n<li>复制回收：更新 Regio n的统计数据，对每个Region的回收价值和成本排序，根据用户设置的停顿时间制定回收计划。再把需要回收的 Region 中存活对象复制到空的Region，同时清理旧的Region。需要STW。</li>\n</ol>\n<p><strong>YongGC</strong> ，要么 eden 区放满，要么 G1 计算回收时间接近 <code>-XX:MaxGCPauseMills</code> 设置值会触发。G1会收集每个 Region 回收之后的空间大小、回收需要的时间。根据评估得到的价值，在后台维护一个优先级列表，然后基于我们设置的停顿时间优先回收<strong>价值收益最大</strong>的 Region。但 YongGC 的标记-复制是全过程 STW。</p>\n<p><strong>MixedGC</strong>，老年代对占有率达到 <code>-XX:InitiatingHeapOccupancyPercent</code> 值触发，回收 Yong 和 部分Old（G1 优先队列的优先顺序）以及大对象区。主要使用复制算法，拷贝过程中发现没有足够的空 region 承载拷贝对象时触发 Full GC。</p>\n<p><strong>FullGC</strong>，STW 采用单线程进行标记、清理和压缩整理。</p>\n<p>G1 是 jdk9+ 的默认垃圾回收器。</p>\n<h4 id=\"ZGC\"><a href=\"#ZGC\" class=\"headerlink\" title=\"ZGC\"></a>ZGC</h4><p>ZGC 是 jdk11 引入极低延迟的垃圾回收器，号称能处理 TB 级内存且停顿时间（STW）不超过 10ms，停顿时间不会随着堆大小或者活跃对象的大小而增加。ZGC 目前而言不分代。ZGC Region 分为三种容量，小型 Region 为 2MB 用于放置小于 256 KB 的小对象，中型 Region 为 32MB 放置大于等于 256KB 但小于 4MB 对象，大型 Region 容量不固定必须为 2MB 的整数倍放置 4MB 或以上的大对象且每个大型 Region 中只会存放一个大对象。</p>\n<p>ZGC 在标记、转移和重定位阶段几乎都是并发的，这是 ZGC 实现停顿时间小于 10 ms 目标的最关键原因。ZGC 分为多个阶段，初始标记、并发标记、再标记、并发转移准备、初始转移、并发转移。可见只有 初始标记、再标记 和初始转移 会 STW。</p>\n<p><img src=\"/images/2024/jvm/JVM_5.png\" alt=\"ZGC.png\"></p>\n<p>ZGC 实现多个并发过程，是依据<strong>着色指针</strong> 实现，而且仅在 64 位操作系统上可用，将 64 位虚拟地址空间划分为 [0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。ZGC使用了内存多重映射（Multi-Mapping）将多个不同的虚拟内存地址映射到同一个物理内存地址上，这是一种多对一映射。</p>\n<p><img src=\"/images/2024/jvm/jvm_7.png\" alt=\"JVM_64bit.png\"></p>\n<p>初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短。再标记阶段 STW 时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC 几乎所有暂停都只依赖于 GC Roots 集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全 STW，且停顿时间随存活对象的大小增加而增加。</p>\n<p>从堆中读取对象，且对象中属性指向的对象，会加入读屏障。如果这时候对象在 GC 时被移动了，接下来 JVM 就会加上一个读屏障，这个屏障会把读出的指针更新到对象的新地址上，并且把堆里的这个指针“修正”到原本的字段里。这样就算 GC 把对象移动了，读屏障也会发现并修正指针，于是应用代码就永远都会持有更新后的有效指针，而且不需要 STW。</p>\n<p>垃圾回收过程：</p>\n<ol>\n<li><p><strong>初始化</strong>：ZGC 初始化之后，整个内存空间的地址视图被设置为 Remapped，标记是在染色指针上。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。</p>\n</li>\n<li><p><strong>并发标记阶段</strong>：第一次进入标记阶段时视图为 M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从 Remapped 调整为 M0。所以，在标记阶段结束之后，对象的地址要么是 M0 视图，要么是 Remapped。如果对象的地址是 M0 视图，那么说明对象是活跃的；如果对象的地址是Remapped 视图，说明对象是不活跃的。</p>\n</li>\n<li><p><strong>并发转移阶段</strong>：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被 GC 转移线程或者应用线程访问过，那么就将对象的地址视图从 M0 调整为 Remapped。</p>\n</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><p><a href=\"https://xstarcd.github.io/wiki/Java/JVM_Heap_Non-heap.html\">JVM堆内存和非堆内存</a></p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/111016492\">万字详解，一文带你掌握 JVM 垃圾回收！</a></p>\n</li>\n<li><p><a href=\"https://mikechen.cc/16719.html\">ZGC 垃圾回收分析</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/u011107814/article/details/118420893\">垃圾回收器G1&amp;ZGC详解</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7209266987049844791\">G1 垃圾收集器详解 - 掘金</a></p>\n</li>\n<li><p><a href=\"https://cloud.tencent.com/developer/article/1897189\">CMS 垃圾回收</a></p>\n</li>\n<li><p><a href=\"https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html\">新一代垃圾回收器ZGC的探索与实践 - 美团技术团队</a></p>\n</li>\n<li><p><a href=\"https://www.selinux.tech/java/core/jvm-zgc-memory\">JVM ZGC 内存管理 | JustNote</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/booksea/p/17665685.html\">深入解析ZGC垃圾回收器 - Booksea - 博客园</a>()</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clfzan0gs0000hv66745a8rfv","category_id":"clfsi5qcx0003g9660tk982mp","_id":"clfzan0gw0003hv667xwhh8dn"},{"post_id":"clu285vm400034tc07meq5ysx","category_id":"clfsi5qcx0003g9660tk982mp","_id":"clu285vm700074tc06k4jauy9"},{"post_id":"clu285vly00004tc01dsr165f","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm8000a4tc052p662n7"},{"post_id":"clfzbkh8y0000jn66bdl53b4s","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm8000c4tc0co3cgl7v"},{"post_id":"cls1u7p9c00008h666rawb7y6","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm9000e4tc02pfh5azu"},{"post_id":"clu285vm700064tc07iorc59y","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm9000f4tc05xradebz"},{"post_id":"cls1theso000dwt66gk6pgojw","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm9000i4tc0fwe39mol"},{"post_id":"cls1thesj0001wt66f6209cb9","category_id":"clu285vm700084tc0ej2172s3","_id":"clu285vm9000k4tc089gj06nq"},{"post_id":"clu285vm8000b4tc05ef5ea7k","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm9000o4tc033xz4pxm"},{"post_id":"cls1thesk0002wt66et9r7pp5","category_id":"clu285vm200014tc0at406kml","_id":"clu285vm9000r4tc03t2i02p1"},{"post_id":"clu287msm000077c0bqkdfujz","category_id":"clu287msr000177c0g8z949kn","_id":"clu287mss000477c0htae4iov"}],"PostTag":[{"post_id":"clfzan0gs0000hv66745a8rfv","tag_id":"clfsi5qcy0004g9669kei3tzc","_id":"clfzan0gw0001hv661kixe80w"},{"post_id":"clfzan0gs0000hv66745a8rfv","tag_id":"clfsi5qcz0008g966gkzsdw6d","_id":"clfzan0gw0002hv668pzecarx"},{"post_id":"clfzan0gs0000hv66745a8rfv","tag_id":"clfsi5qcz000bg966dyoj168s","_id":"clfzan0gw0004hv665unbeu78"},{"post_id":"clfzbkh8y0000jn66bdl53b4s","tag_id":"clfzbkh910002jn664re9foaz","_id":"clfzbkh920004jn66dnl6ge48"},{"post_id":"cls1thesj0001wt66f6209cb9","tag_id":"clfsi5qcy0004g9669kei3tzc","_id":"cls1thesl0003wt6672uq57om"},{"post_id":"cls1thesk0002wt66et9r7pp5","tag_id":"cls1thesn0005wt66fjnr66ht","_id":"cls1thesn000awt6615pe7orj"},{"post_id":"cls1thesk0002wt66et9r7pp5","tag_id":"cls1thesn0007wt667i32805l","_id":"cls1thesn000bwt66hrs2hdhb"},{"post_id":"cls1thesk0002wt66et9r7pp5","tag_id":"cls1thesn0009wt6622a730ds","_id":"cls1thesn000cwt663q2ya4lp"},{"post_id":"cls1theso000dwt66gk6pgojw","tag_id":"cls1thesn0005wt66fjnr66ht","_id":"cls1thesp000hwt6602sm0e2l"},{"post_id":"cls1theso000dwt66gk6pgojw","tag_id":"cls1thesn0007wt667i32805l","_id":"cls1thesp000iwt661gqk41od"},{"post_id":"cls1theso000dwt66gk6pgojw","tag_id":"cls1theso000ewt669pfdcnjj","_id":"cls1thesp000jwt6611erbblp"},{"post_id":"cls1theso000dwt66gk6pgojw","tag_id":"cls1thesp000gwt66d37vdl4j","_id":"cls1thesp000kwt66aamhdofg"},{"post_id":"cls1u7p9c00008h666rawb7y6","tag_id":"cls1u7p9f00028h66goqubu6r","_id":"cls1u7p9g00058h661cum8joj"},{"post_id":"cls1u7p9c00008h666rawb7y6","tag_id":"cls1u7p9f00038h660wve2hh1","_id":"cls1u7p9g00068h6682l8bsnp"},{"post_id":"clu285vly00004tc01dsr165f","tag_id":"clu285vm400024tc0bwzq280a","_id":"clu285vm9000h4tc0fzjfgpiy"},{"post_id":"clu285vly00004tc01dsr165f","tag_id":"clu285vm500054tc05rlp03vv","_id":"clu285vm9000j4tc0cy3u782w"},{"post_id":"clu285vly00004tc01dsr165f","tag_id":"clu285vm700094tc09xun98b4","_id":"clu285vm9000m4tc02n88glsj"},{"post_id":"clu285vly00004tc01dsr165f","tag_id":"clu285vm8000d4tc0cufahkek","_id":"clu285vm9000n4tc014e9ddhn"},{"post_id":"cls1u7p9c00008h666rawb7y6","tag_id":"clu285vm9000g4tc08b6q14f3","_id":"clu285vm9000q4tc03s067p90"},{"post_id":"clfzan0gs0000hv66745a8rfv","tag_id":"clu285vm9000l4tc09cineyrh","_id":"clu285vm9000s4tc056fs508k"},{"post_id":"clu285vm400034tc07meq5ysx","tag_id":"clu285vm9000p4tc01o8e14c1","_id":"clu285vma000v4tc01mt16rom"},{"post_id":"clu285vm400034tc07meq5ysx","tag_id":"clu285vm9000t4tc0e0097tcx","_id":"clu285vma000w4tc0bcu13z6l"},{"post_id":"cls1thesj0001wt66f6209cb9","tag_id":"clu285vm9000u4tc0b19u49nj","_id":"clu285vma000y4tc09tdj27w6"},{"post_id":"clfzbkh8y0000jn66bdl53b4s","tag_id":"clu285vm9000g4tc08b6q14f3","_id":"clu285vma00124tc0cxex1kml"},{"post_id":"clfzbkh8y0000jn66bdl53b4s","tag_id":"clu285vma000z4tc068cubrd0","_id":"clu285vma00134tc04jns5qae"},{"post_id":"clfzbkh8y0000jn66bdl53b4s","tag_id":"clu285vma00104tc0gdpmcdxi","_id":"clu285vma00154tc05q7vb5vm"},{"post_id":"clu285vm700064tc07iorc59y","tag_id":"clu285vm9000g4tc08b6q14f3","_id":"clu285vma00174tc060xafak1"},{"post_id":"clu285vm700064tc07iorc59y","tag_id":"clu285vma00144tc0d58g0uct","_id":"clu285vma00194tc05lwub8ee"},{"post_id":"cls1theso000dwt66gk6pgojw","tag_id":"clu285vm9000g4tc08b6q14f3","_id":"clu285vma001a4tc0hvoadi8y"},{"post_id":"clu285vm8000b4tc05ef5ea7k","tag_id":"clu285vm9000g4tc08b6q14f3","_id":"clu285vmc001f4tc0a69d4k3m"},{"post_id":"clu285vm8000b4tc05ef5ea7k","tag_id":"clu285vmb001b4tc0cxk2aslq","_id":"clu285vmc001g4tc09sq8hvn5"},{"post_id":"clu285vm8000b4tc05ef5ea7k","tag_id":"clu285vmb001c4tc0g6wccrtj","_id":"clu285vmc001h4tc0ak7o56s0"},{"post_id":"clu285vm8000b4tc05ef5ea7k","tag_id":"clu285vmb001d4tc08pn6bba1","_id":"clu285vmc001i4tc03ujm2g40"},{"post_id":"cls1thesk0002wt66et9r7pp5","tag_id":"clu285vm9000g4tc08b6q14f3","_id":"clu285vmc001j4tc03soie02s"},{"post_id":"clu287msm000077c0bqkdfujz","tag_id":"clu287msr000277c02efl08m6","_id":"clu287mss000677c0bnib1zh8"},{"post_id":"clu287msm000077c0bqkdfujz","tag_id":"clu287mss000377c03mry6947","_id":"clu287mss000777c0g7mef9ae"},{"post_id":"clu287msm000077c0bqkdfujz","tag_id":"clu287mss000577c0e2y22kbi","_id":"clu287mss000877c005t7824p"}],"Tag":[{"name":"tools","_id":"clfsi5qcy0004g9669kei3tzc"},{"name":"gitlab","_id":"clfsi5qcz0008g966gkzsdw6d"},{"name":"BFG","_id":"clfsi5qcz000bg966dyoj168s"},{"name":"npm-link","_id":"clfzbkh910002jn664re9foaz"},{"name":"spring-security","_id":"cls1thesn0005wt66fjnr66ht"},{"name":"cas","_id":"cls1thesn0007wt667i32805l"},{"name":"relogin","_id":"cls1thesn0009wt6622a730ds"},{"name":"oauth2","_id":"cls1theso000ewt669pfdcnjj"},{"name":"pre-security","_id":"cls1thesp000gwt66d37vdl4j"},{"name":"分布式锁","_id":"cls1u7p9f00028h66goqubu6r"},{"name":"redis","_id":"cls1u7p9f00038h660wve2hh1"},{"name":"java","_id":"clu285vm400024tc0bwzq280a"},{"name":"A4","_id":"clu285vm500054tc05rlp03vv"},{"name":"分页","_id":"clu285vm700094tc09xun98b4"},{"name":"定高","_id":"clu285vm8000d4tc0cufahkek"},{"name":"code","_id":"clu285vm9000g4tc08b6q14f3"},{"name":"杂项","_id":"clu285vm9000l4tc09cineyrh"},{"name":"opencv","_id":"clu285vm9000p4tc01o8e14c1"},{"name":"tesseract","_id":"clu285vm9000t4tc0e0097tcx"},{"name":"选型","_id":"clu285vm9000u4tc0b19u49nj"},{"name":"npm","_id":"clu285vma000z4tc068cubrd0"},{"name":"前端","_id":"clu285vma00104tc0gdpmcdxi"},{"name":"exception","_id":"clu285vma00144tc0d58g0uct"},{"name":"mybatis","_id":"clu285vmb001b4tc0cxk2aslq"},{"name":"mybatis-plus","_id":"clu285vmb001c4tc0g6wccrtj"},{"name":"自动填充","_id":"clu285vmb001d4tc08pn6bba1"},{"name":"JVM","_id":"clu287msr000277c02efl08m6"},{"name":"垃圾回收","_id":"clu287mss000377c03mry6947"},{"name":"ZGC","_id":"clu287mss000577c0e2y22kbi"}]}}