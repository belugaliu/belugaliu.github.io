<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>怎么实现 mybatis 自动设置创建时间更新时间</title>
      <link href="/2024/02/18/zen-me-shi-xian-mybatis-zi-dong-she-zhi-chuang-jian-shi-jian-geng-xin-shi-jian/"/>
      <url>/2024/02/18/zen-me-shi-xian-mybatis-zi-dong-she-zhi-chuang-jian-shi-jian-geng-xin-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么实现-mybatis-自动设置创建时间更新时间"><a href="#怎么实现-mybatis-自动设置创建时间更新时间" class="headerlink" title="怎么实现 mybatis 自动设置创建时间更新时间"></a>怎么实现 mybatis 自动设置创建时间更新时间</h2><h4 id="mag-相对流行方案弊端"><a href="#mag-相对流行方案弊端" class="headerlink" title=":mag: 相对流行方案弊端"></a><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 相对流行方案弊端</h4><p>mybatis 提供 Interceptor 接口以插件方式提供扩展能力。互联网上大都是对数据表映射类对象中关于时间属性设置当前时间的解决方案。但这种方法无法解决 mapper.xml 写更新 SQL 或 @XXXProvider 拼 SQL 的方式插入或更新数据表。但是依托于数据表映射类本身没有问题，因为需要知道创建时间和更新时间对应的数据库字段信息，这是光拦截到 SQL 而无法判断时间相关的字段是否存在并赋值。</p><h4 id="mortar-board-更好的选择"><a href="#mortar-board-更好的选择" class="headerlink" title=":mortar_board: 更好的选择"></a><span class="github-emoji"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 更好的选择</h4><p>如果你项目中使用了 mybatis-plus 组件，恭喜你做这个决定你足够明智。 mybatis-plus 提供 MetaObjectHandler 抽象类实现公共字段自动写入能力。其大体思路是针对 @XXXProvider 拼 SQL 时将实体中标记需要自动填充的字段拼入 SQL 中，通过 metaObjectHandler 对实体属性字段填充相应值，最后带有自动填充字段的 PrepareStatement SQL 插入/更新数据表数据。</p><p>但，项目上使用自写 <code>BaseMapper&lt;E,ID&gt;</code> 接口和 @XXXProvider 注解实现 BaseMapperSqlSourceBuilder 类完成 SQL 拼接。但未提供对公用字段自动写入能力。</p><h4 id="mushroom-在现状上解决问题"><a href="#mushroom-在现状上解决问题" class="headerlink" title=":mushroom: 在现状上解决问题"></a><span class="github-emoji"><span>🍄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在现状上解决问题</h4><p>Interceptor 拦截的位置是执行 SQL 之前，也就是 <code>@Signature(type = Executor.class, method="update", args={MappedStatement.class, Object.class})</code> ，在 SQL 里拼接时间的字段和字段值。字段值可以直接设置的 <code>now()</code> 数据库函数，缺点是强依赖数据库。这个缺点需要通过 driver 信息找确切的数据库类型，切换时间函数。时间字段信息则是通过 <code>BaseMapper&lt;E,ID&gt;</code> 获取泛型 E 指向的 Class，通过属性名匹配（没办法老代码只能匹配属性名）或注解匹配找到时间字段。SQL 里拼接时间字段是通过包装 SqlSource 通过 <code>SqlSource#getBoundSql</code> 替换最终 SQL 和当前时间函数。</p><ul><li><code>mappedStatement#getId()</code>，id 的值对应类全路径，从这个类全路径获取类信息并确定 <code>BaseMapper&lt;E,ID&gt;</code> E 指向的泛型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 表的创建时间和更新时间会随着表的更新或插入行为进行赋值. 因为需要确定表中是否有创建时间或更新时间且确定时间字段名，所以需要使用的地方 * 的 mapper 继承 {@link BaseMapper}&lt;br&gt; * 思路，从 BaseMapper 的泛型 T 获取实体类，从实体类里面解析出创建时间和更新时间字段对应的数据库字段名，这里创建时间和更新时间是通过名称 * 匹配的，大小写不论包含匹配.针对插入行为会增加创建时间和更新时间，针对更新行为会更新更新时间.&lt;br&gt; * &lt;lu&gt; * &lt;li&gt;创建时间，dCjsj、cjsj、dtCjsj、dCjrq、cjrq、dtCjrq、createTime、dCreateTime、dtCreateTime&lt;/li&gt; * &lt;li&gt;更新时间，dGxsj, gxsj, dtGxsj, dXgsj, xgsj, dtXgsj, dZhxgsj、zhxgsj、dtZhxgsj、updateTime、dUpdateTime、dtUpdateTime&lt;/li&gt; * &lt;/lu&gt; * * @author liulili * @date 2024/1/25 11:24 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"update"</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutofillCreateOrUpdateTimeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CJSJ_COLUMN_NAMES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"cjsj"</span><span class="token punctuation">,</span> <span class="token string">"dCjsj"</span><span class="token punctuation">,</span> <span class="token string">"dtCjsj"</span><span class="token punctuation">,</span> <span class="token string">"cjrq"</span><span class="token punctuation">,</span> <span class="token string">"dCjrq"</span><span class="token punctuation">,</span> <span class="token string">"dtCjrq"</span><span class="token punctuation">,</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token string">"dCreateTime"</span><span class="token punctuation">,</span> <span class="token string">"dtCreateTime"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">GXSJ_COLUMN_NAMES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"gxsj"</span><span class="token punctuation">,</span> <span class="token string">"dGxsj"</span><span class="token punctuation">,</span> <span class="token string">"dtGxsj"</span><span class="token punctuation">,</span> <span class="token string">"xgsj"</span><span class="token punctuation">,</span> <span class="token string">"dXgsj"</span><span class="token punctuation">,</span> <span class="token string">"dtXgsj"</span><span class="token punctuation">,</span> <span class="token string">"zhxgsj"</span><span class="token punctuation">,</span> <span class="token string">"dZhxgsj"</span><span class="token punctuation">,</span> <span class="token string">"dtZhxgsj"</span><span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token string">"dUpdateTime"</span><span class="token punctuation">,</span> <span class="token string">"dtUpdateTime"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StatementType</span> statement <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token constant">CALLABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"【自动填充创建或修改时间】不支持在存储过程类型业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SqlCommandType</span> command <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> id<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> mapperClazz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mapperClazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Class</span> entityClazz <span class="token operator">=</span> <span class="token function">findEntityClazz</span><span class="token punctuation">(</span>mapperClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"class[{}]非接口/未继承BaseMapper接口"</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">CUTimeDTO</span> cuTimeDTO <span class="token operator">=</span> <span class="token function">findCreateAndUpdateTimeColumn</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getCreateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"class[{}]无匹配的创建时间和更新时间字段， 请参考 AutofillCreateOrUpdateTimeInterceptor#CJSJ_COLUMN_NAMES 和 AutofillCreateOrUpdateTimeInterceptor#GXSJ_COLUMN_NAMES"</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillInsert</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillUpdate</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillUpdate</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> updateTimeColumn <span class="token operator">=</span> cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>updateTimeColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> updateTimeColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillUTime</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSqlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSource</span> decoderSqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoFillUTimeUpdateSqlSource</span><span class="token punctuation">(</span>sqlSource<span class="token punctuation">,</span> updateTimeColumn<span class="token punctuation">,</span> <span class="token string">"now()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> <span class="token string">"sqlSource"</span><span class="token punctuation">,</span> decoderSqlSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillInsert</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> createColumnName <span class="token operator">=</span> cuTimeDTO<span class="token punctuation">.</span><span class="token function">getCreateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> updateColumnName <span class="token operator">=</span> cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addColumn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>createColumnName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> createColumnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            addColumn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createColumnName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>updateColumnName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> updateColumnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            addColumn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updateColumnName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>addColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> columnName <span class="token operator">=</span> addColumn<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> columnValue <span class="token operator">=</span> addColumn<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>column <span class="token operator">-&gt;</span> <span class="token string">"now()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSqlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSource</span> decoderSqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoFillCUTimeInsertSqlSource</span><span class="token punctuation">(</span>sqlSource<span class="token punctuation">,</span> columnName<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> <span class="token string">"sqlSource"</span><span class="token punctuation">,</span> decoderSqlSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getCreateTimePropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>createColumnName <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> createColumnName<span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimePropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>updateColumnName <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> updateColumnName<span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Collection</span> paramColl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            paramColl<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sparam <span class="token operator">-&gt;</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>sparam<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span> paramMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-&gt;</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>paramArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> property <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                property <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"param[{}]属性【{}】获取属性值失败"</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimePropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>updateColumnName <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> updateColumnName<span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Collection</span> paramColl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            paramColl<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sparam <span class="token operator">-&gt;</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span>sparam<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span> paramMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-&gt;</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>paramArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> property <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                property <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"param[{}]属性【{}】获取属性值失败"</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">autofillUTime</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">CUTimeDTO</span> <span class="token function">findCreateAndUpdateTimeColumn</span><span class="token punctuation">(</span><span class="token class-name">Class</span> entityClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> entityClazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> fieldMap <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Field</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> field <span class="token operator">-&gt;</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldKeys <span class="token operator">=</span> fieldMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CUTimeDTO</span> <span class="token class-name">CUTimeDTO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cjsjFieldNameOptional <span class="token operator">=</span> fieldKeys<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fieldKey <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token constant">CJSJ_COLUMN_NAMES</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>columnName <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> fieldKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cjsjFieldNameOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>cjsjFieldName <span class="token operator">-&gt;</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setCreateTimePropertyName</span><span class="token punctuation">(</span>cjsjFieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setCreateTimeColumnName</span><span class="token punctuation">(</span><span class="token function">getColumnNameByColumnAnno</span><span class="token punctuation">(</span>cjsjFieldNameOptional<span class="token punctuation">,</span> fieldMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> gxsjFieldNameOptional <span class="token operator">=</span> fieldKeys<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fieldKey <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token constant">GXSJ_COLUMN_NAMES</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>columnName <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> fieldKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gxsjFieldNameOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>gxsjFieldName <span class="token operator">-&gt;</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setUpdateTimePropertyName</span><span class="token punctuation">(</span>gxsjFieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token function">getColumnNameByColumnAnno</span><span class="token punctuation">(</span>gxsjFieldNameOptional<span class="token punctuation">,</span> fieldMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getColumnNameByColumnAnno</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldNameOptional<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> fieldMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> columnName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldNameOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> fieldName <span class="token operator">=</span> fieldNameOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> fieldMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Column</span> column <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Column</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            columnName <span class="token operator">=</span> column<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> columnName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span> <span class="token function">findEntityClazz</span><span class="token punctuation">(</span><span class="token class-name">Class</span> mapperClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mapperClazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> mapperClazz<span class="token punctuation">.</span><span class="token function">getGenericInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">&gt;</span></span> baseMapperTypeOptional <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>iface <span class="token operator">-&gt;</span> iface <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>iface <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> iface<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>iface <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> iface<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">BaseMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>baseMapperTypeOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ParameterizedType</span> baseMapperType <span class="token operator">=</span> baseMapperTypeOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> baseMapperType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设计的 DTO 用于确定属性对应的创建时间字段属性和更新时间字段属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CUTimeDTO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createTimePropertyName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> updateTimePropertyName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createTimeColumnName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> updateTimeColumnName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包装对应的 SqlSource 在获取最后的 SQL （<code>SqlSource#getBoundSql</code>）中拼接创建和更新时间脚本。不在具体的 SqlSource 里面完成字段拼接加上预处理字段，是因为 mybatis 支持多种 SqlSource 包含 <code>StaticSqlSource</code>、<code>ProviderSqlSource</code>、<code>RawSqlSource</code>、<code>DynamicSqlSource</code>，且他们可以组合出现，可见还是有一定的复杂度的。所以才选择用包装类完成字段填充。这种是不建议自动填充那种包含不同值的字段的，因为这样会让预处理 SQL 没有发挥作用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillUTimeUpdateSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnValue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span><span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newSql <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replaceIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"set "</span><span class="token punctuation">,</span> <span class="token string">"set "</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> columnValue <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">,</span> <span class="token string">"sql"</span><span class="token punctuation">,</span> newSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillCUTimeInsertSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnValue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span><span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newSql <span class="token operator">=</span> sql<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newSql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sql<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">indexOfIgnoreCase</span><span class="token punctuation">(</span>newSql<span class="token punctuation">,</span> <span class="token string">"values"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index1 <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token string">"values"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index1 <span class="token operator">&lt;</span> newSql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index1 <span class="token operator">=</span> index1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> next <span class="token operator">=</span> newSql<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">||</span> next <span class="token operator">==</span> <span class="token char">'\\'</span> <span class="token operator">||</span> next <span class="token operator">==</span> <span class="token char">'n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            index1 <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">indexOfIgnoreCase</span><span class="token punctuation">(</span>newSql<span class="token punctuation">,</span> <span class="token string">"values"</span><span class="token punctuation">,</span> index1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> replace <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>newSql<span class="token punctuation">,</span> index<span class="token punctuation">,</span> index1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newSql <span class="token operator">=</span> newSql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>replace<span class="token punctuation">,</span> replace <span class="token operator">+</span> columnValue <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">,</span> <span class="token string">"sql"</span><span class="token punctuation">,</span> newSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="question-猜测你会有这样的疑问"><a href="#question-猜测你会有这样的疑问" class="headerlink" title=":question: 猜测你会有这样的疑问"></a><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 猜测你会有这样的疑问</h4><p>为什么不让项目直接集成 mybatis-plus 修改 pojo 就能快速解决问题，不用这么复杂。当然我统一这个思路，但这个思路适合于 pojo 少，且使用 <code>@Table</code> 、<code>@Column</code> 等数据库型的注解的项目。否则，在大项目中还是工作量及风险还是比较高。但这不影响我推荐使用 mybatis-plus。</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> 自动填充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁你续约了吗</title>
      <link href="/2024/01/31/redis-fen-bu-shi-suo-ni-xu-yue-liao-ma/"/>
      <url>/2024/01/31/redis-fen-bu-shi-suo-ni-xu-yue-liao-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-分布式锁你续期了吗？"><a href="#Redis-分布式锁你续期了吗？" class="headerlink" title="Redis 分布式锁你续期了吗？"></a>Redis 分布式锁你续期了吗？</h2><p>服务在集群情况下，线程锁是无法满足服务之间逻辑隔离。分布式锁概念应运而生，它需要具备互斥性、防止死锁、高可用性、可重入性、唯一标识的特点。</p><ul><li><p>互斥性：任意时刻，只能有一个服务才能获取锁。</p></li><li><p>防止死锁：分布式锁应该在服务逻辑运行异常或崩溃时能够自动释放。一般的做法是给锁设定超时时间避免死锁。</p></li><li><p>高可用性：确保锁提供方节点故障时也能正常工作，确保锁的可靠性。</p></li><li><p>可重入性：允许同一个线程或服务在持有锁的情况下多次获取同一个锁，而不会出现死锁或阻塞。</p></li><li><p>唯一标识：分布式锁应该具备唯一的标识。</p></li></ul><p>分布式锁方案大体有几种，使用基于唯一索引的数据库表、zookeeper/etcd、redis。为达到分布式锁的互斥性和防止死锁这两个特性，方案是设定超时时间配合<strong>定时续期</strong>以达到目的。如果你用 Redis 实现分布式锁，请问你项目中 Redis 分布式锁有<strong>定时续期</strong>吗？</p><p>Jedis 主要包含数据结构操作和队列 PUB/SUB 操作。Redisson 组件除此之外还包含分布式锁的实现。Redisson 关于获取锁有六种方式，<code>lock()</code> 、<code>tryLock()</code>、<code>lockInterruptibly()</code> 、<code>tryLock(long waitTime, TimeUnit unit)</code>、 <code>lock(long leaseTime, TimeUnit unit)</code> 、<code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code>。区分点在于 是否等待获取锁、等待获取锁时长，是否有过期、过期时间。好像没有看到续期相关的内容。</p><h4 id="mag-续期藏在细节里"><a href="#mag-续期藏在细节里" class="headerlink" title=":mag: 续期藏在细节里"></a><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 续期藏在细节里</h4><p>就像老夫老妻一样，<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 爱是藏在细节里，续期藏在锁获取的细节里。</p><blockquote><p><span class="github-emoji"><span>🚦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 代码是以 redisson-3.18.0 版本为例，估计总体思路差不多。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RedissonLock</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryAcquireAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ttlRemainingFuture<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_LONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_LONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> ttlRemainingFuture<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>ttlRemaining <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// lock acquired</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlRemaining <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                internalLockLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ttlRemaining<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，没有设置过期时间时，redisson 会使用 <code>internalLockLeaseTime</code> （它指 lock 内置过期时间，lock 对象初始化时从配置类 <code>org.redisson.config.Config#lockWatchdogTimeout</code> 中获取，默认 30 s）作为过期时间来申请分布式锁。第一次申请锁成功后 <code>ttlRemainingFuture.thenApply</code> ，如果自定义过期时间有值，则重新设置 <code>internalLockLeaseTime</code>。没有设置的话，则需要定时续期，保证锁能被本线程一直持有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RedissonBaseLock</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ExpirationEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpirationEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExpirationEntry</span> oldEntry <span class="token operator">=</span> <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEntry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 可重入位置，因为不存在获取锁之后，同一线程的并发问题，所以这里使用 LinkedHashMap</span>        oldEntry<span class="token punctuation">.</span><span class="token function">addThreadId</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        entry<span class="token punctuation">.</span><span class="token function">addThreadId</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ExpirationEntry</span> ee <span class="token operator">=</span> <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ee <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Timeout</span> task <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Timeout</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token class-name">ExpirationEntry</span> ent <span class="token operator">=</span> <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Long</span> threadId <span class="token operator">=</span> ent<span class="token punctuation">.</span><span class="token function">getFirstThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>threadId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token function">renewExpirationAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Can't update lock "</span> <span class="token operator">+</span> <span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" expiration"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// reschedule itself</span>                    <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> internalLockLeaseTime <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ee<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单概括，就是未设置过期时间的分布式锁，是以 30s 过期时间先获取分布式锁，程序中使用时间片方式在每 10s (30s * 1/3) 续期。设置过期时间的分布式锁反而不能享受续期。</strong></p><p><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 本来大家在实战过程中，就是怕锁不释放，基本上都会被建议使用 <code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> ，结果只有这种设置 leaseTime 的获取锁没有续期。多少有点被背 (feng) 刺 (ci) <span class="github-emoji"><span>🐝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。我们需要解决这个问（feng）题（ci），希望在 leaseTime 设置时，也能享受续期功效。</p><h4 id="balance-scale-超时与续期兼得"><a href="#balance-scale-超时与续期兼得" class="headerlink" title=":balance_scale: 超时与续期兼得"></a><span class="github-emoji"><span>⚖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2696.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 超时与续期兼得</h4><p>好在 <code>RedissonBaseLock</code> 中关于续期的方法 <code>scheduleExpirationRenewal</code> 和 <code>cancelExpirationRenewal</code> 都是 <code>protected</code> 修饰符修饰。可以建立 <code>RedissonBaseLock</code> 的包装类，在获取锁和释放锁的时候对 leaseTime 设置的续期补足即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>redisson</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RFuture</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * 分布式锁.&lt;br&gt; * 用装饰者模式给所有 lock 加上时间过期前的续期操作.&lt;br&gt; * redis 作为分布式锁方案一定会有弊端，比如出现哨兵模式的 redis 集群，就可能因为锁信息在主节点同步从节点时出现的主节点中断，导致从节点成为主节点之后 * 无锁信息，导致的其他线程申请到锁，此时就会出现两个线程获取到同一把锁的 ganga 场景.&lt;br&gt; * 请注意合理使用锁，获取锁后一定在 finally 中释放锁，程序运行时间长之后一定会出现内存溢出问题. * * @author liulili * @since 20243-01-19 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RenewalLock</span> <span class="token keyword">implements</span> <span class="token class-name">RLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedissonBaseLock</span> lock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RenewalLock</span><span class="token punctuation">(</span><span class="token class-name">RLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock <span class="token keyword">instanceof</span> <span class="token class-name">RenewalLock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"lock 本就是续期锁，不需要二次装饰！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock <span class="token keyword">instanceof</span> <span class="token class-name">RedissonBaseLock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RedissonBaseLock</span><span class="token punctuation">)</span> lock<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"分布式锁续期的功能至少是 RedissonBaseLock 的实例，到 redisson 3.18.0 版本，RedissonMultiLock 是不能被 DistributedLock 装饰的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"renewal_"</span> <span class="token operator">+</span> lock<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">RedissonBaseLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"internalLockLeaseTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"RedissonBaseLock 类没有 internalLockLeaseTime 属性，请注意版本"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lock<span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> getLockSuccess <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getLockSuccess <span class="token operator">&amp;&amp;</span> leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> getLockSuccess<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">forceUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">forceUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHeldByThread</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">remainTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">remainTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 还是默认的超时时间</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">forceUnlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> unlockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">forceUnlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unlockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unlockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> unlockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unlockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unlockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> unlockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">unlockAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        unlockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unlockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHoldCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">getHoldCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">isLockedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isLockedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">remainTimeToLiveAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">remainTimeToLiveAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有三个注意点：首先，这个装饰类需要放在 <code>org.redisson</code> 只有这样才能使用 <code>proteced void scheduleExpirationRenewal()</code> 和 <code>protected void cancelExpirationRenewal()</code> 方法。其次，续期依旧是按照 <code>internalLockLeaseTime</code> /3 间隔触发，但因为是申请锁完结之后的续期，所以此时的 <code>internalLockLeaseTime</code> 为第一次申请锁的 <code>leaseTime</code> 。第三，因 Redisson 版本不一样，可能不会有 RedissonBaseLock 基类，你可以升级版本后使用装饰类。</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
            <tag> redis </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json 工具我应该怎么选？</title>
      <link href="/2023/05/18/json-gong-ju-wo-ying-gai-zen-me-xuan/"/>
      <url>/2023/05/18/json-gong-ju-wo-ying-gai-zen-me-xuan/</url>
      
        <content type="html"><![CDATA[<p>编程多年，其实适合项目/自己/团队才是合适的。JSON 在 B/S 应用下，作为轻量级的数据交换方式。也应运而生不少序列化反序列化的 JSON 工具包。<br>比如，json-lib、fastjson、gson、jackson 等。我用过的，主要是这几个就说说我的选择场景及依据。</p><h3 id="json-lib"><a href="#json-lib" class="headerlink" title="json-lib"></a>json-lib</h3><p>这是我<strong>被迫</strong>使用的 JSON 工具包。不是主动选择，也是因为确实觉得很坑。<strong>首先</strong>，序列化和反序列化耗时很慢。<strong>其次</strong>，<code>JSONObject.getXXX(key)</code> JSONObject<br>的 get 系方法都必须要求 key 必须在 JSON 串中且非空。也就是被使用的 key 都必须是非空值，所以就逼迫设置默认值。但这样可能会导致业务被”逼不得已”的默认值覆盖。<strong>第三</strong>，<code>JSONObject.put(key,value)</code> 方法会针对 value 类型为 String 且符合 JSON 格式时，会将 value 反序列化。这个特性看似很好，其实在特定场景下，给人误导，<br>以为 value 是 JSONObject 结果发现是 String。Oh my god ！！总结，坑比较多，不建议使用。</p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>阿里巴巴出品，使用是很简单，基于类属性 get/set 来序列化和非序列化。包括也支持很多选项 <code>FastJsonConfig</code> 、 <code>SerializerFeature</code>。对研发来说，序列化反序列化使用<br>起来也很简单，性能也偏好。以为应该是很受欢迎，但 github 上 issue 很多。传说中源码写的不好，也没什么注释。所以，不是最受欢迎，在中国很有地位。</p><h3 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h3><p>被 spring-web 用作默认的 <code>application/json</code> 序列化和反序列化 JSON 选型。依赖的 jar 包少，提供扩展选项/高级功能很多。对我而言，相比较 fastjson 而言，使用<br>不方便。对于 String 转 Date 时，必须指定 <code>@JsonProperty(format='xxxx')</code> 格式化字段。</p><h3 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h3><p>google 推出 JSON 工具包，符合 JSON 格式定义，是依据属性进行序列化和反序列化，包含 public、private、protected 修饰字段。转 List、Set 集合类，相比 fastjson 支持<br>的很好。但是性能相比而言会弱一些。</p><h3 id="如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。"><a href="#如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。" class="headerlink" title="如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。"></a><strong>如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。</strong></h3>]]></content>
      
      
      <categories>
          
          <category> 选型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> 选型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot-security OAuth2应用实现</title>
      <link href="/2023/04/11/spring-boot-security-oauth2-ying-yong-shi-xian/"/>
      <url>/2023/04/11/spring-boot-security-oauth2-ying-yong-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="mouse-背景"><a href="#mouse-背景" class="headerlink" title=":mouse: 背景"></a><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>项目上一直使用 CAS + 应用 session + nginx IP hash 组合方式实现伪集群部署。但这种方式也有一定的缺点，请求不够平均，应用使用异步处理方式，还必须将结果返回给发起的应用，否则前端无法拿到结果。这些都是 IP 绑定固定应用导致的。2023 年为止，在网上搜索到主要解决方式有两个: 1. session 共享（需要依赖 redis）2. 签发 JWT 授权。不想引入 redis，所以选择签发 JWT 授权。技术选型上使用 <code>spring-scurity</code> + <code>CAS</code> + <code>oauth2</code> 组合方式。</p><h2 id="tiger-应用实现"><a href="#tiger-应用实现" class="headerlink" title=":tiger: 应用实现"></a><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 应用实现</h2><p>使用 <code>spring-security</code> + <code>CAS</code> + <code>Oauth2</code> 组合方式，spring-boot 中提供了很多 starter 可以使用。以下使用 maven 仓库管理为例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- spring-security 基础 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- CAS 相关 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-cas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- security-jwt相关 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-oauth2-jose<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- JWT 签发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-oauth2-resource-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>spring-boot-starter-security</code>，是 <code>spring-security</code> 的基础包，主要包含 <code>spring-security-config</code> 和 <code>spring-security-web</code></li><li><code>spring-security-cas</code>，是 <code>spring-security</code> 的 CAS 相关，包含 CAS validation 及验证通过或不通过的处理</li><li><code>spring-security-oauth2-jose</code>，是 <code>spring-security</code> 的 token 验证相关</li><li><code>spring-security-oauth2-resource-server</code>，是 <code>spring-security</code> 的 token 签发及 web token 验证。</li></ul><h3 id="elephant-怎么集成"><a href="#elephant-怎么集成" class="headerlink" title=":elephant: 怎么集成"></a><span class="github-emoji"><span>🐘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 怎么集成</h3><p>集成之前，建议先看看<a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html"> spring-security 的架构</a>，<span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 很容易理解。当然集成一个组件，需要有集成思路或步骤，</p><h4 id="PART1-选定用户校验方式"><a href="#PART1-选定用户校验方式" class="headerlink" title="PART1. 选定用户校验方式"></a>PART1. 选定用户校验方式</h4><p>spring-security 目前有支持的集中方式，</p><ul><li>伪验证（<code>AbstractPreAuthenticatedProcessingFilter</code>）其中假设委托人已经由外部系统进行了身份验证，实现类完成简单的校验</li><li>CAS 验证（<code>CasAuthenticationFilter</code>）</li><li>本地登录验证（<code>UsernamePasswordAuthenticationFilter</code>）应用本地数据库验证，非独立验证服务</li><li>token 验证（<code>BearerTokenAuthenticationFilter</code>）OAuth2 JWT 签发的 token 应用服务验证</li><li>其他验证（<code>AbstractAuthenticationProcessingFilter</code>）实现此类来完成定制验证，比如约定好请求授权的验证方式。</li></ul><p>当然，此处只是选择 Filter 并非真正验证的位置。所以，spring-security 支持的 CAS 或  UsernamePassword 验证方式也是把你的验证器默认设置了。</p><h4 id="PART2-组装待校验元素（principal-credentials）"><a href="#PART2-组装待校验元素（principal-credentials）" class="headerlink" title="PART2. 组装待校验元素（principal/credentials）"></a>PART2. 组装待校验元素（principal/credentials）</h4><p>principal，被验证主体。credentials，被验证证书，也可以是密码。</p><p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装待验证元素，有默认实现。就拿 CAS 来比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CASAuthenticationFilter</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token comment">//,,,</span>  <span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">.</span><span class="token function">unauthenticated</span><span class="token punctuation">(</span>      username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//,,,</span><span class="token punctuation">}</span><span class="token comment">// UsernamePasswordAuthenticationToken</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAuthenticationToken</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span><span class="token class-name">Object</span> principal<span class="token punctuation">,</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//,,,,</span><span class="token keyword">this</span><span class="token punctuation">.</span>principal <span class="token operator">=</span> principal<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> credentials<span class="token punctuation">;</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是使用 <code>AbstractPreAuthenticatedProcessingFilter</code> 时，则需要覆盖方法 <code>getPreAuthenticatedPrincipal()</code> 和 <code>getPreAuthenticatedPrincipal()</code> 来确定主体和证书。</p><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果是使用 <code>BearerTokenAuthenticationFilter</code> 时，默认是从请求中获取 Authorization header 值。我在实现时使用 cookie 方式，只需要实现 <code>BearerTokenResolver</code> 接口。</p><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果是使用 <code>AbstractAuthenticationProcessingFilter</code> 时，就自己在 <code>attemptAuthentication()</code> 方法中实现。</p><h4 id="PART3-组装授权令牌"><a href="#PART3-组装授权令牌" class="headerlink" title="PART3. 组装授权令牌"></a>PART3. 组装授权令牌</h4><p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装令牌的事情，Filter 里已经实现。就拿 CAS 来比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CASAuthenticationFilter</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token keyword">boolean</span> serviceTicketRequest <span class="token operator">=</span> <span class="token function">serviceTicketRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> username <span class="token operator">=</span> serviceTicketRequest <span class="token operator">?</span> <span class="token constant">CAS_STATEFUL_IDENTIFIER</span> <span class="token operator">:</span> <span class="token constant">CAS_STATELESS_IDENTIFIER</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">obtainArtifact</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">.</span><span class="token function">unauthenticated</span><span class="token punctuation">(</span>      username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font color="blue"><strong>在令牌未被验证之前，令牌的初始化必须指定令牌并未完成验证。即 authenticated 属性为 false 。</strong></font></p><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果是其他验证方式，则需要自己组装校验令牌，继承 <code>AbstractAuthenticationToken</code> 类。</p><h4 id="PART4-验证及验证后用户权限信息组装"><a href="#PART4-验证及验证后用户权限信息组装" class="headerlink" title="PART4. 验证及验证后用户权限信息组装"></a>PART4. 验证及验证后用户权限信息组装</h4><p>如果是使用 CAS 验证，需要选择一下 <code>AbstractCasProtocolUrlBasedTicketValidator</code> 验证器。当然你也可以实现此 abstract 类，完成 ticket 验证。验证器的调用方是 <code>CasAuthenticationProvider</code>。为什么在此介绍 <code>CasAuthenticationProvider</code> ？<span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 因为基本上所有的验证都一定是实现 <code>AuthenticationProvider</code> 接口。<span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 用户权限信息的组装，是实现 <code>AuthenticationUserDetailsService&lt;T extends Authentication&gt;</code> 接口，从缓存或是数据库中查询用户或权限点信息组装 UserDetails。</p><p><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font color="blue"><strong>验证通过后，可以通过在 Controller 方法上使用 <code>@AuthenticationPrincipal</code>&nbsp;注解，或请求线程里 <code>SecurityContextHolder.getContext().getAuthentication()</code>来获取用户授权信息。<code>@AuthenticationPrincipal</code>&nbsp;注解对应 UserDetails 对象，<code>@CurrentSecurityContext</code>&nbsp;注解对应 SecurityContext 对象。</strong></font></p><h4 id="PART5-验证成功或失败的处理实现"><a href="#PART5-验证成功或失败的处理实现" class="headerlink" title="PART5. 验证成功或失败的处理实现"></a>PART5. 验证成功或失败的处理实现</h4><p>验证成功或失败后的处理方式，一般有几种，重定向首页或登录页面，注册或撤销 JWT token，放行后面的 filter 或 Controller。<span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 而 JWT token 签发注销的功能，只需实现 <code>AuthenticationSuccessHandler</code> 和 <code>AuthenticationFailureHandler</code> 两个接口。</p><h4 id="PART6-以上内容配置组装"><a href="#PART6-以上内容配置组装" class="headerlink" title="PART6. 以上内容配置组装"></a>PART6. 以上内容配置组装</h4><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 配置组装通过继承 <code>WebSecurityConfigurerAdapter</code> 类，覆盖 <code>init(WebSecurity builder)</code> 方法完成 Filter、provider、handler 等注入。此处不多说，看代码应该就懂了。</p><p>以下以 CAS + OAuth2 组合方式的完整代码片段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TuscCasTicketValidator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCasProtocolUrlBasedTicketValidator</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">TuscCasTicketValidator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> casServerUrlPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设定 CAS server</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>casServerUrlPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getUrlSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 验证路径</span>      <span class="token keyword">return</span> <span class="token string">"validate"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">Assertion</span> <span class="token function">parseResponseFromServer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> response<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">TicketValidationException</span> <span class="token punctuation">{</span>        <span class="token comment">// 判定验证通过成果及结果反馈</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// bearer 验证需要</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieBearerTokenResolver</span> <span class="token keyword">implements</span> <span class="token class-name">BearerTokenResolver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COOKIE_NAME_BEARER</span> <span class="token operator">=</span> <span class="token string">"bearer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cookie <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAnyIgnoreCase</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">COOKIE_NAME_BEARER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeTokenHandler</span> <span class="token keyword">extends</span> <span class="token class-name">FilterAuthSuccessHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>    <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> jwtEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>      <span class="token class-name">JwtEncoderParameters</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>jwsHeader<span class="token punctuation">,</span> jwtClaimsSetBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>cookieTimeoutSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setHttpOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthFailHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationFailureHandler</span><span class="token punctuation">,</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>    <span class="token class-name">AuthenticationException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">InvalidBearerTokenException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/plain;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录已过期或被推出，需要重新登录验证！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 记住登出或访问前的地址</span>    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"登录页面地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 重新签发 token</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtRenewFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                  <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                                  <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token class-name">String</span> bearerToken <span class="token operator">=</span> bearerTokenResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> jwtDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bearerToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Instant</span> expiresAt <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getExpiresAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expiresAt<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> ticket <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getClaimAsString</span><span class="token punctuation">(</span><span class="token string">"st"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                casTicketValidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> serviceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">renewJwt</span><span class="token punctuation">(</span>jwt<span class="token punctuation">,</span> response<span class="token punctuation">,</span> jwtEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TicketValidationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">LoginBaseConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">HttpSecurity</span> httpSecurity<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MakeTokenHandler</span> makeTokenHandler    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DefaultAuthFailHandler</span> defaultAuthFailHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationDetailsSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">,</span> <span class="token class-name">WebAuthenticationDetails</span><span class="token punctuation">&gt;</span></span> webAuthenticationDetailsSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxxx}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> applicationServerUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxxx}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">CASServerUrl</span><span class="token punctuation">;</span>    <span class="token comment">// 12h</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${login.jwt.cookieTimeoutSecond:43200}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cookieTimeoutSecond<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${login.jwt.casDurationSecond:600}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> casDurationSecond<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">BearerTokenAuthenticationFilter</span> bearerTokenFilter <span class="token operator">=</span>           <span class="token keyword">new</span> <span class="token class-name">BearerTokenAuthenticationFilter</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>      bearerTokenFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationDetailsSource</span><span class="token punctuation">(</span>        dzdaWebAuthenticationDetailsSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BearerTokenResolver</span> bearerTokenResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieBearerTokenResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bearerTokenFilter<span class="token punctuation">.</span><span class="token function">setBearerTokenResolver</span><span class="token punctuation">(</span>makeTokenHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        bearerTokenFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationFailureHandler</span><span class="token punctuation">(</span>defaultAuthFailHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractAuthenticationProcessingFilter</span> casAuthenticationFilter          <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationFailureHandler</span><span class="token punctuation">(</span>defaultAuthFailHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setFilterProcessesUrl</span><span class="token punctuation">(</span><span class="token string">"/login/cas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationDetailsSource</span><span class="token punctuation">(</span>        dzdaWebAuthenticationDetailsSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationSuccessHandler</span><span class="token punctuation">(</span>        dzdaCasAuthenticationSuccessHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtRenewFilter</span> jwtRenewFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtRenewFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>          <span class="token function">setBearerTokenResolver</span><span class="token punctuation">(</span>bearerTokenResolver<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCasTicketValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TuscCasTicketValidator</span><span class="token punctuation">(</span>casServerUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setServiceUrl</span><span class="token punctuation">(</span>applicationServerUrl<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCookieTimeoutSecond</span><span class="token punctuation">(</span>cookieTimeoutSecond<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCasDurationSecond</span><span class="token punctuation">(</span>casDurationSecond<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setLocalDurationSecond</span><span class="token punctuation">(</span>localDurationSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpSecurity<span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>casAuthenticationFilter<span class="token punctuation">,</span>                                  <span class="token class-name">X509AuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtRenewFilter<span class="token punctuation">,</span> <span class="token class-name">BearerTokenAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>bearerTokenFilter<span class="token punctuation">,</span> <span class="token class-name">X509AuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">deleteCookies</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">,</span> <span class="token string">"JESSIONID"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">invalidateHttpSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"logoutroute"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultAuthFailHandler</span><span class="token punctuation">(</span>                  applicationServerUrl<span class="token punctuation">,</span> casServerUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">addSecurityFilterChainBuilder</span><span class="token punctuation">(</span>httpSecurity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsConfigurationSource</span> <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CorsConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedHeaders</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationProvider</span> <span class="token function">casAuthenticationProvider</span><span class="token punctuation">(</span><span class="token class-name">LoginServiceImpl</span> loginService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CasAuthenticationProvider</span> casAuthenticationProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setAuthenticationUserDetailsService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XXXCasUserDetailsService</span><span class="token punctuation">(</span>loginService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setTicketValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TuscCasTicketValidator</span><span class="token punctuation">(</span>ssoUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServiceProperties</span> serviceProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceProperties<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span>applicationServerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setServiceProperties</span><span class="token punctuation">(</span>serviceProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token string">"casAuthenticationProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> casAuthenticationProvider<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font color="blue"><strong>需要明确 Filter 的先后顺序，顺序不对可能会造成验证 bug，比如 renewFilter 应该在 BearerTokenAuthenticationFilter 之前。否则 renewFilter 就没有意义了。</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-security </tag>
            
            <tag> cas </tag>
            
            <tag> oauth2 </tag>
            
            <tag> pre-security </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-security中遇见的耗时小坑</title>
      <link href="/2023/04/10/spring-security-zhong-yu-jian-de-hao-shi-xiao-keng/"/>
      <url>/2023/04/10/spring-security-zhong-yu-jian-de-hao-shi-xiao-keng/</url>
      
        <content type="html"><![CDATA[<h2 id="pear-背景"><a href="#pear-背景" class="headerlink" title=":pear: 背景"></a><span class="github-emoji"><span>🍐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。</p><h2 id="orange-问题跟进"><a href="#orange-问题跟进" class="headerlink" title=":orange: 问题跟进"></a><span class="github-emoji"><span>🍊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题跟进</h2><h3 id="one-明确运维说『来回跳转』到底涉及那些地址"><a href="#one-明确运维说『来回跳转』到底涉及那些地址" class="headerlink" title=":one: 明确运维说『来回跳转』到底涉及那些地址"></a><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 明确运维说『来回跳转』到底涉及那些地址</h3><p>让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 <code>Preserve log</code>（保留请求日志），就能记录浏览器『来回跳转』网络请求。</p><pre class="line-numbers language-none"><code class="language-none">${应用}/login/cas?st=xxxxx${SSO-server}/login?service=encodeURIComponent(${应用}/login/cas)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就是这两个地址『来回跳转』。从这里能得做出如下推断:</p><ol><li>SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。</li><li>应用 <code>/login/cas</code> 请求，通过后台调用 SSO server 的 validate 接口完成 st（<code>service ticket</code>）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。</li></ol><p>总结，说明问题出在应用 <code>/login/cas</code> 请求认证中，虽然不敢相信但『事实胜于雄辩』。</p><h3 id="two-在应用后端找找原因"><a href="#two-在应用后端找找原因" class="headerlink" title=":two: 在应用后端找找原因"></a><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在应用后端找找原因</h3><p>为什么上面说 <code>/login/cas</code> 不敢相信有问题，因为应用后端使用 <code>spring-security-cas</code> 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？</p><p><code>spring-security-cas</code> 组件，有几个重要组成类：</p><ul><li><code>CasAuthenticationFilter</code>：<code>CAS</code> 验证过滤器，<code>/login/cas</code> 请求验证入口。其中， <code>attemptAuthentication()</code> 其中包含验证方法 ，验证不通过则抛出 <code>AuthenticationException</code>。<code>successfulAuthentication</code> 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。<code>unsuccessfulAuthentication</code> 则是验证失败后执行逻辑，是重定向到 <code>/login</code> 登录请求。</li><li><code>CasAuthenticationProvider</code>：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。</li><li><code>AbstractCasProtocolUrlBasedTicketValidator</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成调用 SSO server validate 接口验证<code>serviceTicket</code>。</li><li><code>AbstractCasAssertionUserDetailsService</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成用户及权限信息的装载。</li></ul><p>关键代码如下，其中会导致进入 <code>unsuccessfulAuthentication()</code> 逻辑的，是抛出 <code>TicketValidationException</code> 异常。那也就是 <code>ticketValidator.validate()</code> 、 <code>authenticationUserDetailsService.loadUserDetails()</code> 或 <code>userDetailsChecker.check()</code> 逻辑点抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CasAuthenticationProvider</span><span class="token keyword">private</span> <span class="token class-name">CasAuthenticationToken</span> <span class="token function">authenticateNow</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Assertion</span> assertion <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ticketValidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getServiceUrl</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token function">loadUserByAssertion</span><span class="token punctuation">(</span>assertion<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsChecker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> userDetails<span class="token punctuation">,</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authoritiesMapper<span class="token punctuation">.</span><span class="token function">mapAuthorities</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">,</span> assertion<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TicketValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>getMessage<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByAssertion</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Assertion</span> assertion<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">CasAssertionAuthenticationToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAssertionAuthenticationToken</span><span class="token punctuation">(</span>assertion<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationUserDetailsService<span class="token punctuation">.</span><span class="token function">loadUserDetails</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而后，现场通过 <code>arthas</code> 工具代码 <code>watch</code> 命令，监听代码明确异常抛出位置。最后，是在 <code>authenticationUserDetailsService.loadUserDetails()</code> 应用自己实现类上抛出了  <code>UsernameNotFoundException</code> 异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserDetails</span><span class="token punctuation">(</span><span class="token class-name">CasAssertionAuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> <span class="token function">getPrincipalAttributes</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MapUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} 没有额外的元数据"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"没有额外的元数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> loginId <span class="token operator">=</span> <span class="token function">getLoginId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>loginId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} 没有登录标识"</span><span class="token punctuation">,</span> loginId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s没有登录标识"</span><span class="token punctuation">,</span> loginId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> corpId <span class="token operator">=</span> <span class="token function">getCorpId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> <span class="token function">loadUserDO</span><span class="token punctuation">(</span>loginId<span class="token punctuation">,</span> corpId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> grantedAuthorities <span class="token operator">=</span> <span class="token function">getDefaultUserAuthorities</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonUserDetails</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grantedAuthorities<span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="three-到底是为什么有异常没有日志输出呢？"><a href="#three-到底是为什么有异常没有日志输出呢？" class="headerlink" title=":three: 到底是为什么有异常没有日志输出呢？"></a><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 到底是为什么有异常没有日志输出呢？</h3><p>最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 <code>AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()</code> 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to process authentication request"</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Cleared SecurityContextHolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Handling authentication failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rememberMeServices<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>failureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="banana-未提及的基础知识"><a href="#banana-未提及的基础知识" class="headerlink" title=":banana: 未提及的基础知识"></a><span class="github-emoji"><span>🍌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 未提及的基础知识</h3><ul><li><a href="https://apereo.github.io/cas/6.6.x/index.html">CAS 官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-security </tag>
            
            <tag> cas </tag>
            
            <tag> relogin </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm-link VUEX watch 怎么不生效</title>
      <link href="/2023/04/02/npm-link-vuex-watch-zen-me-bu-sheng-xiao/"/>
      <url>/2023/04/02/npm-link-vuex-watch-zen-me-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="cat-背景"><a href="#cat-背景" class="headerlink" title=":cat: 背景"></a><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>前端项目 <code>package.json</code> 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 <code>npm install --save-dev xxxx</code> 引入方式。<br>对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 <code>npm install</code> 下载包调试。<br>可以选用 <a href="https://docs.npmjs.com/cli/v9/commands/npm-link/">npm-link 方式</a> 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。<br>最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。<br>个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是<strong>原封</strong>不动，包括 <code>node_modules</code>（最后发现也坏在此处）。<br>搜索 google 和百度都没有有效的帖子。</p><h2 id="tiger-问题跟进"><a href="#tiger-问题跟进" class="headerlink" title=":tiger: 问题跟进"></a><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题跟进</h2><h3 id="one-搞懂-VUEX-store-的-watch-原理"><a href="#one-搞懂-VUEX-store-的-watch-原理" class="headerlink" title=":one: 搞懂 VUEX store 的 watch 原理"></a><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 搞懂 VUEX store 的 watch 原理</h3><p><strong>store watch 的初始化</strong></p><p><code>vue</code> 初始化时，会调用 <code>initState</code> 其中，会针对本 <code>vue</code> 的 watch 完成 <code>initWatch</code> 初始化。其中初始化过程中会调用 <code>Vue.prototype.$watch</code> (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 <code>watch handler</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$watch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">"callback for immediate watcher \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">;</span>      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">[</span>watcher<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unwatchFn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>new Watcher</code> 对象第一次获取 <code>watcher.value</code> 时，触发 <code>watcher</code> 对象的 Dep 依赖。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Watcher</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Watcher</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">,</span>  cb<span class="token punctuation">,</span>  options<span class="token punctuation">,</span>  isRenderWatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 隐藏不需要关注的代码</span>  <span class="token comment">// parse expression for getter</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> noop<span class="token punctuation">;</span>    <span class="token comment">// 隐藏不需要关注的代码</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy    <span class="token operator">?</span> <span class="token keyword">undefined</span>    <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 指定 Dep.target 为 watcher</span>  <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> value<span class="token punctuation">;</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"getter for watcher \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> e    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 退出 Dep.target 的指向  </span>    <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 触发真实 get 时，完成了 watcher 的 Dep 依赖</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 忽略 set</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>                childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。</span><span class="token class-name">Dep</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">depend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">depend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addDep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">addDep</span> <span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Dep.prototype.depend</code> 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 <code>store watch init</code> 的链路如下，</p><pre class="line-numbers language-none"><code class="language-none">depend (vue.common.dev.js:726)reactiveGetter (vue.common.dev.js:1038)prototypeAccessors$1.state.get (vuex.esm.js:438)（匿名） (vue.common.dev.js:514)get (vue.common.dev.js:4490)Watcher (vue.common.dev.js:4479)Vue.$watch (vue.common.dev.js:4953)createWatcher (vue.common.dev.js:4913)initWatch (vue.common.dev.js:4895)initState (vue.common.dev.js:4656)Vue._init (vue.common.dev.js:5010)VueComponent (vue.common.dev.js:5157)createComponentInstanceForVnode (vue.common.dev.js:3307)init (vue.common.dev.js:3136)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>store watch 的触发</strong></p><p><code>this.$store.commit('xxx', xxxx)</code> 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 忽略 get</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>        <span class="token comment">/* eslint-disable no-self-compare */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment">/* eslint-enable no-self-compare */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// #7981: for accessor properties without setter</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 触发通知</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dep</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 忽略不重要代码</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// watcher update</span>    subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>notify</code> 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 <code>watcher#addDep</code> 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。<code>store watch notify</code> 的链路如下，</p><pre class="line-numbers language-none"><code class="language-none">handler (list_left.vue:411)invokeWithErrorHandling (vue.common.dev.js:1868)run (vue.common.dev.js:4579)flushSchedulerQueue (vue.common.dev.js:4323)（匿名） (vue.common.dev.js:1994)flushCallbacks (vue.common.dev.js:1920)Promise.then（异步）timerFunc (vue.common.dev.js:1947)nextTick (vue.common.dev.js:2004)queueWatcher (vue.common.dev.js:4415)update (vue.common.dev.js:4555)notify (vue.common.dev.js:741)reactiveSetter (vue.common.dev.js:1066)proxySetter (vue.common.dev.js:4639)changeAjlb (nav.vue:431)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上，<strong>watcher init</strong> 和 <strong>watcher 触发</strong> 总结来说就是这个图。</p><p><img src="/images/2023/npm_link_vuex_watch/link.png"></p><h3 id="two-为啥-npm-link-不能触发-store-watch"><a href="#two-为啥-npm-link-不能触发-store-watch" class="headerlink" title=":two: 为啥 npm-link 不能触发 store watch"></a><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 为啥 npm-link 不能触发 store watch</h3><p>搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 <code>initWatcher</code> 的时候是否完成了 <code>Watcher#addDep</code>。<br>** 结果发现，在 <code>Watcher.prototype.get</code>方法中 <code>pushTarget(this)</code>  Dep 指向 <code>webpack://${web_app}/./node_nodules/vue/dist/vue,common.dev.js</code>。<br>而在 <code>Object.defineProperty#get</code> 方法中 <code>Dep.target</code> 代码 Dep 指向<br><code>webpack://${web_app}/${web_component}/node_modules/vue/dist/vue.common.dev.js</code>。<br>摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。</p><p><strong>此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。</strong></p><h3 id="three-如何解决问题"><a href="#three-如何解决问题" class="headerlink" title=":three: 如何解决问题"></a><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如何解决问题</h3><p>在场景层将 vue 定义成 window 全局对象。在组件内使用 <code>window.Vue</code> 装载  vuex。自此，问题终结。修改方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在前端应用入口文件中</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>Vue <span class="token operator">=</span> vue<span class="token punctuation">;</span>vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在被引用的组件入口文件中</span><span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rabbit-总结"><a href="#rabbit-总结" class="headerlink" title=":rabbit: 总结"></a><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 总结</h2><ol><li>npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。</li><li>前端代码排查确是不如后端代码排查方便，啥 <code>console.warn</code> 都么得耗时长。</li></ol><h2 id="sheep-附件"><a href="#sheep-附件" class="headerlink" title=":sheep: 附件"></a><span class="github-emoji"><span>🐑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 附件</h2><ul><li><a href="https://segmentfault.com/a/1190000016208088">Vue源码解读之Dep,Observer和Watcher</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm-link </tag>
            
            <tag> code </tag>
            
            <tag> npm </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab 上和项目大仓库说再见</title>
      <link href="/2023/03/27/gitlab-shang-he-xiang-mu-da-cang-ku-shuo-zai-jian/"/>
      <url>/2023/03/27/gitlab-shang-he-xiang-mu-da-cang-ku-shuo-zai-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="cat-背景"><a href="#cat-背景" class="headerlink" title=":cat: 背景"></a><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p><code>git clone</code> 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 <code>gitlab</code> 代码仓库减负。</p><h3 id="dog-基础知识"><a href="#dog-基础知识" class="headerlink" title=":dog: 基础知识"></a><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 基础知识</h3><p>项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + <code>.git</code> （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 <a href="https://www.jam-software.com/treesize_free">treesize free</a> / <a href="http://www.uderzo.it/main_products/space_sniffer/download_alt.html">SpaceSniffer</a> 工具，linux 可以用命令 <code>du -h –max-depth=1 *</code>，mac 命令 <code>du -h -d 1 *</code> ），一般 <code>.git</code> 目录下文件大小 &gt;= 项目文件大小。意味着，项目整体下载空间占用 &gt;= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了<strong>共享备份存储空间</strong>是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。</p><h3 id="fish-拯救-git-仓库"><a href="#fish-拯救-git-仓库" class="headerlink" title=":fish: 拯救 git 仓库"></a><span class="github-emoji"><span>🐟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 拯救 git 仓库</h3><p>对于需求文档类项目而言，建议用 <code>git lfs</code> 做大文件管理（此处 <code>git lfs</code> 不做过多介绍，请点击<a href="https://git-lfs.github.com/">链接</a>了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库</p></blockquote><h3 id="whale-分析-git-大仓库"><a href="#whale-分析-git-大仓库" class="headerlink" title=":whale: 分析 git 大仓库"></a><span class="github-emoji"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 分析 git 大仓库</h3><ul><li><p>windows 上使用 <code>TreeSize Free</code>  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，<code>.git</code> 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件<strong>git 原理</strong>找答案。</p><p><img src="/images/2023/gitlab_bigcodes/directory_image.png"></p></li><li><p>使用 <code>git verify-pack</code>  命令运行  <code>git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10</code> ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 <code>git Bash Here </code> 运行。</p><p><img src="/images/2023/gitlab_bigcodes/git_xpack.png"></p></li><li><p>使用命令 <code>git rev-list</code> 运行 <code>git rev-list --objects --all|grep  hashId </code> 定位大文件路径。此处，处理文件大小超过 100 MB。</p><p><img src="/images/2023/gitlab_bigcodes/directory_file.png"></p></li><li><p>按照路径和 <code>git log</code> 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 <code>xxxx.asf</code> 和 <code>xxx.asf</code> 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 <code>git revert</code> 还原到删除前的 commitId 版本。所以，清理原则就是需要<strong>明确</strong>哪些文件要删除，没有机会还原的话，就删除吧。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 有重命名/移动目录需求，请使用 <code>git mv</code>  命令，而达到目录变更及命名功能。不要使用 <code>git mv</code> 和 <code>git add</code> 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。</p></blockquote></li></ul><h2 id="dolphin-如何清理"><a href="#dolphin-如何清理" class="headerlink" title=":dolphin: 如何清理"></a><span class="github-emoji"><span>🐬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如何清理</h2><blockquote><p>在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。</p></blockquote><p>目前，主要有两种方法：</p><ul><li><p>git 原生支持的 <code>filter-branch</code> 分支文件，命令 <code>git filter-branch --force --tree-filter 'rm -f path/to/big_file.mpg' HEAD</code> 。（不推荐。对于超多 commit 的项目，<code>filter-branch</code> 慢的怀疑人生，小编就是从 <code>git filter-branch</code> 放弃，转投 <code>BFG</code>）</p></li><li><p><code>BFG</code> 工具</p><ul><li><p>执行命令 <code>git clone --mirror git-repository-url</code>  clone git 仓库</p></li><li><p>执行命令 <code>java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files '{xxx.asf,xxx.asf}' thunisoft-mvd.git</code>。</p><blockquote><p><code>BFG</code> 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 <code>thunisoft-mvd.git.bfg-report\2020-07-17\16-14-13\object-id-map.old-new.txt</code> 中<br>此时，<code>.git/objects</code> 下的  <code>pack/xxxxx.pack</code>  文件会被解压为  n 个 <code>git objects</code> 对象文件</p></blockquote></li></ul><p>  <img src="/images/2023/gitlab_bigcodes/log_for_bfg.png"></p></li><li><p>执行命令 <code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code> ，将 git object 对象压缩。而后，执行命令 <code>git push</code> 推送远端。</p><blockquote><p>注意：推送之前解除仓库的 <code>Protected Branches</code> 的配置</p></blockquote></li></ul><p>  <img src="/images/2023/gitlab_bigcodes/git_compress.png"></p><ul><li>请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 <code>.git</code> 会更大，因为除了 <code>git gc</code> 重新生成的 <code>pack</code> 文件之外，还有本地本身老的 <code>pack</code> 文件。</li></ul><p><strong>最终和派生项目对比，除 <code>.git</code> 目录外其他相同。</strong></p><p><img src="/images/2023/gitlab_bigcodes/gitcode_compare.png"></p><p><strong>为什么存在不到 1 KB 的文件？因为，本项目使用 <code>git lfs</code> 做了大文件管理，使用 <code>git lfs pull</code> 可以从远端拉下 1 KB 映射的原文件</strong><br><strong><font color="red">清理完成，2.4 GB -&gt; 1.1 GB 的转身</font></strong></p><h2 id="lion-特别说明"><a href="#lion-特别说明" class="headerlink" title=":lion: 特别说明"></a><span class="github-emoji"><span>🦁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 特别说明</h2><ul><li>项目使用 <code>git lfs</code> 管理大文件之后，使用 <code>BFG</code> 清理完对项目本身没有任何影响。照样，可以使用 <code>git lfs</code> 命令管理文件。</li><li>真实项目在清理前，请先按照本文先 <code>clone</code> 出一份，熟悉一下清理流程，更有底气。</li></ul><h2 id="horse-附录"><a href="#horse-附录" class="headerlink" title=":horse: 附录"></a><span class="github-emoji"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 附录</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/10/git-internals.html">git 原理-阮一峰</a></li><li><a href="https://zhuanlan.zhihu.com/p/45510461">git 原理</a></li><li><a href="https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file">git 大文件清理-github</a></li><li><a href="http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md">git 大文件清理-gitlab</a>，目前不用上传 <code>object-id-map.old-new.txt</code> 文件，走 “开始清理” 这步骤</li><li><a href="https://rtyley.github.io/bfg-repo-cleaner/">git BFG</a></li><li><a href="https://learngitbranching.js.org/?locale=zh_CN">git 练习场</a></li><li><a href="https://git-scm.com/book/zh/v2">git 学习文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> gitlab </tag>
            
            <tag> BFG </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
