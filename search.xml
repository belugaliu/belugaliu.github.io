<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>spring-security中遇见的耗时小坑</title>
      <link href="/2023/04/10/spring-security-zhong-yu-jian-de-hao-shi-xiao-keng/"/>
      <url>/2023/04/10/spring-security-zhong-yu-jian-de-hao-shi-xiao-keng/</url>
      
        <content type="html"><![CDATA[<h2 id="pear-背景"><a href="#pear-背景" class="headerlink" title=":pear: 背景"></a><span class="github-emoji"><span>🍐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。</p><h2 id="orange-问题跟进"><a href="#orange-问题跟进" class="headerlink" title=":orange: 问题跟进"></a><span class="github-emoji"><span>🍊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题跟进</h2><h3 id="one-明确运维说『来回跳转』到底涉及那些地址"><a href="#one-明确运维说『来回跳转』到底涉及那些地址" class="headerlink" title=":one: 明确运维说『来回跳转』到底涉及那些地址"></a><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 明确运维说『来回跳转』到底涉及那些地址</h3><p>让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 <code>Preserve log</code>（保留请求日志），就能记录浏览器『来回跳转』网络请求。</p><pre class="line-numbers language-none"><code class="language-none">${应用}/login/cas?st=xxxxx${SSO-server}/login?service=encodeURIComponent(${应用}/login/cas)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就是这两个地址『来回跳转』。从这里能得做出如下推断:</p><ol><li>SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。</li><li>应用 <code>/login/cas</code> 请求，通过后台调用 SSO server 的 validate 接口完成 st（<code>service ticket</code>）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。</li></ol><p>总结，说明问题出在应用 <code>/login/cas</code> 请求认证中，虽然不敢相信但『事实胜于雄辩』。</p><h3 id="two-在应用后端找找原因"><a href="#two-在应用后端找找原因" class="headerlink" title=":two: 在应用后端找找原因"></a><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在应用后端找找原因</h3><p>为什么上面说 <code>/login/cas</code> 不敢相信有问题，因为应用后端使用 <code>spring-security-cas</code> 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？</p><p><code>spring-security-cas</code> 组件，有几个重要组成类：</p><ul><li><code>CasAuthenticationFilter</code>：<code>CAS</code> 验证过滤器，<code>/login/cas</code> 请求验证入口。其中， <code>attemptAuthentication()</code> 其中包含验证方法 ，验证不通过则抛出 <code>AuthenticationException</code>。<code>successfulAuthentication</code> 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。<code>unsuccessfulAuthentication</code> 则是验证失败后执行逻辑，是重定向到 <code>/login</code> 登录请求。</li><li><code>CasAuthenticationProvider</code>：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。</li><li><code>AbstractCasProtocolUrlBasedTicketValidator</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成调用 SSO server validate 接口验证<code>serviceTicket</code>。</li><li><code>AbstractCasAssertionUserDetailsService</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成用户及权限信息的装载。</li></ul><p>关键代码如下，其中会导致进入 <code>unsuccessfulAuthentication()</code> 逻辑的，是抛出 <code>TicketValidationException</code> 异常。那也就是 <code>ticketValidator.validate()</code> 、 <code>authenticationUserDetailsService.loadUserDetails()</code> 或 <code>userDetailsChecker.check()</code> 逻辑点抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CasAuthenticationProvider</span><span class="token keyword">private</span> <span class="token class-name">CasAuthenticationToken</span> <span class="token function">authenticateNow</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Assertion</span> assertion <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ticketValidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getServiceUrl</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token function">loadUserByAssertion</span><span class="token punctuation">(</span>assertion<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsChecker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> userDetails<span class="token punctuation">,</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authoritiesMapper<span class="token punctuation">.</span><span class="token function">mapAuthorities</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">,</span> assertion<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TicketValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>getMessage<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByAssertion</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Assertion</span> assertion<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">CasAssertionAuthenticationToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAssertionAuthenticationToken</span><span class="token punctuation">(</span>assertion<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationUserDetailsService<span class="token punctuation">.</span><span class="token function">loadUserDetails</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而后，现场通过 <code>arthas</code> 工具代码 <code>watch</code> 命令，监听代码明确异常抛出位置。最后，是在 <code>authenticationUserDetailsService.loadUserDetails()</code> 应用自己实现类上抛出了  <code>UsernameNotFoundException</code> 异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserDetails</span><span class="token punctuation">(</span><span class="token class-name">CasAssertionAuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> <span class="token function">getPrincipalAttributes</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MapUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} 没有额外的元数据"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"没有额外的元数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> loginId <span class="token operator">=</span> <span class="token function">getLoginId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>loginId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} 没有登录标识"</span><span class="token punctuation">,</span> loginId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s没有登录标识"</span><span class="token punctuation">,</span> loginId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> corpId <span class="token operator">=</span> <span class="token function">getCorpId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> <span class="token function">loadUserDO</span><span class="token punctuation">(</span>loginId<span class="token punctuation">,</span> corpId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> grantedAuthorities <span class="token operator">=</span> <span class="token function">getDefaultUserAuthorities</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonUserDetails</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grantedAuthorities<span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="three-到底是为什么有异常没有日志输出呢？"><a href="#three-到底是为什么有异常没有日志输出呢？" class="headerlink" title=":three: 到底是为什么有异常没有日志输出呢？"></a><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 到底是为什么有异常没有日志输出呢？</h3><p>最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 <code>AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()</code> 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to process authentication request"</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Cleared SecurityContextHolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Handling authentication failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rememberMeServices<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>failureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="banana-未提及的基础知识"><a href="#banana-未提及的基础知识" class="headerlink" title=":banana: 未提及的基础知识"></a><span class="github-emoji"><span>🍌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 未提及的基础知识</h3><ul><li><a href="https://apereo.github.io/cas/6.6.x/index.html">CAS 官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-security </tag>
            
            <tag> cas </tag>
            
            <tag> relogin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm-link VUEX watch 怎么不生效</title>
      <link href="/2023/04/02/npm-link-vuex-watch-zen-me-bu-sheng-xiao/"/>
      <url>/2023/04/02/npm-link-vuex-watch-zen-me-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="cat-背景"><a href="#cat-背景" class="headerlink" title=":cat: 背景"></a><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>前端项目 <code>package.json</code> 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 <code>npm install --save-dev xxxx</code> 引入方式。<br>对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 <code>npm install</code> 下载包调试。<br>可以选用 <a href="https://docs.npmjs.com/cli/v9/commands/npm-link/">npm-link 方式</a> 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。<br>最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。<br>个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是<strong>原封</strong>不动，包括 <code>node_modules</code>（最后发现也坏在此处）。<br>搜索 google 和百度都没有有效的帖子。</p><h2 id="tiger-问题跟进"><a href="#tiger-问题跟进" class="headerlink" title=":tiger: 问题跟进"></a><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题跟进</h2><h3 id="one-搞懂-VUEX-store-的-watch-原理"><a href="#one-搞懂-VUEX-store-的-watch-原理" class="headerlink" title=":one: 搞懂 VUEX store 的 watch 原理"></a><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 搞懂 VUEX store 的 watch 原理</h3><p><strong>store watch 的初始化</strong></p><p><code>vue</code> 初始化时，会调用 <code>initState</code> 其中，会针对本 <code>vue</code> 的 watch 完成 <code>initWatch</code> 初始化。其中初始化过程中会调用 <code>Vue.prototype.$watch</code> (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 <code>watch handler</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$watch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">"callback for immediate watcher \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">;</span>      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">[</span>watcher<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unwatchFn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>new Watcher</code> 对象第一次获取 <code>watcher.value</code> 时，触发 <code>watcher</code> 对象的 Dep 依赖。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Watcher</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Watcher</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">,</span>  cb<span class="token punctuation">,</span>  options<span class="token punctuation">,</span>  isRenderWatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 隐藏不需要关注的代码</span>  <span class="token comment">// parse expression for getter</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> noop<span class="token punctuation">;</span>    <span class="token comment">// 隐藏不需要关注的代码</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy    <span class="token operator">?</span> <span class="token keyword">undefined</span>    <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 指定 Dep.target 为 watcher</span>  <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> value<span class="token punctuation">;</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"getter for watcher \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> e    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 退出 Dep.target 的指向  </span>    <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 触发真实 get 时，完成了 watcher 的 Dep 依赖</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 忽略 set</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>                childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。</span><span class="token class-name">Dep</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">depend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">depend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addDep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">addDep</span> <span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Dep.prototype.depend</code> 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 <code>store watch init</code> 的链路如下，</p><pre class="line-numbers language-none"><code class="language-none">depend (vue.common.dev.js:726)reactiveGetter (vue.common.dev.js:1038)prototypeAccessors$1.state.get (vuex.esm.js:438)（匿名） (vue.common.dev.js:514)get (vue.common.dev.js:4490)Watcher (vue.common.dev.js:4479)Vue.$watch (vue.common.dev.js:4953)createWatcher (vue.common.dev.js:4913)initWatch (vue.common.dev.js:4895)initState (vue.common.dev.js:4656)Vue._init (vue.common.dev.js:5010)VueComponent (vue.common.dev.js:5157)createComponentInstanceForVnode (vue.common.dev.js:3307)init (vue.common.dev.js:3136)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>store watch 的触发</strong></p><p><code>this.$store.commit('xxx', xxxx)</code> 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 忽略 get</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>        <span class="token comment">/* eslint-disable no-self-compare */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment">/* eslint-enable no-self-compare */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// #7981: for accessor properties without setter</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 触发通知</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dep</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 忽略不重要代码</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// watcher update</span>    subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>notify</code> 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 <code>watcher#addDep</code> 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。<code>store watch notify</code> 的链路如下，</p><pre class="line-numbers language-none"><code class="language-none">handler (list_left.vue:411)invokeWithErrorHandling (vue.common.dev.js:1868)run (vue.common.dev.js:4579)flushSchedulerQueue (vue.common.dev.js:4323)（匿名） (vue.common.dev.js:1994)flushCallbacks (vue.common.dev.js:1920)Promise.then（异步）timerFunc (vue.common.dev.js:1947)nextTick (vue.common.dev.js:2004)queueWatcher (vue.common.dev.js:4415)update (vue.common.dev.js:4555)notify (vue.common.dev.js:741)reactiveSetter (vue.common.dev.js:1066)proxySetter (vue.common.dev.js:4639)changeAjlb (nav.vue:431)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上，<strong>watcher init</strong> 和 <strong>watcher 触发</strong> 总结来说就是这个图。</p><p><img src="/images/2023/npm_link_vuex_watch/link.png"></p><h3 id="two-为啥-npm-link-不能触发-store-watch"><a href="#two-为啥-npm-link-不能触发-store-watch" class="headerlink" title=":two: 为啥 npm-link 不能触发 store watch"></a><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 为啥 npm-link 不能触发 store watch</h3><p>搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 <code>initWatcher</code> 的时候是否完成了 <code>Watcher#addDep</code>。<br>** 结果发现，在 <code>Watcher.prototype.get</code>方法中 <code>pushTarget(this)</code>  Dep 指向 <code>webpack://${web_app}/./node_nodules/vue/dist/vue,common.dev.js</code>。<br>而在 <code>Object.defineProperty#get</code> 方法中 <code>Dep.target</code> 代码 Dep 指向<br><code>webpack://${web_app}/${web_component}/node_modules/vue/dist/vue.common.dev.js</code>。<br>摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。</p><p><strong>此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。</strong></p><h3 id="three-如何解决问题"><a href="#three-如何解决问题" class="headerlink" title=":three: 如何解决问题"></a><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如何解决问题</h3><p>在场景层将 vue 定义成 window 全局对象。在组件内使用 <code>window.Vue</code> 装载  vuex。自此，问题终结。修改方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在前端应用入口文件中</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>Vue <span class="token operator">=</span> vue<span class="token punctuation">;</span>vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在被引用的组件入口文件中</span><span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rabbit-总结"><a href="#rabbit-总结" class="headerlink" title=":rabbit: 总结"></a><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 总结</h2><ol><li>npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。</li><li>前端代码排查确是不如后端代码排查方便，啥 <code>console.warn</code> 都么得耗时长。</li></ol><h2 id="sheep-附件"><a href="#sheep-附件" class="headerlink" title=":sheep: 附件"></a><span class="github-emoji"><span>🐑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 附件</h2><ul><li><a href="https://segmentfault.com/a/1190000016208088">Vue源码解读之Dep,Observer和Watcher</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> npm-link </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab 上和项目大仓库说再见</title>
      <link href="/2023/03/27/gitlab-shang-he-xiang-mu-da-cang-ku-shuo-zai-jian/"/>
      <url>/2023/03/27/gitlab-shang-he-xiang-mu-da-cang-ku-shuo-zai-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="cat-背景"><a href="#cat-背景" class="headerlink" title=":cat: 背景"></a><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p><code>git clone</code> 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 <code>gitlab</code> 代码仓库减负。</p><h3 id="dog-基础知识"><a href="#dog-基础知识" class="headerlink" title=":dog: 基础知识"></a><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 基础知识</h3><p>项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + <code>.git</code> （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 <a href="https://www.jam-software.com/treesize_free">treesize free</a> / <a href="http://www.uderzo.it/main_products/space_sniffer/download_alt.html">SpaceSniffer</a> 工具，linux 可以用命令 <code>du -h –max-depth=1 *</code>，mac 命令 <code>du -h -d 1 *</code> ），一般 <code>.git</code> 目录下文件大小 &gt;= 项目文件大小。意味着，项目整体下载空间占用 &gt;= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了<strong>共享备份存储空间</strong>是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。</p><h3 id="fish-拯救-git-仓库"><a href="#fish-拯救-git-仓库" class="headerlink" title=":fish: 拯救 git 仓库"></a><span class="github-emoji"><span>🐟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 拯救 git 仓库</h3><p>对于需求文档类项目而言，建议用 <code>git lfs</code> 做大文件管理（此处 <code>git lfs</code> 不做过多介绍，请点击<a href="https://git-lfs.github.com/">链接</a>了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库</p></blockquote><h3 id="whale-分析-git-大仓库"><a href="#whale-分析-git-大仓库" class="headerlink" title=":whale: 分析 git 大仓库"></a><span class="github-emoji"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 分析 git 大仓库</h3><ul><li><p>windows 上使用 <code>TreeSize Free</code>  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，<code>.git</code> 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件<strong>git 原理</strong>找答案。</p><p><img src="/images/2023/gitlab_bigcodes/directory_image.png"></p></li><li><p>使用 <code>git verify-pack</code>  命令运行  <code>git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10</code> ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 <code>git Bash Here </code> 运行。</p><p><img src="/images/2023/gitlab_bigcodes/git_xpack.png"></p></li><li><p>使用命令 <code>git rev-list</code> 运行 <code>git rev-list --objects --all|grep  hashId </code> 定位大文件路径。此处，处理文件大小超过 100 MB。</p><p><img src="/images/2023/gitlab_bigcodes/directory_file.png"></p></li><li><p>按照路径和 <code>git log</code> 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 <code>xxxx.asf</code> 和 <code>xxx.asf</code> 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 <code>git revert</code> 还原到删除前的 commitId 版本。所以，清理原则就是需要<strong>明确</strong>哪些文件要删除，没有机会还原的话，就删除吧。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 有重命名/移动目录需求，请使用 <code>git mv</code>  命令，而达到目录变更及命名功能。不要使用 <code>git mv</code> 和 <code>git add</code> 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。</p></blockquote></li></ul><h2 id="dolphin-如何清理"><a href="#dolphin-如何清理" class="headerlink" title=":dolphin: 如何清理"></a><span class="github-emoji"><span>🐬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如何清理</h2><blockquote><p>在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。</p></blockquote><p>目前，主要有两种方法：</p><ul><li><p>git 原生支持的 <code>filter-branch</code> 分支文件，命令 <code>git filter-branch --force --tree-filter 'rm -f path/to/big_file.mpg' HEAD</code> 。（不推荐。对于超多 commit 的项目，<code>filter-branch</code> 慢的怀疑人生，小编就是从 <code>git filter-branch</code> 放弃，转投 <code>BFG</code>）</p></li><li><p><code>BFG</code> 工具</p><ul><li><p>执行命令 <code>git clone --mirror git-repository-url</code>  clone git 仓库</p></li><li><p>执行命令 <code>java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files '{xxx.asf,xxx.asf}' thunisoft-mvd.git</code>。</p><blockquote><p><code>BFG</code> 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 <code>thunisoft-mvd.git.bfg-report\2020-07-17\16-14-13\object-id-map.old-new.txt</code> 中<br>此时，<code>.git/objects</code> 下的  <code>pack/xxxxx.pack</code>  文件会被解压为  n 个 <code>git objects</code> 对象文件</p></blockquote></li></ul><p>  <img src="/images/2023/gitlab_bigcodes/log_for_bfg.png"></p></li><li><p>执行命令 <code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code> ，将 git object 对象压缩。而后，执行命令 <code>git push</code> 推送远端。</p><blockquote><p>注意：推送之前解除仓库的 <code>Protected Branches</code> 的配置</p></blockquote></li></ul><p>  <img src="/images/2023/gitlab_bigcodes/git_compress.png"></p><ul><li>请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 <code>.git</code> 会更大，因为除了 <code>git gc</code> 重新生成的 <code>pack</code> 文件之外，还有本地本身老的 <code>pack</code> 文件。</li></ul><p><strong>最终和派生项目对比，除 <code>.git</code> 目录外其他相同。</strong></p><p><img src="/images/2023/gitlab_bigcodes/gitcode_compare.png"></p><p><strong>为什么存在不到 1 KB 的文件？因为，本项目使用 <code>git lfs</code> 做了大文件管理，使用 <code>git lfs pull</code> 可以从远端拉下 1 KB 映射的原文件</strong><br><strong><font color="red">清理完成，2.4 GB -&gt; 1.1 GB 的转身</font></strong></p><h2 id="lion-特别说明"><a href="#lion-特别说明" class="headerlink" title=":lion: 特别说明"></a><span class="github-emoji"><span>🦁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 特别说明</h2><ul><li>项目使用 <code>git lfs</code> 管理大文件之后，使用 <code>BFG</code> 清理完对项目本身没有任何影响。照样，可以使用 <code>git lfs</code> 命令管理文件。</li><li>真实项目在清理前，请先按照本文先 <code>clone</code> 出一份，熟悉一下清理流程，更有底气。</li></ul><h2 id="horse-附录"><a href="#horse-附录" class="headerlink" title=":horse: 附录"></a><span class="github-emoji"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 附录</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/10/git-internals.html">git 原理-阮一峰</a></li><li><a href="https://zhuanlan.zhihu.com/p/45510461">git 原理</a></li><li><a href="https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file">git 大文件清理-github</a></li><li><a href="http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md">git 大文件清理-gitlab</a>，目前不用上传 <code>object-id-map.old-new.txt</code> 文件，走 “开始清理” 这步骤</li><li><a href="https://rtyley.github.io/bfg-repo-cleaner/">git BFG</a></li><li><a href="https://learngitbranching.js.org/?locale=zh_CN">git 练习场</a></li><li><a href="https://git-scm.com/book/zh/v2">git 学习文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> gitlab </tag>
            
            <tag> BFG </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
