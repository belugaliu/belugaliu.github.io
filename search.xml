<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Aspose 操作集合</title>
      <link href="/2024/12/09/aspose-cao-zuo-ji-he/"/>
      <url>/2024/12/09/aspose-cao-zuo-ji-he/</url>
      
        <content type="html"><![CDATA[<p>aspose 在搜索引擎上可搜索且正确的内容太少或者说正确的不多。用自己的经验总结帖子，随时会增加内容。</p><h3 id="通用部分"><a href="#通用部分" class="headerlink" title="通用部分"></a>通用部分</h3><h4 id="word-单位与-px-之间的转换"><a href="#word-单位与-px-之间的转换" class="headerlink" title="word 单位与 px 之间的转换"></a>word 单位与 px 之间的转换</h4><p>word 的单位是 pt（point）css 中 <code>font-size</code>  单位 px，之间的转换与分辨率相关。默认的分辨率为 96ppi，分辨率 96dpi 是量度单位，表示每 1 英寸上的点数是 96 点（图像 ppi 值越高，画面的细节就越丰富）。所以，转换公式</p><pre class="line-numbers language-none"><code class="language-none">pt * 72f/92f = px<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="给图片增加透明度"><a href="#给图片增加透明度" class="headerlink" title="给图片增加透明度"></a>给图片增加透明度</h4><p>图片增加透明度，需要给新画布上设置透明度后将图片内容画至画布上。其中，<code>BufferedImage.TYPE_INT_ARGB</code> 至带有透明度的 RGB。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// imageInputStream 图片的输入流</span><span class="token class-name">BufferedImage</span> originImageData <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>imageInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedImage</span> newImageData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>originImageData<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>originImageData<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">.</span><span class="token constant">TYPE_INT_ARGB</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> newImageData<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span><span class="token class-name">RenderingHints</span><span class="token punctuation">.</span><span class="token constant">KEY_ANTIALIASING</span><span class="token punctuation">,</span> <span class="token class-name">RenderingHints</span><span class="token punctuation">.</span><span class="token constant">VALUE_ANTIALIAS_ON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setComposite</span><span class="token punctuation">(</span><span class="token class-name">AlphaComposite</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">AlphaComposite</span><span class="token punctuation">.</span><span class="token constant">DST_OVER</span><span class="token punctuation">,</span> 不透明度<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>originImageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>newImageData<span class="token punctuation">,</span> <span class="token string">"jpg"</span><span class="token punctuation">,</span> 本地文件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="java-端计算字体字号的文字宽和高度（单位-px）"><a href="#java-端计算字体字号的文字宽和高度（单位-px）" class="headerlink" title="java 端计算字体字号的文字宽和高度（单位 px）"></a>java 端计算字体字号的文字宽和高度（单位 px）</h4><p>借由文字转图片计算文字写入 word 后应有的宽度和高度。当然，如果设置了最大宽度，只能一个字一个字加上超过最大宽度再回车换行，n 行计算 <code>高度 = n * line-height</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> maxLineWidth <span class="token operator">=</span> 最大行宽度<span class="token punctuation">;</span><span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>maxLineWidth<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">.</span><span class="token constant">TYPE_INT_ARGB</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Graphics2D</span> graphics <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>graphics<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span>字体<span class="token punctuation">,</span> <span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token constant">PLAIN</span><span class="token punctuation">,</span> 字号<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FontMetrics</span> fontMetrics <span class="token operator">=</span> graphics<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> 文本<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">int</span> currentWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> realLineMaxWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> word <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wordWidth <span class="token operator">=</span> fontMetrics<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentWidth <span class="token operator">+</span> wordWidth <span class="token operator">&gt;</span> lineMaxWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lines<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>文本<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> i<span class="token punctuation">;</span>        realLineMaxWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>realLineMaxWidth<span class="token punctuation">,</span> currentWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>        currentWidth <span class="token operator">=</span> wordWith<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        currentWidth <span class="token operator">+=</span> wordWidth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>realLineMaxWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>realLineMaxWidth<span class="token punctuation">,</span> currentWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   lines<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> lineHeight <span class="token operator">=</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> totalHeight <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> lineHeight<span class="token punctuation">;</span><span class="token keyword">int</span> lineWidth <span class="token operator">=</span> realLineMaxWidth<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="aspose-word"><a href="#aspose-word" class="headerlink" title="aspose.word"></a>aspose.word</h3><h4 id="找到-word-每页页首并跳转"><a href="#找到-word-每页页首并跳转" class="headerlink" title="找到 word 每页页首并跳转"></a>找到 word 每页页首并跳转</h4><p>aspose.word 没有能够直接跳转到页首的办法，所以只能从段落集合中找出每页的首段并跳转。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// fileInputStream word的输入流</span><span class="token class-name">Document</span> document <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DocumentBuilder</span> docBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DocumentBuilder</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">NodeCollection</span> paragraphs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token class-name">NodeType</span><span class="token punctuation">.</span><span class="token constant">PARAGRAPH</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LayoutCollector</span> layoutCollector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LayoutCollector</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> pageNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Paragraph</span> paragraph <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Paragraph</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> paragraphs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>paragraph<span class="token punctuation">.</span><span class="token function">getParentNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">NodeType</span><span class="token punctuation">.</span><span class="token constant">BODY</span> <span class="token operator">||</span> pageNum <span class="token operator">==</span> layoutCollector<span class="token punctuation">.</span><span class="token function">getStartPageIndex</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pageNum <span class="token operator">=</span> layoutCollector<span class="token punctuation">.</span><span class="token function">getStartPageIndex</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">;</span>    docBuilder<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>paragraph<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文本伪水印效果"><a href="#文本伪水印效果" class="headerlink" title="文本伪水印效果"></a>文本伪水印效果</h4><p>使用文本框搭配透明度、旋转角度并设置文本框悬浮在文字之下，来伪装成水印效果。<font color="red">其中，注意各种间距的设置以及文本对齐方式。</font></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Shape</span> textBoxShape <span class="token operator">=</span> docBuilder<span class="token punctuation">.</span><span class="token function">insertShape</span><span class="token punctuation">(</span><span class="token class-name">ShapeType</span><span class="token punctuation">.</span><span class="token constant">TEXT_BOX</span><span class="token punctuation">,</span> 宽度pt<span class="token punctuation">,</span> 高度pt<span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setBehindText</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setRelativeVerticalPosition</span><span class="token punctuation">(</span><span class="token class-name">RelativeVerticalPosition</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setRelativeHorizontalPosition</span><span class="token punctuation">(</span><span class="token class-name">RelativeHorizontalPosition</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>x偏移pt<span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setTop</span><span class="token punctuation">(</span>y偏移pt<span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setWrapType</span><span class="token punctuation">(</span><span class="token class-name">WrapType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setStroked</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setZOrder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransparency</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TextBox</span> textBox <span class="token operator">=</span> textBoxShape<span class="token punctuation">.</span><span class="token function">getTextBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox<span class="token punctuation">.</span><span class="token function">setTextBoxWrapMode</span><span class="token punctuation">(</span><span class="token class-name">TextBoxWrapMode</span><span class="token punctuation">.</span><span class="token constant">SQUARE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox<span class="token punctuation">.</span><span class="token function">setInternalMarginBottom</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox<span class="token punctuation">.</span><span class="token function">setInternalMarginLeft</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox<span class="token punctuation">.</span><span class="token function">setInternalMarginRight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox<span class="token punctuation">.</span><span class="token function">setTextBoxWrapMode</span><span class="token punctuation">(</span><span class="token class-name">TextBoxWrapMode</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>textBox<span class="token punctuation">.</span><span class="token function">setInternalMarginTop</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Paragraph</span> lastParagraph <span class="token operator">=</span> textBoxShape<span class="token punctuation">.</span><span class="token function">getLastParagraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>docBuilder<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>lastParagraph<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ParagraphFormat</span> paragraphFormat <span class="token operator">=</span> lastParagraph<span class="token punctuation">.</span><span class="token function">getParagraphFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setCharacterUnitFirstLineIndent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setCharacterUnitLeftIndent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setCharacterUnitRightIndent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setLineUnitAfter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span><span class="token class-name">ParagraphAlignment</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setLineUnitBefore</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setLineSpacing</span><span class="token punctuation">(</span>固定行距为字号pt<span class="token punctuation">)</span><span class="token punctuation">;</span>paragraphFormat<span class="token punctuation">.</span><span class="token function">setLineSpacingRule</span><span class="token punctuation">(</span><span class="token class-name">LineSpacingRule</span><span class="token punctuation">.</span><span class="token constant">EXACTLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>docBuilder<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span>字号pt<span class="token punctuation">)</span><span class="token punctuation">;</span>docBuilder<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>文字颜色<span class="token punctuation">)</span><span class="token punctuation">;</span>docBuilder<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOpacity</span><span class="token punctuation">(</span>文字透明度<span class="token punctuation">)</span><span class="token punctuation">;</span>docBuilder<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>文本<span class="token punctuation">)</span><span class="token punctuation">;</span>textBoxShape<span class="token punctuation">.</span><span class="token function">setRotation</span><span class="token punctuation">(</span>角度<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图片伪水印效果"><a href="#图片伪水印效果" class="headerlink" title="图片伪水印效果"></a>图片伪水印效果</h4><p>使用图片框搭配透明度、旋转角度并设置文本框悬浮在文字之下，来伪装成水印效果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedImage</span> imageData <span class="token operator">=</span> 透明图片资源<span class="token punctuation">;</span><span class="token class-name">Shape</span> shapBox <span class="token operator">=</span> docBuilder<span class="token punctuation">.</span><span class="token function">insertImage</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> <span class="token class-name">RelativeHorizontalPosition</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">,</span> x偏移pt<span class="token punctuation">,</span>                    <span class="token class-name">RelativeVerticalPosition</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">,</span> y偏移pt<span class="token punctuation">,</span> 宽度pt<span class="token punctuation">,</span> 高度pt<span class="token punctuation">,</span> <span class="token class-name">WrapType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shapBox<span class="token punctuation">.</span><span class="token function">setBehindText</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shapBox<span class="token punctuation">.</span><span class="token function">setZOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shapBox<span class="token punctuation">.</span><span class="token function">getFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransparency</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>shapBox<span class="token punctuation">.</span><span class="token function">setRotation</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAngle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aspose </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 在 python2.x 基础上安装 python3.x</title>
      <link href="/2024/11/23/linux-zai-python2-x-ji-chu-shang-an-zhuang-python3-x/"/>
      <url>/2024/11/23/linux-zai-python2-x-ji-chu-shang-an-zhuang-python3-x/</url>
      
        <content type="html"><![CDATA[<p>这种文其实可以不写，浏览器中一大把，但也确实很多都不太对。这里说的安装 python3.x 使用 pyenv 进行管理，这样可以很好的管理所需的 python 3.x 各种版本。</p><p>我经历了比较多的问题，我会每步都记录，如果你这种问题就跳过。</p><h3 id="yum-修改阿里仓库源"><a href="#yum-修改阿里仓库源" class="headerlink" title="yum 修改阿里仓库源"></a>yum 修改阿里仓库源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份当前的 yum 配置</span><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-ar</span> /etc/yum.repos.d /etc/yum.repos.d.bak<span class="token comment"># 删除原有的 repos 文件</span><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /etc/yum.repos.d/*.repo<span class="token comment"># 下载阿里云的 CentOS YUM 源配置</span><span class="token comment"># 根据你的 CentOS 版本选择下面的命令执行</span><span class="token comment"># CentOS 7</span><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span class="token comment"># CentOS 8</span><span class="token function">sudo</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo<span class="token comment"># 清除缓存并生成新的缓存</span><span class="token function">sudo</span> yum clean all<span class="token function">sudo</span> yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-pyenv"><a href="#安装-pyenv" class="headerlink" title="安装 pyenv"></a>安装 pyenv</h3><p>pyenv 需要基于 github 上的仓库，所以前期需要安装 git 并设置 token 访问。安装 git 直接 yum 安装就行。这里会单独说明设置 token 访问。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper store<span class="token function">git</span> clone https://<span class="token variable">${token}</span>@<span class="token variable">${repo_url}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就是保存 token 验证信息后，再安装 pyenv。通过命令 <code>curl https://pyenv.run | bash</code>。并在 <code>~/.bashrc</code> 增加配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYENV_ROOT</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.pyenv"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PYENV_ROOT</span>/bin:<span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PYENV_ROOT</span>/shims:<span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-python3-x"><a href="#安装-python3-x" class="headerlink" title="安装 python3.x"></a>安装 python3.x</h3><p>使用命令 <code>pyenv install 3.11.10</code> 结果卡住在包下载上，只能手动下载 python 安装包，放到 <code>~/.pip/cache</code> 之后再执行 <code>pyenv install 3.11.10</code> 命令。</p><p>安装后会出现 <code>ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib</code> 的问题，这里耗费的时间最长，百度的都不对。<strong>最终还是得看官网说明的解决方案。</strong></p><h4 id="openssl-安装"><a href="#openssl-安装" class="headerlink" title="openssl 安装"></a>openssl 安装</h4><p>确定在 1.0.2 版本以上，我这里选的是 1.1.1 版本。先下载 openssl 的源码 <a href="https://openssl-library.org/source/old/1.1.1/index.html">1.1.1 | Library</a>，完成手动安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./config <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/openssl_1_1 no-zlib<span class="token function">make</span> <span class="token operator">&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/openssl_1_1/include/openssl /usr/include/openssl<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/openssl_1_1/lib/libssl.so.1.1 /usr/local/lib64/libssl.so<span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/openssl_1_1/bin/openssl /usr/bin/openssl<span class="token builtin class-name">echo</span> <span class="token string">"/usr/local/openssl_1_1/lib"</span> <span class="token operator">&gt;&gt;</span> /etc/ld.so.confldconfig <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>openssl version -d</code> 命令确定安装路径，使用一下命令安装 安装 python3.x，命令是结合 linux 版本和要安装后的 python 版本以及尝试后的结果。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/usr/lib64/openssl"</span> <span class="token punctuation">\</span><span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/usr/include/openssl"</span> <span class="token punctuation">\</span><span class="token assign-left variable">CONFIGURE_OPTS</span><span class="token operator">=</span><span class="token string">"--with-openssl=&lt;openssl install prefix&gt; --with-openssl-rpath=auto"</span> <span class="token punctuation">\</span>pyenv <span class="token function">install</span> <span class="token parameter variable">-v</span> <span class="token number">3.11</span>.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考附件"><a href="#参考附件" class="headerlink" title="参考附件"></a>参考附件</h3><ul><li><p><a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems#error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib">error-the-python-ssl-extension-was-not-compiled-missing-the-openssl-lib</a></p></li><li><p><a href="https://blog.csdn.net/2301_76933862/article/details/143360338">【linux】centos编译安装openssl1.1.1_centos安装openssl1.1.1-CSDN博客</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apple M1 编译 electron sqlite3</title>
      <link href="/2024/11/15/apple-m1-bian-yi-electron-sqlite3/"/>
      <url>/2024/11/15/apple-m1-bian-yi-electron-sqlite3/</url>
      
        <content type="html"><![CDATA[<p>使用 cnpm 安装的 sqlite3 会出现内核不匹配问题，报错信息如下：</p><pre class="line-numbers language-log" data-language="log"><code class="language-log">App threw an error during load<span class="token property">Error:</span> dlopen<span class="token operator">(</span><span class="token file-path string">/Users/liull/00_beluga/slient-printer-app/node_modules/.store/sqlite3@5.1.7/node_modules/sqlite3/build/Release/node_sqlite3.node</span><span class="token punctuation">,</span> <span class="token number">0x0001</span><span class="token operator">)</span><span class="token operator">:</span> <span class="token property">tried:</span> <span class="token string">'/Users/liull/00_beluga/slient-printer-app/node_modules/.store/sqlite3@5.1.7/node_modules/sqlite3/build/Release/node_sqlite3.node'</span> <span class="token operator">(</span>mach<span class="token operator">-</span>o file<span class="token punctuation">,</span> but is an incompatible architecture <span class="token operator">(</span>have <span class="token string">'x86_64'</span><span class="token punctuation">,</span> need <span class="token string">'arm64'</span><span class="token operator">)</span><span class="token operator">)</span><span class="token punctuation">,</span>  <span class="token string">'/System/Volumes/Preboot/Cryptexes/OS/Users/liull/00_beluga/slient-printer-app/node_modules/.store/sqlite3@5.1.7/node_modules/sqlite3/build/Release/node_sqlite3.node'</span> <span class="token operator">(</span>no such file<span class="token operator">)</span><span class="token punctuation">,</span>   <span class="token string">'/Users/liull/00_beluga/slient-printer-app/node_modules/.store/sqlite3@5.1.7/node_modules/sqlite3/build/Release/node_sqlite3.node'</span> <span class="token operator">(</span>mach<span class="token operator">-</span>o file<span class="token punctuation">,</span> but is an incompatible architecture <span class="token operator">(</span>have <span class="token string">'x86_64'</span><span class="token punctuation">,</span> need <span class="token string">'arm64'</span><span class="token operator">)</span><span class="token operator">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心就是下载的 sqlite3 内核是 x86_64 而 apple M1 的内核是 arm64。一种办法是从<a href="https://registry.npmmirror.com/binary.html?path=sqlite3/v5.1.7/">仓库</a> 找准下载替换本地对应 <code>node_modules/sqlite3/build/Release/node_sqlite3.node</code> 路径文件。一种办法是依据源码进行编译。</p><ol><li><p>需要全局安装 electron <code>cnpm install electron -g</code></p></li><li><p>需要全局安装 node-gyp <code>cnpm install node-gyp -g</code></p></li><li><p>下载 sqlite3 源码 <code>cnpm install sqlite3 --ignore-scripts</code>，其中 <code>--ignore-script</code> 是为了防止 sqlite3 自动执行编译</p></li><li><p>手动执行脚本进行编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> node_modules/sqlite3node-gyp rebuild <span class="token parameter variable">--target</span><span class="token operator">=</span>electron版本 <span class="token parameter variable">--arch</span><span class="token operator">=</span>arm64 --dist-url<span class="token operator">=</span>https://electronjs.org/headers --module-name<span class="token operator">=</span>node_sqlite3 <span class="token parameter variable">--module_path</span><span class="token operator">=</span><span class="token punctuation">..</span>/lib/binding/napi-v3-darwin-arm64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在项目中运行 <code>cnpm run dev</code> 运行项目后，正常启动</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> sqlite3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 如何添加 CA 证书</title>
      <link href="/2024/11/15/mac-ru-he-tian-jia-ca-zheng-shu/"/>
      <url>/2024/11/15/mac-ru-he-tian-jia-ca-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p>chrome 浏览器访问 https 都会需要验证证书，可以手动添加 CA 证书。Mac 手动添加 CA 证书是在 <code>实用工具 =&gt; 钥匙串访问.app</code> 中操作。而在 app 中，分为<strong>默认钥匙串 =&gt; 登录</strong>、<strong>默认钥匙串 =&gt; 本地项目</strong>、<strong>系统钥匙串 =&gt; 系统</strong>、<strong>系统钥匙串 =&gt; 系统根证书</strong>。</p><p><img src="/images/2024/mac-add-ca/1.png" alt="keys.jpg"></p><p>自签的 CA 证书，有且只能在 <strong>默认钥匙串 =&gt; 登录</strong> 或<strong>系统钥匙串 =&gt; 系统</strong> 两个分组上做 <strong>文件菜单 =&gt; 导入项目</strong> 进行导入。导入成功后在证书页签下查看新增的证书，并右键选择 <strong>显示简介</strong> 后信任处选择 <strong>始终信任</strong>。</p><p><img src="/images/2024/mac-add-ca/2.png" alt="final.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK 导入 (CA) SSL 认证-纯净版</title>
      <link href="/2024/11/15/jdk-dao-ru-ca-ssl-ren-zheng-chun-jing-ban/"/>
      <url>/2024/11/15/jdk-dao-ru-ca-ssl-ren-zheng-chun-jing-ban/</url>
      
        <content type="html"><![CDATA[<p>JDK 提供 keytool 是密钥和证书管理工具，可以生成证书、导入证书、生成密钥。可以给通过 java 运行程序 https 安全认证，当然不包含tomcat、jetty 容器，他们有自己证书配置。默认 keytool 密码库是 <code>$JAVA_HOME/jre/lib/security/cacerts</code>，如果自身有需要可以通过 <code>keytool -keystore filepath</code> 其中 filepath 可以是绝对路径，也可以仅是文件名，区别在于是在本文件夹下的密码库还是指定文件夹的密码库，<strong>这点很重要</strong>。</p><p>我是在 sonar-maven-plugin 使用时，因 sonar 是 https 注意到 JDK SSL 认证。期间碰到了一些问题，问题都是踩过的坑。</p><ul><li><p><code> sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</code></p><ul><li><font color="blue">没有指定密钥库或密钥库中没有有效的密钥</font></li></ul></li><li><p><code>java.security.UnrecoverableKeyException: Password verification failed</code></p><ul><li><font color="blue">指定的密钥库对应的密码不正确，当然对应的路径下可能不存在密钥库</font></li></ul></li><li><p><code>java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty</code></p><ul><li><font color="blue">对应的密码库路径不正确</font></li></ul></li></ul><h3 id="JDK-导入-CA-认证"><a href="#JDK-导入-CA-认证" class="headerlink" title="JDK 导入 CA 认证"></a>JDK 导入 CA 认证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">keytool <span class="token parameter variable">-importcert</span> <span class="token parameter variable">-keystore</span> <span class="token operator">&lt;</span>keystore-file-path<span class="token operator">&gt;</span> <span class="token parameter variable">-alias</span> <span class="token operator">&lt;</span>caAlias<span class="token operator">&gt;</span> <span class="token parameter variable">-file</span> <span class="token operator">&lt;</span>ca-file-path<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>keystore，指定密钥库路径。如果仅文件名，则默认在运行命令的目录创建密钥库。</p></li><li><p>alias，只是用来方便标记认证别名。</p></li><li><p>file，指向 ca 证书</p></li></ul><p>运行命令时，需要设置密码库的使用密码，<strong>这个千万不能忘记</strong>。运行命令后，会在 <code>keystore-file-path</code> 生成相应的密码库文件。可以使用 <code>keytool -list -v -keystore &lt;keystore-file-path&gt;</code> 查看导入证书明细。</p><h3 id="mvn-sonar-运行变量指定"><a href="#mvn-sonar-运行变量指定" class="headerlink" title="mvn sonar 运行变量指定"></a>mvn sonar 运行变量指定</h3><p><code>mvn clean compile sonar:sonar -Djavax.net.ssl.trustStore=&lt;keystore-file-path&gt; -Djavax.net.ssl.trustStorePassword=&lt;keystore-password&gt;</code></p><ul><li><p><code>javax.net.ssl.trustStore</code>，指向密码库的绝对路径</p></li><li><p><code>javax.net.ssl.trustStorePassword</code>，指向密码库的使用密码</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用篡改猴和 python 求（pa）梯子外文档和视频</title>
      <link href="/2024/10/25/shi-yong-cuan-gai-hou-he-python-qiu-pa-ti-zi-wai-wen-dang-he-shi-pin/"/>
      <url>/2024/10/25/shi-yong-cuan-gai-hou-he-python-qiu-pa-ti-zi-wai-wen-dang-he-shi-pin/</url>
      
        <content type="html"><![CDATA[<p>半年前，我受朋友委托请求帮忙 pa 国外网站学习资源。时间有点久，最近有空闲时间就来看看能不能搞。pa 这套资源，分析后有几个情况</p><ol><li><p>该网站是有 2FA 认证</p></li><li><p>PDF 是使用 chrome 内置程序展示，好在页面上提供了下载图标和链接</p></li><li><p>视频是使用 video 标签展示并支持播放，视频是 mp4，被分片为 ts 由 m3u8 记录分片列表</p></li></ol><p>其中，文档资源的下载链接需要通过网站登录验证，所以这类资源最好是通过浏览器下载。因为一般的绕不过 2FA 认证。视频资源的下载链接不需要通过网站登录验证，下载流量是直接打到网站提供的存储，这对爬虫来说是个福音。随后确定文档类资源使用篡改猴下载，视频类资源使用 python 下载。</p><h3 id="文档类资源下-pa-载-chong"><a href="#文档类资源下-pa-载-chong" class="headerlink" title="文档类资源下 (pa) 载 (chong)"></a>文档类资源下 (pa) 载 (chong)</h3><p><a href="https://www.tampermonkey.net/index.php?src=a&amp;locale=zh_CN#google_vignette">篡改猴 tampermonkey</a>，它允许用户自定义并<strong>增强您最喜爱的网页的功能</strong>。用户脚本是小型 JavaScript 程序，可用于向网页添加新功能或修改现有功能。使用 篡改猴，您可以轻松在任何网站上创建、管理和运行这些用户脚本。可以使用 blob 将视频类资源下载地址保存到本地</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> videoUrls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> videoBlob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>videoUrls<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'text/plain'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> videoLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>videoLink<span class="token punctuation">.</span>href <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>videoBlob<span class="token punctuation">)</span><span class="token punctuation">;</span>videoLink<span class="token punctuation">.</span>download<span class="token operator">=</span>course <span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>item<span class="token operator">+</span><span class="token string">'_video.txt'</span><span class="token punctuation">;</span>videoLink<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于文档下载 javascript 直接使用 <code>window.open(downloadUrl, '_blank')</code> 完成下载。需要在浏览器设置访问 PDF 时是直接下载，不是在 chrome 中打开 PDF 文件，访问 <code>chrome://settings/content/pdfDocuments</code> 可修改，记得重启浏览器。</p><h4 id="chrome-下载历史记录在哪里"><a href="#chrome-下载历史记录在哪里" class="headerlink" title="chrome 下载历史记录在哪里"></a>chrome 下载历史记录在哪里</h4><p>我本次的 pa 虫，需要按照页面进行文档分类，所以需要按照下载地址映射下载的文件，这需要 chrome 下载历史记录。而 chrome 下载历史记录，在 <code>${chrome_data_home}/History</code> 文件中，<code>${chrome_data_home}</code> 来自于 <code>chrome://version/</code> 的<strong>个人资料路径</strong>。History 文件是 sqlite 数据库文件。剩下的你懂的。</p><h3 id="视频类资源下-pa-载-chong"><a href="#视频类资源下-pa-载-chong" class="headerlink" title="视频类资源下 (pa) 载 (chong)"></a>视频类资源下 (pa) 载 (chong)</h3><p>python 视频下载代码比较多，而 ts 和 m3u8 文件下载完之后，需要使用 ffmpeg 完成视频的合并。ffmpeg 需要下载，编译后的 ffmpeg <a href="https://www.osxexperts.net/">下载地址</a>，自己编译<a href="https://ffmpeg.org/download.html">访问地址</a>。整个的下载代码如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> requests<span class="token keyword">import</span> shutil<span class="token keyword">import</span> subprocess<span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures<span class="token keyword">def</span> <span class="token function">download_mp4_part_file</span><span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> video_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    download_part_sfile<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> video_url<span class="token punctuation">)</span>    video_file_name <span class="token operator">=</span> video_url<span class="token punctuation">[</span>video_url<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    video_file_prefix <span class="token operator">=</span> video_url<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> video_url<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    video_file_path <span class="token operator">=</span> dir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> video_file_name    <span class="token keyword">if</span> video_file_name<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'m3u8'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>video_file_path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        ts_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'m3u8'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    download_mp4_part_file<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> video_file_prefix <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> line<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.ts'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    ts_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>video_file_prefix<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ts_list<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>                futures <span class="token operator">=</span> <span class="token punctuation">[</span>executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>download_part_sfile<span class="token punctuation">,</span> dir_path<span class="token punctuation">,</span> ts_url<span class="token punctuation">)</span> <span class="token keyword">for</span> ts_url <span class="token keyword">in</span> ts_list<span class="token punctuation">]</span>                <span class="token keyword">for</span> future <span class="token keyword">in</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>as_completed<span class="token punctuation">(</span>futures<span class="token punctuation">)</span><span class="token punctuation">:</span>                    result <span class="token operator">=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download_part_sfile</span><span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> video_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_file_name <span class="token operator">=</span> video_url<span class="token punctuation">[</span>video_url<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    video_file_path <span class="token operator">=</span> dir_path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> video_file_name    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>video_file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>video_file_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">download_file</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> module_video<span class="token punctuation">,</span> video_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    video_name <span class="token operator">=</span> module_video<span class="token punctuation">[</span>module_video<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    video_name <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>video_name<span class="token punctuation">)</span>    video_part_name <span class="token operator">=</span> video_name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> video_name<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    video_dir_path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> module_name <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> video_part_name    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>video_dir_path<span class="token operator">+</span><span class="token string">'.mp4'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>video_dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>video_dir_path<span class="token punctuation">,</span> <span class="token number">0o777</span><span class="token punctuation">)</span>    download_mp4_part_file<span class="token punctuation">(</span>video_dir_path<span class="token punctuation">,</span> video_url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        video_file_name <span class="token operator">=</span> video_url<span class="token punctuation">[</span>video_url<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ffmpeg'</span><span class="token punctuation">,</span> <span class="token string">'-i'</span><span class="token punctuation">,</span> video_dir_path<span class="token operator">+</span><span class="token string">'/'</span> <span class="token operator">+</span> video_file_name<span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">,</span> video_dir_path<span class="token operator">+</span><span class="token string">'.mp4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> exc<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>module_video <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> video_url <span class="token operator">+</span> <span class="token string">"合并视频失败"</span> <span class="token operator">+</span> exc<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>video_dir_path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> module_map<span class="token punctuation">,</span> videos<span class="token punctuation">,</span> video_map<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> module_key<span class="token punctuation">,</span> module_videos <span class="token keyword">in</span> videos<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        module_name <span class="token operator">=</span> module_map<span class="token punctuation">[</span>module_key<span class="token punctuation">]</span>        bilibili_videos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> module_video <span class="token keyword">in</span> module_videos<span class="token punctuation">:</span>            <span class="token keyword">if</span> module_video<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'bilibili'</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                bilibili_videos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>module_video<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                video_url <span class="token operator">=</span> video_map<span class="token punctuation">[</span>module_video<span class="token punctuation">]</span>                download_file<span class="token punctuation">(</span>path<span class="token punctuation">,</span> module_name<span class="token punctuation">,</span> module_video<span class="token punctuation">,</span> video_url<span class="token punctuation">)</span>        other_video_path <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> module_name <span class="token operator">+</span> <span class="token string">"/other_video_url.txt"</span>        other_video_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>other_video_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> bilibili_video <span class="token keyword">in</span> bilibili_videos<span class="token punctuation">:</span>            other_video_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bilibili_video<span class="token punctuation">)</span>            other_video_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        other_video_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li><a href="https://www.foxtonforensics.com/browser-history-examiner/chrome-history-location">chrome 用户目录文件解析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> python </tag>
            
            <tag> tampermonkey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF 合并大文件的 battle</title>
      <link href="/2024/10/10/pdf-he-bing-da-wen-jian-de-battle/"/>
      <url>/2024/10/10/pdf-he-bing-da-wen-jian-de-battle/</url>
      
        <content type="html"><![CDATA[<p>目前在市面上流通的 java PDF 操作组件有 <a href="https://pdfbox.apache.org/">PDFbox</a> 和 <a href="https://itextpdf.com/">itextPDF</a>，当然商用的不在我们讨论的范围内。其实， itextPDF 也是有商用版本，但好像免费版本也适合大多场景使用，其次也没别的什么免费组件共选择与比对。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="itextPDF"><a href="#itextPDF" class="headerlink" title="itextPDF"></a>itextPDF</h4><p>itextPDF 属于半免费半商业的选择。在官网上也明确告知什么组件是免费开源的什么组件是闭源，供你按需方便的选择。在 itext 8 产品组下，</p><ul><li><a href="https://itextpdf.com/en/products/itext-7/itext-7-core">iText&nbsp;Core</a>&nbsp;(开源)&nbsp;</li><li><a href="https://itextpdf.com/en/products/itext-7/pdfcalligraph">pdfCalligraph</a>&nbsp;(闭源)&nbsp;</li><li><a href="https://itextpdf.com/en/products/itext-7/pdfhtml">pdfHTML</a>*****&nbsp;(开源)&nbsp;</li><li><a href="https://itextpdf.com/en/products/itext-7/pdfocr" title="pdfOCR">pdfOCR</a>&nbsp;(开源)</li><li><a href="https://itextpdf.com/en/products/itext-7/pdfsweep">pdfSweep</a>&nbsp;(开源)&nbsp;</li><li><a href="https://itextpdf.com/en/products/itext-7/pdfxfa">pdfXFA</a>*****&nbsp;(闭源)&nbsp;</li><li><a href="https://itextpdf.com/en/products/itext-7/compress-pdf-pdfoptimizer">pdfOptimizer</a>&nbsp;(闭源)</li></ul><h4 id="PDFBox"><a href="#PDFBox" class="headerlink" title="PDFBox"></a>PDFBox</h4><p>PDFBox 是 apache 开源项目，PDF 可操作的基本上都支持，也是市面上被追捧的项目，项目比较活跃。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 声明，仅站在大文件合并过程的场景上分享选择过程，与使用小心得。</p></blockquote><h3 id="合并代码、耗时及性能情况"><a href="#合并代码、耗时及性能情况" class="headerlink" title="合并代码、耗时及性能情况"></a>合并代码、耗时及性能情况</h3><h4 id="itextPDF-8-0-5"><a href="#itextPDF-8-0-5" class="headerlink" title="itextPDF 8.0.5"></a>itextPDF 8.0.5</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> mergedFilePath <span class="token operator">=</span> <span class="token string">"/Users/liull/Downloads/merge/itext8_"</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">".pdf"</span><span class="token punctuation">;</span><span class="token class-name">String</span> mergeSourcePdfDir <span class="token operator">=</span> <span class="token string">"/Users/liull/Downloads/PDF文件"</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mergeSourcePdfDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> pdfFiles <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>file <span class="token operator">-&gt;</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> failedFileCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>mergedFilePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">PdfDocument</span> pdfWriterDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfDocument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PdfWriter</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token operator">:</span> pdfFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">PdfDocument</span> pdfReaderDoc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfDocument</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PdfReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> pdfReaderDoc<span class="token punctuation">.</span><span class="token function">getNumberOfPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                pdfReaderDoc<span class="token punctuation">.</span><span class="token function">copyPagesTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> pdfWriterDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>                pdfWriterDoc<span class="token punctuation">.</span><span class="token function">flushCopiedObjects</span><span class="token punctuation">(</span>pdfReaderDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                failedFileCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                pdfReaderDoc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    pdfWriterDoc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"merge cost "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms, files:"</span> <span class="token operator">+</span> pdfFiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", failed:"</span> <span class="token operator">+</span> failedFileCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>机器资源，内存 4GB CPU 8核（mac）</p><table><thead><tr><th>材料量</th><th>并发量</th><th>耗时情况</th><th>是否 OOM</th></tr></thead><tbody><tr><td>323 个材料<br>986.3 MB</td><td>1</td><td>12,139ms</td><td>否</td></tr><tr><td>323 个材料<br>986.3 MB</td><td>5</td><td>24,482ms</td><td>否</td></tr><tr><td>323 个材料<br>986.3 MB</td><td>10</td><td>52,162ms</td><td>否</td></tr><tr><td>323 个材料<br>986.3 MB</td><td>15</td><td>无</td><td>是</td></tr></tbody></table><p>以下是单线程的 JVM 情况</p><p><img src="/images/2024/PDFMerge/PDFMerge_itext8_1.png"></p><p>以下是 10 并发的 JVM 情况</p><p><img src="/images/2024/PDFMerge/PDFMerge_itext8_10.png"></p><p>每个材料在 copy 完成后, 通过 <code>pdfWriterDoc.flushCopiedObjects(pdfReaderDoc);</code> 刷到硬盘上。</p><h4 id="PDFBox-3-0-3"><a href="#PDFBox-3-0-3" class="headerlink" title="PDFBox 3.0.3"></a>PDFBox 3.0.3</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> mergeSourcePdfDir <span class="token operator">=</span> <span class="token string">"/Users/liull/Downloads/PDF文件"</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>mergeSourcePdfDir<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> pdfFiles <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>file <span class="token operator">-&gt;</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PDFMergerUtility</span> pdfMergerUtility  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDFMergerUtility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pdfMergerUtility<span class="token punctuation">.</span><span class="token function">setAcroFormMergeMode</span><span class="token punctuation">(</span><span class="token class-name">PDFMergerUtility<span class="token punctuation">.</span>AcroFormMergeMode</span><span class="token punctuation">.</span><span class="token constant">PDFBOX_LEGACY_MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pdfMergerUtility<span class="token punctuation">.</span><span class="token function">setDocumentMergeMode</span><span class="token punctuation">(</span><span class="token class-name">PDFMergerUtility<span class="token punctuation">.</span>DocumentMergeMode</span><span class="token punctuation">.</span><span class="token constant">OPTIMIZE_RESOURCES_MODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pdfMergerUtility<span class="token punctuation">.</span><span class="token function">setIgnoreAcroFormErrors</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pdfMergerUtility<span class="token punctuation">.</span><span class="token function">setDestinationFileName</span><span class="token punctuation">(</span><span class="token string">"/Users/liull/Downloads/merge/PDFBox_"</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">".pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> pdfFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pdfMergerUtility<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RandomAccessReadBufferedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">MemoryUsageSetting</span> memoryUsageSetting <span class="token operator">=</span> <span class="token class-name">MemoryUsageSetting</span><span class="token punctuation">.</span><span class="token function">setupMixed</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memoryUsageSetting<span class="token punctuation">.</span><span class="token function">setTempDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/liull/Downloads/merge/temp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                    MemoryUsageSetting memoryUsageSetting = MemoryUsageSetting.setupTempFileOnly();</span>pdfMergerUtility<span class="token punctuation">.</span><span class="token function">mergeDocuments</span><span class="token punctuation">(</span>memoryUsageSetting<span class="token punctuation">.</span>streamCache<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"merge cost "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>机器资源，内存 4GB CPU 8核（mac）</p><table><thead><tr><th>材料量</th><th>并发量</th><th>耗时情况</th><th>是否 OOM</th></tr></thead><tbody><tr><td>323 个材料<br>986.3 MB</td><td>1</td><td>30,899ms</td><td>否</td></tr><tr><td>323 个材料<br>986.3 MB</td><td>5</td><td>无</td><td>是</td></tr></tbody></table><p>以下是单线程的 JVM 情况</p><p><img src="/images/2024/PDFMerge/PDFMerge_pdfbox.png"></p><p><strong>就性能比较结果而言，itext8 优秀于 PDFBox 的表现。</strong></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的 nodejs 多版本管理工具 nvm</title>
      <link href="/2024/09/28/hao-yong-de-nodejs-duo-ban-ben-guan-li-gong-ju-nvm/"/>
      <url>/2024/09/28/hao-yong-de-nodejs-duo-ban-ben-guan-li-gong-ju-nvm/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/nvm-sh/nvm">nvm</a> 是一款能够在一台主机上通过命令切换 node 版本，适合于需要支持多个项目且项目之间需要不同版本的 nodejs。安装 nvm 后可以指定下载不同 node 版本，切换 node 版本也是一条命令的事情，简单好操作。</p><h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><p>使用 curl 命令 或 wget 命令安装，需要执行 <code>install.sh</code> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本运行的目的是将 nvm 资源路径设置为 <code>~/.nvm</code> 并且安装路径设置为环境变量。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h4><p>安装指定版本的 nodejs，如果只是输入大版本号则安装大版本号下的最新小版本的 nodejs.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接安装指定版本号的 nodejs</span>nvm <span class="token function">install</span> <span class="token number">12.22</span>.6<span class="token comment"># 直接安装指定大版本号下最新版本的 nodejs</span>nvm <span class="token function">install</span> <span class="token number">12</span><span class="token comment"># 直接安装 nodejs 发布的最新版本包</span>nvm <span class="token function">install</span> <span class="token function">node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应的卸载就是 install 换成 uninstall.</p><h4 id="切换使用-nodejs"><a href="#切换使用-nodejs" class="headerlink" title="切换使用 nodejs"></a>切换使用 nodejs</h4><p>切换使用指定版本的 nodejs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 代表使用本地安装的12大版本下最大版本的 nodejs</span>nvm use <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出本地可用的 nodejs 版本号</span>nvm <span class="token function">ls</span><span class="token comment"># 查看 nodejs 版本的安装路径</span>nvm <span class="token function">which</span> v20.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>剩余其他包含指定镜像仓库等直接在 <code>github</code> 上找。ÍÍ</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟列表基本实现</title>
      <link href="/2024/07/22/xu-ni-lie-biao-ji-ben-shi-xian/"/>
      <url>/2024/07/22/xu-ni-lie-biao-ji-ben-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟列表基本实现"><a href="#虚拟列表基本实现" class="headerlink" title="虚拟列表基本实现"></a>虚拟列表基本实现</h2><p>虚拟列表的实现，重点是实现“假装”滚动条用以计算滚动到的位置对应列表匹配的高度，装载对应高度的单页元素列表。简单来说，滑动滚动条切换元素列表。</p><p>列表元素总高度(topHeight) = (单元素高度 * 列表数量)，滚动条本身高度 = (div高度)^2/topHeight。监听两类事件，一类事件是鼠标滚动事件（适合局部短滚动），一类事件是鼠标按下和释放事件（适合大段长滚动）。滚动后 start 元素的高度 = 滚动后的top * topHeight / div 高度，start元素索引位为 (start元素高度/单元素高度 -1) 向下取整。滚动后 end 元素的高度 = ((start 元素索引位 + 1) * 单元素高度 + div 高度），end 元素索引位为（end元素高度/单元素高度 - 1) 向下取整。当然，如果 topHeight &lt; divHeight 那就没有必要出现滚动条。还有就是调整窗口大小其实也需要重绘滚动条本身高度及单页元素列表。</p><h3 id="初级实现步骤"><a href="#初级实现步骤" class="headerlink" title="初级实现步骤"></a>初级实现步骤</h3><h4 id="滚动条部分"><a href="#滚动条部分" class="headerlink" title="滚动条部分"></a>滚动条部分</h4><h5 id="vue-模板代码"><a href="#vue-模板代码" class="headerlink" title="vue 模板代码"></a>vue 模板代码</h5><p>pageHeight，当前 div 高度。 topHeight，需要将滚动条块进行移动的高度距离。barHeight，滚动条块自身的高度。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scroll<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scroll<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-flex scroller border<span class="token punctuation">"</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{'height': pageHeight + 'px'}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scroller bar<span class="token punctuation">"</span></span>         <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{'height': barHeight +'px', 'transform': 'translateY(' + topHeight + 'px)'}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="css-代码"><a href="#css-代码" class="headerlink" title="css 代码"></a>css 代码</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.scroller</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.bar</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0 1px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>141<span class="token punctuation">,</span> 152<span class="token punctuation">,</span> 164<span class="token punctuation">,</span> 0.75<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.bar:hover</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>141<span class="token punctuation">,</span> 152<span class="token punctuation">,</span> 164<span class="token punctuation">,</span> 1.25<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="javascript-代码"><a href="#javascript-代码" class="headerlink" title="javascript 代码"></a>javascript 代码</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">totalHeight</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">1000</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">pageHeight</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">1000</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">topHeight</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">barHeight</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">isDragging</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token literal-property property">startY</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">startTop</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcBarHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'wheel'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wheelScroll</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> clientY <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>        <span class="token keyword">const</span> top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>        <span class="token keyword">let</span> topHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clientY <span class="token operator">&gt;</span> top<span class="token punctuation">)</span> <span class="token punctuation">{</span>          topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>clientY <span class="token operator">&lt;</span> top<span class="token punctuation">)</span> <span class="token punctuation">{</span>          topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>topHeight <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>topHeight <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> topHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noticeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>isDragging <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">startY:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>startY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">down:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>clientY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>startY <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>startTop <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight<span class="token punctuation">;</span>         event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isDragging<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> distinctY <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startTop <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startY <span class="token operator">-</span> event<span class="token punctuation">.</span>clientY<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)offset:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>offsetTop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">move:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distinctY<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token keyword">const</span> topHeight <span class="token operator">=</span> distinctY<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>topHeight <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>topHeight <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> topHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noticeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isDragging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>bar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseleave'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isDragging <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">calcBarHeight</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">noticeScroll</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> itemStartHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight<span class="token punctuation">;</span>      <span class="token keyword">const</span> itemEndHeight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> itemStartHeight<span class="token punctuation">,</span> itemEndHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">refreshScroll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcBarHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noticeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">wheelScroll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight<span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>deltaY<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> latestTopHeight <span class="token operator">=</span> topHeight <span class="token operator">-</span> event<span class="token punctuation">.</span>deltaY<span class="token operator">/</span><span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>latestTopHeight <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>latestTopHeight <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> latestTopHeight<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noticeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">nextOrAbovePage</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">startHeight<span class="token punctuation">,</span> endHeight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startHeight <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>barHeight<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noticeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>endHeight <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">noticeScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表部分"><a href="#列表部分" class="headerlink" title="列表部分"></a>列表部分</h4><h5 id="vue-模板代码-1"><a href="#vue-模板代码-1" class="headerlink" title="vue 模板代码"></a>vue 模板代码</h5><p>items，是当前页需要展示的元素集合。activeItemId，是当前被选择的元素。totalHeight，是所有元素完全展开高度。pageHeight，是div#content 高度。scrollItem()，是依据滚动的 startIndex 和 endIndex 变化 items 集合。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-flex overflow-y-hidden w-100 h-100<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-group h-100 w-280<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{'list-group-item': true, 'list-group-item-action': true, 'active': item.id == activeItemId}<span class="token punctuation">"</span></span>       <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">@key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-flex w-auto justify-content-between<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mb-1 truncate<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item.filename}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scroller</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cScroller<span class="token punctuation">"</span></span> <span class="token attr-name">:total-height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>totalHeight<span class="token punctuation">"</span></span> <span class="token attr-name">:page-height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pageHeight<span class="token punctuation">"</span></span> <span class="token attr-name">@scroll</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scrollItem<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scroller</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="css-代码-1"><a href="#css-代码-1" class="headerlink" title="css 代码"></a>css 代码</h5><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.truncate</span> <span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.w-280</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 280px <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.list-group</span> <span class="token punctuation">{</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">--bs-list-group-active-bg</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--ev-c-purple-soft<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--bs-list-group-active-border-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--ev-c-purple-soft<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="javascript-代码-1"><a href="#javascript-代码-1" class="headerlink" title="javascript 代码"></a>javascript 代码</h5><p>如果其中 fileList 会变化，那就在 methods 里面 handleResize 方法变相完成刷新。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> scroller <span class="token keyword">from</span> <span class="token string">'../scroller/index.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>    scroller  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">itemHeight</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">50</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">activeItemId</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">totalHeight</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">pageHeight</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>content<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'wheel'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cScroller<span class="token punctuation">.</span><span class="token function">wheelScroll</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">refreshItems</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>totalHeight <span class="token operator">=</span> items<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemHeight<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>content<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateFiles'</span><span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cScroller<span class="token punctuation">.</span><span class="token function">refreshScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">handleResize</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>pageHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>content<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cScroller<span class="token punctuation">.</span><span class="token function">refreshScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">fileClick</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>activeItemId <span class="token operator">=</span> item<span class="token punctuation">.</span>id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'fileClick'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">partFiles</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">startIndex<span class="token punctuation">,</span> endIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> fileList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>getFiles<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">&gt;</span> fileList<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>endIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      startIndex <span class="token operator">=</span> startIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> startIndex<span class="token punctuation">;</span>      endIndex <span class="token operator">=</span> endIndex <span class="token operator">&gt;</span> fileList<span class="token punctuation">.</span>length <span class="token operator">?</span> fileList<span class="token punctuation">.</span>length <span class="token operator">:</span> endIndex<span class="token punctuation">;</span>      <span class="token keyword">return</span> fileList<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">scrollItem</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">startHeight<span class="token punctuation">,</span> endHeight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>startHeight <span class="token operator">==</span> endHeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> startIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>startHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> endIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>endHeight<span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>itemHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">partFiles</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>cScroller<span class="token punctuation">.</span><span class="token function">nextOrAbovePage</span><span class="token punctuation">(</span>startHeight<span class="token punctuation">,</span> endHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用-vue-state-进行数据共享"><a href="#使用-vue-state-进行数据共享" class="headerlink" title="使用 vue-state 进行数据共享"></a>使用 vue-state 进行数据共享</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// store/index.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">fileList</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">updateFiles</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> files <span class="token operator">=</span> state<span class="token punctuation">.</span>fileList<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        files<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> files<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      files<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>fileList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">getFiles</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>fileList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// store/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>createStore<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">import</span> fileStore <span class="token keyword">from</span> <span class="token string">'./fileStore'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>    fileStore  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端样式布局自适应小结</title>
      <link href="/2024/05/22/qian-duan-yang-shi-bu-ju-zi-gua-ying-xiao-jie/"/>
      <url>/2024/05/22/qian-duan-yang-shi-bu-ju-zi-gua-ying-xiao-jie/</url>
      
        <content type="html"><![CDATA[<p>一般用来搭建布局使用的块元素是 <code>div</code> ，但你可以使用内联元素（例如，<code>span</code> 等）通过设置 <code>display: inline-block</code> 将其改为内联-块元素用来搭建布局。同样块元素也能修改为内联-块元素用于做布局。块元素一般是一个元素占据一行，不论是否设置 width 都是占据一行。内联元素则是按照内容决定宽度。内联-块元素则可以按照设置的 width 调整元素在单行占宽情况。也就是一行可以放多个内联-块元素、内联元素，一行可以放一个块元素。</p><h3 id="两个元素（一个元素宽度固定，一个元素自适应）"><a href="#两个元素（一个元素宽度固定，一个元素自适应）" class="headerlink" title="两个元素（一个元素宽度固定，一个元素自适应）"></a>两个元素（一个元素宽度固定，一个元素自适应）</h3><pre class="line-numbers language-less" data-language="less"><code class="language-less">    <span class="token selector">.parent</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.parent2</span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span_fixed</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 37px<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span_flex2</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% <span class="token operator">-</span> 60px<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span_flex</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">,</span><span class="token property">--webkit-box-flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>fixed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_flex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>span_flexspan_flexspan_flexspan_flex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>fixed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_flex2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>span_flexspan_flexspan_flexspan_flexspan_flexspan_flexspan_flexspan_flexspan_flex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三个元素（一个元素宽度固定，一个元素宽度不固定，一个元素自适应）"><a href="#三个元素（一个元素宽度固定，一个元素宽度不固定，一个元素自适应）" class="headerlink" title="三个元素（一个元素宽度固定，一个元素宽度不固定，一个元素自适应）"></a>三个元素（一个元素宽度固定，一个元素宽度不固定，一个元素自适应）</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">span</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span_fixed</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 37px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.span_flex</span> <span class="token punctuation">{</span><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">,</span><span class="token property">--webkit-box-flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_fixed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>fixed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_active<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>span_activespan_active<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>span_flex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>span_flexspan_flexspan_flexspan_flex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF文件WEB端加速装载</title>
      <link href="/2024/05/22/pdf-wen-jian-web-duan-jia-su-zhuang-zai/"/>
      <url>/2024/05/22/pdf-wen-jian-web-duan-jia-su-zhuang-zai/</url>
      
        <content type="html"><![CDATA[<p>当出现大文件 pdf 装载时，pdf.js 使用分段下载和期望 pdf 是线性化 pdf 来达到尽可能快的加载 pdf 首页。对于小文件 pdf.js 则是等待 pdf 完整下载后再分析加载 pdf 首页。</p><p>但是，在项目运行过程中并没有看到 pdf.js 分段下载，不论 pdf 文件大小都需要等到下载完毕后 pdf.js 才开始渲染。<font color="red">这中间一定有什么误会。</font></p><p>因为对 pdf.js 并不熟悉，只能从 pdf 文件下载反向找逻辑，最终找出了问题所在，并盘一下 pdf.js 分段下载实现逻辑。</p><h3 id="线性化-PDF-基础知识"><a href="#线性化-PDF-基础知识" class="headerlink" title="线性化 PDF 基础知识"></a>线性化 PDF 基础知识</h3><p>线性化 PDF 主要聚焦于优化只读 PDF 文档的查看，线性化 PDF 最好是生成一次读取多次的场景。如果出现 PDF 内容变更，则需要重新构建线性化 PDF。而线性化 PDF 要求将第一页信息放在 PDF 前部位置，为了能让 WEB 端能快速加载第一页。其中，线性化 PDF 文档结构如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt; /Linearized 1 /L 136764335 /H [ 632 76194 ] /O 27610 /E 776091 /N 5500 /T 136598419 &gt;&gt;&lt;&lt; /Type /XRef /Filter /FlateDecode /Length 69 /W [ 1 3 1 ] /Index [ 27606 16 ]   /ID [&lt;6C3B266F4EDFA286BC2F2B6DF32B4233&gt;&lt;41432D38312D46432D35412D39342D46&gt;]    /Info 27603 0 R         /Root 27608 0 R         /Size 27622 /Prev 136598420   &gt;&gt;stream// PDF 其他文档结构内容....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>线性化 header</p><ul><li><p><code>/Linearized</code>，标记线性化 PDF</p></li><li><p><code>/L</code>，PDF 文件大小</p></li><li><p><code>/H</code>，Primary hint stream 的起始位置及长度</p></li><li><p><code>/O</code>，第一页的内容对象节点</p></li><li><p><code>/E</code>，第一页结束的 offset</p></li><li><p><code>/N</code>，PDF 总页数</p></li></ul></li><li><p>XRef Table，初始的 XRef 表，列出文件的开始对象，包括文档目录（TOC）、页对象和其他关键对象。</p></li><li><p>跟随 XRefTable 之后，包括第一页的数据和所有与第一页相关联的对象，如图像、字体和元数据。这些对象按顺序编号，以便快速加载第一页。</p></li></ul><h3 id="分段下载逻辑思路"><a href="#分段下载逻辑思路" class="headerlink" title="分段下载逻辑思路"></a>分段下载逻辑思路</h3><p>分段下载是需要和后端交互 n+1 次，其中 n 为 <code>材料大小/分片大小</code> 值。大致分段下载流转如图</p><p><img src="/./images/2024/pdf_web_view/pdf_1.png" alt="download_2.jpg"></p><p>第 1 次，要求后端响应响应状态（<code>HttpStatus:200</code>），提供 <code>response-headers</code> 包含 <code>Accept-Ranges:bytes</code>、<code>Content-Encoding:identity</code>、<code>Content-Length:xxxxxx</code>（文件大小），但也要提供文件字节流写入 <code>Response Stream</code> 中，否则会导致请求卡停在后端处理。</p><p>第 2 到 n 次，需要提供请求 header 包含 <code>Range:bytes=startIndex-endIndex</code>，响应 header 包含 <code>Content-Range:bytes startIndex-endIndex/文件长度</code>、<code>Content-Length: 当前分段需要的内容长度</code> 和对应当前分段的文件字节流。</p><p>但是，第 1 次响应已经写入字节流，也就是文件内容。也要求在分段下载时，如果出现分段下载需求时，<strong>需要将第 1 次请求终止不再接收后续字节</strong> ，转而发起 2+ 次 range 请求。</p><h3 id="pdf-js-分段下载代码"><a href="#pdf-js-分段下载代码" class="headerlink" title="pdf.js 分段下载代码"></a>pdf.js 分段下载代码</h3><p>第 1 次请求发起代码位置于 <code>pdf.worker.js</code> 的 <code>PDFNetworkStreamFullRequestReader</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PDFNetworkStreamFullRequestReader</span><span class="token punctuation">(</span><span class="token parameter">manager<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_manager <span class="token operator">=</span> manager<span class="token punctuation">;</span>  <span class="token keyword">var</span> source <span class="token operator">=</span> options<span class="token punctuation">.</span>source<span class="token punctuation">;</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">onHeadersReceived</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onHeadersReceived</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">onProgressiveData</span><span class="token operator">:</span> source<span class="token punctuation">.</span>disableStream <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onProgressiveData</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">onDone</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onDone</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">onError</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onError</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">onProgress</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_onProgress</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_url <span class="token operator">=</span> source<span class="token punctuation">.</span>url<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_fullRequestId <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">requestFull</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//....</span><span class="token punctuation">}</span><span class="token class-name">PDFNetworkStreamFullRequestReader</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function-variable function">_validateRangeRequestCapabilities</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">PDFNetworkStreamFullRequestReader_validateRangeRequestCapabilities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_disableRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> networkManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_manager<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>networkManager<span class="token punctuation">.</span>isHttp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> fullRequestXhrId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullRequestId<span class="token punctuation">;</span>    <span class="token keyword">var</span> fullRequestXhr <span class="token operator">=</span> networkManager<span class="token punctuation">.</span><span class="token function">getRequestXhr</span><span class="token punctuation">(</span>fullRequestXhrId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fullRequestXhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Accept-Ranges'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'bytes'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> contentEncoding <span class="token operator">=</span> fullRequestXhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Encoding'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'identity'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentEncoding <span class="token operator">!==</span> <span class="token string">'identity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> fullRequestXhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    length <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_contentLength <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rangeChunkSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">_onHeadersReceived</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">PDFNetworkStreamFullRequestReader_onHeadersReceived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_validateRangeRequestCapabilities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_isRangeSupported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> networkManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_manager<span class="token punctuation">;</span>    <span class="token keyword">var</span> fullRequestXhrId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullRequestId<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>networkManager<span class="token punctuation">.</span><span class="token function">isStreamingRequest</span><span class="token punctuation">(</span>fullRequestXhrId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_isStreamingSupported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isRangeSupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>      networkManager<span class="token punctuation">.</span><span class="token function">abortRequest</span><span class="token punctuation">(</span>fullRequestXhrId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_headersReceivedCapability<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分段请求发起代码位置 <code>pdf.worker.js</code> 的 <code>loadDocument</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadDocument</span><span class="token punctuation">(</span><span class="token parameter">recoveryMode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> loadDocumentCapability <span class="token operator">=</span> <span class="token function">createPromiseCapability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> <span class="token function-variable function">parseSuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">parseSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> numPagesPromise <span class="token operator">=</span> pdfManager<span class="token punctuation">.</span><span class="token function">ensureDoc</span><span class="token punctuation">(</span><span class="token string">'numPages'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> fingerprintPromise <span class="token operator">=</span> pdfManager<span class="token punctuation">.</span><span class="token function">ensureDoc</span><span class="token punctuation">(</span><span class="token string">'fingerprint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> encryptedPromise <span class="token operator">=</span> pdfManager<span class="token punctuation">.</span><span class="token function">ensureXRef</span><span class="token punctuation">(</span><span class="token string">'encrypt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>numPagesPromise<span class="token punctuation">,</span> fingerprintPromise<span class="token punctuation">,</span> encryptedPromise<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onDocReady</span><span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> doc <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token literal-property property">numPages</span><span class="token operator">:</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">fingerprint</span><span class="token operator">:</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">encrypted</span><span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span>results<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">info</span><span class="token operator">:</span> pdfManager<span class="token punctuation">.</span>_info          <span class="token punctuation">}</span><span class="token punctuation">;</span>          loadDocumentCapability<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> parseFailure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> <span class="token function-variable function">parseFailure</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">parseFailure</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loadDocumentCapability<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      pdfManager<span class="token punctuation">.</span><span class="token function">ensureDoc</span><span class="token punctuation">(</span><span class="token string">'checkHeader'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pdfManager<span class="token punctuation">.</span><span class="token function">ensureDoc</span><span class="token punctuation">(</span><span class="token string">'parseStartXRef'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          pdfManager<span class="token punctuation">.</span><span class="token function">ensureDoc</span><span class="token punctuation">(</span><span class="token string">'parse'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>recoveryMode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>parseSuccess<span class="token punctuation">,</span> parseFailure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> parseFailure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> parseFailure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> loadDocumentCapability<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>    <span class="token punctuation">}</span>Util<span class="token punctuation">.</span><span class="token function">inherit</span><span class="token punctuation">(</span>NetworkPdfManager<span class="token punctuation">,</span> BasePdfManager<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function-variable function">ensure</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">NetworkPdfManager_ensure</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> pdfManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">ensureHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> result<span class="token punctuation">;</span>            <span class="token keyword">var</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              result <span class="token operator">=</span> <span class="token function">value</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              result <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">MissingDataException</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pdfManager<span class="token punctuation">.</span>streamManager<span class="token punctuation">.</span><span class="token function">requestRange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>begin<span class="token punctuation">,</span> e<span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ensureHelper<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">ensureHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ChunkedStreamManager</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token function-variable function">sendRequest</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">ChunkedStreamManager_sendRequest</span><span class="token punctuation">(</span><span class="token parameter">begin<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> rangeReader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pdfNetworkStream<span class="token punctuation">.</span><span class="token function">getRangeReader</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rangeReader<span class="token punctuation">.</span>isStreamingSupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rangeReader<span class="token punctuation">.</span>onProgress <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onProgress</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          loaded <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> manager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> <span class="token function-variable function">readChunk</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chunk<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">var</span> data <span class="token operator">=</span> chunk<span class="token punctuation">.</span>value<span class="token punctuation">;</span>              chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              loaded <span class="token operator">+=</span> <span class="token function">arrayByteLength</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>rangeReader<span class="token punctuation">.</span>isStreamingSupported<span class="token punctuation">)</span> <span class="token punctuation">{</span>                manager<span class="token punctuation">.</span><span class="token function">onProgress</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">loaded</span><span class="token operator">:</span> loaded <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              rangeReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>readChunk<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">var</span> chunkData <span class="token operator">=</span> <span class="token function">arraysToBytes</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">;</span>            chunks <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>chunkData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        rangeReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>readChunk<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onReceiveData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">chunk</span><span class="token operator">:</span> data<span class="token punctuation">,</span>          <span class="token literal-property property">begin</span><span class="token operator">:</span> begin        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">_requestChunks</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">ChunkedStreamManager_requestChunks</span><span class="token punctuation">(</span><span class="token parameter">chunks</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> requestId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currRequestId<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> i<span class="token punctuation">,</span> ii<span class="token punctuation">;</span>      <span class="token keyword">var</span> chunksNeeded <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>chunksNeededByRequest<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> chunksNeeded<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ii <span class="token operator">=</span> chunks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ii<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">hasChunk</span><span class="token punctuation">(</span>chunks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          chunksNeeded<span class="token punctuation">[</span>chunks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmptyObj</span><span class="token punctuation">(</span>chunksNeeded<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> capability <span class="token operator">=</span> <span class="token function">createPromiseCapability</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>promisesByRequest<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> capability<span class="token punctuation">;</span>      <span class="token keyword">var</span> chunksToRequest <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> chunk <span class="token keyword">in</span> chunksNeeded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        chunk <span class="token operator">=</span> chunk <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>chunk <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestsByChunk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>requestsByChunk<span class="token punctuation">[</span>chunk<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          chunksToRequest<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestsByChunk<span class="token punctuation">[</span>chunk<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>chunksToRequest<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> capability<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> groupedChunksToRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">groupChunks</span><span class="token punctuation">(</span>chunksToRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> groupedChunksToRequest<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> groupedChunk <span class="token operator">=</span> groupedChunksToRequest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> begin <span class="token operator">=</span> groupedChunk<span class="token punctuation">.</span>beginChunk <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chunkSize<span class="token punctuation">;</span>        <span class="token keyword">var</span> end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>groupedChunk<span class="token punctuation">.</span>endChunk <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>chunkSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> capability<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function-variable function">requestRange</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">ChunkedStreamManager_requestRange</span><span class="token punctuation">(</span><span class="token parameter">begin<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      end <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> beginChunk <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeginChunk</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> endChunk <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEndChunk</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> chunk <span class="token operator">=</span> beginChunk<span class="token punctuation">;</span> chunk <span class="token operator">&lt;</span> endChunk<span class="token punctuation">;</span> <span class="token operator">++</span>chunk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_requestChunks</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pdf.js 在分析过程中可以依据分析过程按需请求分段，比如需要第 100 段，则可以在第二个请求里直接指定要第 100 段的字节流。这样适用于首页装载。</p><h3 id="后端实现分段下载问题代码"><a href="#后端实现分段下载问题代码" class="headerlink" title="后端实现分段下载问题代码"></a>后端实现分段下载问题代码</h3><p>后端代码主要问题是未在第一次请求响应中提供 <code>Content-Length</code> header 导致没有触发分段下载。前端判断代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">PDFNetworkStreamFullRequestReader</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function-variable function">_validateRangeRequestCapabilities</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">PDFNetworkStreamFullRequestReader_validateRangeRequestCapabilities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_disableRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> networkManager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_manager<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>networkManager<span class="token punctuation">.</span>isHttp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> fullRequestXhrId <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullRequestId<span class="token punctuation">;</span>    <span class="token keyword">var</span> fullRequestXhr <span class="token operator">=</span> networkManager<span class="token punctuation">.</span><span class="token function">getRequestXhr</span><span class="token punctuation">(</span>fullRequestXhrId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fullRequestXhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Accept-Ranges'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'bytes'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> contentEncoding <span class="token operator">=</span> fullRequestXhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Encoding'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'identity'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentEncoding <span class="token operator">!==</span> <span class="token string">'identity'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> fullRequestXhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    length <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInt</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_contentLength <span class="token operator">=</span> length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_rangeChunkSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>range 修改后代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setBufferSize</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_BUFFER_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_ALLOW_ORIGIN</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_ALLOW_CREDENTIALS</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_REQUEST_METHOD</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_EXPOSE_HEADERS</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCEPT_RANGES</span><span class="token punctuation">,</span>                    <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_RANGE</span><span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_DISPOSITION</span><span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_LENGTH</span><span class="token punctuation">,</span>                    <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">TRANSFER_ENCODING</span><span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_ENCODING</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置 Content-Type</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResponseContentType</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> fileStoreName<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 内容装载方式，是inline 或是直接下载</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setResponseAttachment</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token class-name">StringKit</span><span class="token punctuation">.</span><span class="token function">defaultIfBlank</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> fileStoreName<span class="token punctuation">)</span><span class="token punctuation">,</span>                    responseContentDisposition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringKit</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCEPT_RANGES</span><span class="token punctuation">,</span> <span class="token string">"bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  response<span class="token punctuation">.</span><span class="token function">setContentLengthLong</span><span class="token punctuation">(</span>文件长度<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> storageService<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copyLarge</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">flushBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 按range拷贝字节，需要设置header</span><span class="token comment">// 单个 range header</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">CONTENT_RANGE</span><span class="token punctuation">,</span>                    <span class="token string">"bytes "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>end <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_PARTIAL_CONTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 多个 range header，响应体中按range 区分起始与结束标识</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"multipart/byteranges; boundary=MULTIPART_BYTERANGES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">.</span><span class="token constant">SC_PARTIAL_CONTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--MULTIPART_BYTERANGES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Content-Range: bytes "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>start <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>end <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 填充 range 对应字节信息</span><span class="token comment">// End with multipart boundary.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--MULTIPART_BYTERANGES--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> PDF </tag>
            
            <tag> pdf.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 5w 个节点树性能优化</title>
      <link href="/2024/04/06/vue-5w-ge-jie-dian-shu-xing-neng-you-hua/"/>
      <url>/2024/04/06/vue-5w-ge-jie-dian-shu-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<p>近期工作中针对档案文件型树展示完成优化。优化目标为在<strong>秒级</strong>装载页面，并且操作不允许卡顿。而基本要求支撑<strong>万级</strong>文件的展示与操作。</p><p>在优化之前，页面装载 5w 材料量全部装载完毕大约在 1-2 min ，时间包含后端提供数据时间 20-30 s。页面滚动或基本操作则无限卡顿，甚至浏览器会卡死崩溃。</p><p>让我记录的初衷是跌宕起伏的优化过程，这次的优化让我挺佩服公司前端部分工程师能力。</p><h3 id="mosquito-问题分析"><a href="#mosquito-问题分析" class="headerlink" title=":mosquito: 问题分析"></a><span class="github-emoji"><span>🦟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f99f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题分析</h3><ol><li>后端提供 5w 数据量耗时 20-30 s</li><li>前端全部装载耗时 60-90 s</li><li>前端全部 html 节点 &gt; 5w 导致滚动后计算会出现渲染慢操作慢等问题</li></ol><h3 id="microscope-逐个击破"><a href="#microscope-逐个击破" class="headerlink" title=":microscope: 逐个击破"></a><span class="github-emoji"><span>🔬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 逐个击破</h3><h4 id="后端提供-5w-数量耗时-20-30-s"><a href="#后端提供-5w-数量耗时-20-30-s" class="headerlink" title="后端提供 5w 数量耗时 20-30 s"></a>后端提供 5w 数量耗时 20-30 s</h4><p>后端实现是，依据条件从数据库中装载 5w 材料 pojo 对象，然后遍历将 5w pojo 对象转换为 VO 对象。在遍历期间转换 VO 对象时需要因业务需要组装各种数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据查询位置</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SusongJuan</span><span class="token punctuation">&gt;</span></span> juans <span class="token operator">=</span> susongJuanMapper<span class="token punctuation">.</span><span class="token function">getJuans</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SusongCailiao</span><span class="token punctuation">&gt;</span></span> susongCailiaos <span class="token operator">=</span> ssdaMaterialMapper<span class="token punctuation">.</span><span class="token function">selectByJuanbhAndFyId</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getDabh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> juanbhs<span class="token punctuation">,</span> param<span class="token punctuation">.</span><span class="token function">getDassfy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SusongMulu</span><span class="token punctuation">&gt;</span></span> mulus <span class="token operator">=</span> susongMuluMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">SusongMulu</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dabh</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getDabh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fy</span><span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getDassfy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数据组装部分</span>ssdaMaterialTreeService<span class="token punctuation">.</span><span class="token function">buildSsdaCailiaoNode</span><span class="token punctuation">(</span>susongCailiaos<span class="token punctuation">,</span> mulus<span class="token punctuation">,</span> juans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ssdaMaterialTreeService.buildSsdaCailiaoNode 数据组装逻辑</span><span class="token keyword">return</span> susongCailiaos<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>cailiao <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">CailiaoVO</span> cailiaoVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CailiaoVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 属性复制及定制属性配置</span>    <span class="token keyword">return</span> cailiaoVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看着代码步骤是比较简洁。先试用 <a href="https://arthas.gitee.io/doc/trace.html#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">arthas trace</a> 分析各行代码执行情况，结果发现数据查询在 3-4 s，循环遍历耗时 25-27s。所以分为两步骤优化</p><p>首先数据查询部分优化 SQL，去掉 <code>juanbhs</code> 的 <code>in</code> 查询。并将 mybatis 对象类从 <code>SusongCailiao</code> 改为 <code>CailiaoVO</code>，避免了在循环遍历中的新对象资源申请耗时，和同属性拷贝耗时。最终数据查询部分优化后 1-1.5s。</p><p>循环遍历耗时 25-27s，相当于单对象转换耗时 500 ms，除了 CailiaoVO 同属性拷贝外，有两类属性设置，第一组装字符串、第二调用接口明确材料查阅 url。优化思路，线性改为并发，将 <code>stream()</code> 改为 <code>parallelStream()</code>，而至于排序问题在处理完转换之后再做业务排序。调用接口明确材料查阅 url（url 可能是直接请求打到存储服务器上）改为直接拼接后端服务器访问材料请求地址串，至于其他文件是否存在等判断不在此处做判断。最终循环遍历耗时 1-1.5s。</p><p>最终耗时从 60- 90s 降低到 2-3s，速度提升 20 倍。</p><h4 id="前端全部装载耗时-60-90s-且-前端全部-html-节点-gt-5w-（巨多）"><a href="#前端全部装载耗时-60-90s-且-前端全部-html-节点-gt-5w-（巨多）" class="headerlink" title="前端全部装载耗时 60-90s 且 前端全部 html 节点 > 5w （巨多）"></a>前端全部装载耗时 60-90s 且 前端全部 html 节点 &gt; 5w （巨多）</h4><p>前端绘制 5w 个 html 元素，一定是耗时长且卡的。前端同学找到了一种叫<a href="https://cloud.tencent.com/developer/article/2271375">虚拟列表</a>，相当于通过计算整颗树的高度，搭配固定数量的 li 元素，来绘制文件树。至此，本以为优化结束。结果耗时还是需要 60s 甚至更久。</p><p>前端材料页码计算耗时特别长，最终在 5w 文件节点返回给前端时，在遍历树所有节点时，包含目录和材料。计算材料页码后会向上计算各层级目录的页码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 总体说明，计算页码适合于树深度遍历.&lt;br&gt; * 非叶子节点有如下特征，node.children &gt; 0.&lt;br&gt; * 叶子节点有如下特征， node.children = 0.&lt;br&gt; * 深度遍历时，非叶子节点需要加入 calcPageNodes 缓存对象中，相当于等待各个节点计算完毕页码才计算本节点页码的临时停留位置.&lt;br&gt; * 当遍历为叶子结点时，每个叶子结点组装页码数据之后向父节点通告本节点组装结果，供父节点更新页码. */</span><span class="token comment">/** * 构造方法，按父计算页码节点和本树节点共同组成属性. * 1. 父计算页码节点 * 2. 本节点起始页码 * 3. 本节点结束页码 * 4. 本节点页码 * 5. 左侧树节点数据 * 6. 是否计入档案页码 * @param selfTreeNode 树节点本点 * @param pCalcPageNode 父计算页码节点 */</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CalcPageNode</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">selfTreeNode<span class="token punctuation">,</span> calcPageNodes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode <span class="token operator">=</span> calcPageNodes<span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>selfTreeNode<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenPageMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenLength <span class="token operator">=</span> selfTreeNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        selfTreeNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">subTreeNode</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>childrenPageMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>subTreeNode<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode <span class="token operator">=</span> selfTreeNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>calcDangPage <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token comment">// this.calcDangPage = selfTreeNode.details.calcDangPage || false;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>calcDangPage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">.</span>calcDangPage<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selfTreeNode<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">'CAILIAO'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>calcDangPage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>calcDangPage <span class="token operator">&amp;&amp;</span> selfTreeNode<span class="token punctuation">.</span>details<span class="token punctuation">.</span>calcDangPage<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selfTreeNode<span class="token punctuation">.</span>details<span class="token punctuation">.</span>muluType <span class="token operator">===</span> <span class="token string">'FEN_CE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">.</span>page <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">.</span>endPageNo <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">.</span>endPageNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenPageMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenPageMap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenLength <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>calcDangPage <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *  是否是叶子节点判断，只用依据 children 是不是空判断.     * @returns {boolean}     * @private     */</span>    <span class="token function">_isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childrenLength <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计算单叶子节点的页码，当让是档案认为需要计算的页码.     */</span>    <span class="token function">calcPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>calcDangPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// console.info('当前节点非叶子节点，等待子节点回调');</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'MULU'</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'JUAN'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'CAILIAO'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>details<span class="token punctuation">.</span>pages <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_buildPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">.</span><span class="token function">_pageNodeNotice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">不支持的树节点类型【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】节点编号【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 填充树节点 page 信息.     * @private     */</span>    <span class="token function">_buildPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'CAILIAO'</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'MULU'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>pageInfo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>pageInfo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> page <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenPageMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            page <span class="token operator">+=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">=</span> page<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'MULU'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>pageInfo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>startPageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>endPageNo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'JUAN'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>pageInfo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>page<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 页</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">_pageNodeNotice</span><span class="token punctuation">(</span><span class="token parameter">childPageNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>childrenPageMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>childPageNode<span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>id<span class="token punctuation">,</span> childPageNode<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_buildPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pPageNode<span class="token punctuation">.</span><span class="token function">_pageNodeNotice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PageNodes</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token parameter">calcPageNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNodes<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>calcPageNode<span class="token punctuation">.</span>treeNode<span class="token punctuation">.</span>id<span class="token punctuation">,</span> calcPageNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageNodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">pageNode</span> <span class="token operator">=&gt;</span> pageNode<span class="token punctuation">.</span><span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNodes<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pageNodes <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化完之后，页码计算耗时大约在 2- 3s 左右。也就是前端 + 后端总共耗时在 5-6s 左右。喝了会儿茶之后，发现页面崩溃了。我艹，怎么崩溃了，啥操作都没有。结果发现，刷新页面 5-6s 装载完成之后，chrome 前端内存占用为 2.5 GB，这有点诡异了，最大的材料节点请求响应大约是 4.6 MB，单页面 vue 大约内存在 100 MB 左右。所以就这些数据怎么就 2.5 GB 呢？因为内存占用太大，我去掉了页面基本所有内容，只剩下材料请求和结果响应部分。结果发现，每个材料节点被回收的话，材料数据自身被回收大约能到 14KB 左右，大小 14KB x 53576 = 732 MB。</p><p><img src="/images/2024/vue_5w_tree/vue2_1.png" alt="vue2-1.png"></p><p>基本上问题就在这里了，基本能确定的是，在 vue2 data 中定义的结构在赋值之后，会需要比原本对象更多的内存去管理属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 改造前内容</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token comment">// 材料数据</span>            <span class="token literal-property property">materialData</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改造后，是将 5w 的材料以缓存的形式，放在 windows 对象中，操作什么的都用缓存提供的数据完成装载、操作及刷新。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 材料树缓存. 与 window.fd 配合使用，ta 的初始化在树触发 ready 方法后方可做本材料树缓存. * 完整的属性结构，缩略图和树都用同一份树型数据. * 主要由两部分组成，一部分是目录树，一部分是材料列表，最终组装成档案树. */</span><span class="token keyword">class</span> <span class="token class-name">MaterialTreeData</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * treeData: 档案树&lt;br&gt;     * initLoadMulu: 是否初始化了目录，结合 initLoadCailiaos 一起做档案树初始化判断 &lt;br&gt;     * initLoadCailiaos: 是否初始化了材料，结合 initLoadMulu 一起做档案树初始化判断 &lt;br&gt;     */</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">daTree</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>treeData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thumbLastMuluData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initLoadMulu <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initLoadCailiaos <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>daTree <span class="token operator">=</span> daTree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 装载目录树.     * @param muluTreeData 数组结构，因为一个卷一个树根节点.     * @param refreshDaTree 是否直接刷新档案树     */</span>    <span class="token function">initMulus</span><span class="token punctuation">(</span><span class="token parameter">muluTreeData<span class="token punctuation">,</span> refreshDaTree <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>muluTreeData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initLoadMulu <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>refreshDaTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>daTree<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 注意，材料的初始化得在目录之后，不想做过多时间前后的兼容，所以请在调用的时候，先请求目录再请求材料.     * 装载材料列表.将材料列表装载进树里.     *     * @param cailiaoData 材料列表数据     * @param refreshDaTree 是否直接刷新档案树     */</span>    <span class="token function">initCailiaos</span><span class="token punctuation">(</span><span class="token parameter">cailiaoData<span class="token punctuation">,</span> refreshDaTree <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>initLoadMulu<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'材料列表初始化到档案树得在目录之后，不想做过多时间前后的兼容，所以请在调用的时候，先请求目录再请求材料'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cailiaoData <span class="token operator">||</span> <span class="token operator">!</span>cailiaoData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'材料列表为空，直接结束'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>initLoadCailiaos <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_composeCailiao2DaTree</span><span class="token punctuation">(</span>cailiaoData<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>thumbCailiaoData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initLoadCailiaos <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>refreshDaTree<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>daTree<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>daTree<span class="token punctuation">.</span><span class="token function">gUpdateCurrentDataList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getFirstLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 只提供需要的基础属性的树节点.     */</span>    <span class="token function">getSimpleJuanTreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> juans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">juan</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> simpleJuan <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token literal-property property">details</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>details<span class="token punctuation">,</span>                <span class="token literal-property property">id</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>id<span class="token punctuation">,</span>                <span class="token literal-property property">name</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                <span class="token literal-property property">order</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>order<span class="token punctuation">,</span>                <span class="token literal-property property">pageInfo</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>pageInfo<span class="token punctuation">,</span>                <span class="token literal-property property">pid</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>pid<span class="token punctuation">,</span>                <span class="token literal-property property">type</span><span class="token operator">:</span> juan<span class="token punctuation">.</span>type            <span class="token punctuation">}</span><span class="token punctuation">;</span>            juans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>simpleJuan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> juans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getThumbLastMuluData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>thumbLastMuluData<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getTreeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_getFirstLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeData <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> treeNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>treeNode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token operator">!</span>treeNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            treeNode <span class="token operator">=</span> treeNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> treeNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 组合档案树和材料列表，其中档案树得现有目录数据，前面 initCailiaos 已经有前置位判断.     * @param cailiaoData 材料列表数据     * @param muluTreeData 目录树     * @private     */</span>    <span class="token function">_composeCailiao2DaTree</span><span class="token punctuation">(</span><span class="token parameter">cailiaoData<span class="token punctuation">,</span> muluTreeData<span class="token punctuation">,</span> thumbCailiaoData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cailiaoData <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cailiaoData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> cailiaoByPidGroup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_group</span><span class="token punctuation">(</span>cailiaoData<span class="token punctuation">,</span> <span class="token parameter">cailiao</span> <span class="token operator">=&gt;</span> cailiao<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_composeCailiao2Mulus</span><span class="token punctuation">(</span>muluTreeData<span class="token punctuation">,</span> cailiaoByPidGroup<span class="token punctuation">,</span> thumbCailiaoData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 遍历树节点，往目录节点同级或下级添加材料节点.     *     * @param muluTreeNodes 目录集合     * @param cailiaoByPidGroup 分组     * @private     */</span>    <span class="token function">_composeCailiao2Mulus</span><span class="token punctuation">(</span><span class="token parameter">muluTreeNodes<span class="token punctuation">,</span> cailiaoByPidGroup<span class="token punctuation">,</span> thumbCailiaoData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> muluTreeNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> muluTreeNode <span class="token operator">=</span> muluTreeNodes<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>muluTreeNode<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> muluTreeNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_composeCailiao2Mulus</span><span class="token punctuation">(</span>muluTreeNode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> cailiaoByPidGroup<span class="token punctuation">,</span> thumbCailiaoData<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_composeCailiao2Mulu</span><span class="token punctuation">(</span>muluTreeNode<span class="token punctuation">,</span> cailiaoByPidGroup<span class="token punctuation">,</span> thumbCailiaoData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_composeCailiao2Mulu</span><span class="token punctuation">(</span>muluTreeNode<span class="token punctuation">,</span> cailiaoByPidGroup<span class="token punctuation">,</span> thumbCailiaoData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将归属本目录的材料添加到 children 中.     * @param muluTreeNode 目录节点     * @param cailiaoByPidGroup 分组     * @private     */</span>    <span class="token function">_composeCailiao2Mulu</span><span class="token punctuation">(</span><span class="token parameter">muluTreeNode<span class="token punctuation">,</span> cailiaoByPidGroup<span class="token punctuation">,</span> thumbCailiaoData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> cailiaos <span class="token operator">=</span> cailiaoByPidGroup<span class="token punctuation">[</span>muluTreeNode<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cailiaos<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> muluTreeNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'MULU'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">delete</span> cailiaoByPidGroup<span class="token punctuation">[</span>muluTreeNode<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>            muluTreeNode<span class="token punctuation">.</span>children <span class="token operator">=</span> muluTreeNode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            muluTreeNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>cailiaos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 因为目录下节点有材料和子目录，所以用这个参数装载只是材料节点.</span>            muluTreeNode<span class="token punctuation">.</span>cailiaoChildren <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            muluTreeNode<span class="token punctuation">.</span>cailiaoChildren<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>cailiaos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thumbLastMuluData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>muluTreeNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 分组，数组元素按照元素某个属性值做分组，返回结构为 Map&lt;Property, List&lt;Item&gt;&gt;     * @param array 数组     * @param keyFunc 属性获取函数     * @returns {*} Map&lt;Property, List&lt;Item&gt;&gt;     * @private     */</span>    <span class="token function">_group</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> keyFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">groups<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">keyFunc</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>groups<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                groups<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            groups<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> groups<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> materialTreeCache <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function-variable function">createMaterialTreeCache</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">daTree<span class="token punctuation">,</span> dabh</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>daTree <span class="token operator">||</span> <span class="token operator">!</span>dabh<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'创建材料树缓存时，档案树和档案编号都不可为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>globalTreeCacheObject<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            window<span class="token punctuation">.</span>globalTreeCacheObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 创建缓存对象</span>        window<span class="token punctuation">.</span>globalTreeCacheObject<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">materialTreeCache_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dabh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MaterialTreeData</span><span class="token punctuation">(</span>daTree<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">getMaterialTreeCache</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dabh</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dabh<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'获取材料树缓存时，档案编号不可为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>globalTreeCacheObject<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'获取材料树缓存时，全局树缓存对象不可为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> window<span class="token punctuation">.</span>globalTreeCacheObject<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">materialTreeCache_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dabh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">destoryMaterialTreeCache</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dabh</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dabh<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'销毁材料树缓存时，档案编号不可为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>globalTreeCacheObject<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'销毁材料树缓存时，全局树缓存对象不可为空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">delete</span> window<span class="token punctuation">.</span>globalTreeCacheObject<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">materialTreeCache_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dabh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重构后，前端内存占用稳定在 200-300 MB。</p><h3 id="fuelpump-总结"><a href="#fuelpump-总结" class="headerlink" title=":fuelpump: 总结"></a><span class="github-emoji"><span>⛽</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 总结</h3><ol><li><p>数据量大时，尽可能减少计算工作及接口调用。</p></li><li><p>善用算法，不要死板的完成计算。利用树的深度遍历，计算各个目录和材料页码范围。</p></li><li><p>学习到虚拟列表，对数据节点多的前端装载优化。</p></li><li><p>数据量大时，不要用 vue2 的 data 属性管理数据。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 虚拟列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法小白-B树、B+树和B*树</title>
      <link href="/2024/04/01/suan-fa-xiao-bai-b-shu-b-shu-he-b-shu/"/>
      <url>/2024/04/01/suan-fa-xiao-bai-b-shu-b-shu-he-b-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="算法篇-—-B-树-、-B-树-和-B-树"><a href="#算法篇-—-B-树-、-B-树-和-B-树" class="headerlink" title="算法篇 — B 树 、 B+ 树 和 B* 树"></a>算法篇 — B 树 、 B+ 树 和 B* 树</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>二叉树</strong>，只有一个根节点，每个树节点最多有两个子节点，允许有多层级节点。二叉树查找平均时间复杂度 <code>O(logn)</code>，但最坏查找次数依赖于二叉树的深度，最坏查找时间复杂度 <code>O(n)</code> 即所有节点偏向左或右。</p><p><strong>完全二叉树</strong>，所有叶子结点都出现在 K 或 K-1 层，而且从 1 到 k-1 层每层都是满节点数。最多只有 K 层不是满节点数，且非满节点的 K 层集中在左边。查找平均时间复杂度 <code>O(logn)</code> 、最坏查找时间复杂度 <code>O(logn)</code>。</p><p><strong>平衡二叉树</strong>，保证左右子树的高度之差不大于 1，并且子树也必须是一颗平衡二叉树。当添加或删除节点时需要通过旋转保持整个数的平衡。最终，插入、查找的时间复杂度 <code>O(logn)</code>。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><p>是一个平衡的多路查找树，平衡二叉树的变种。一个 m 阶的 B 树需要满足，(1) 树中每个节点至多有 m 个子树 (m&gt;2)。（2）每个非叶子节点（除根节点）最少有⌈m/2⌉ 个子节点，⌈m/2⌉ 表示向上取整。（3）如果根节点不是叶子节点，那么它至少有 2 个子节点。（4）有 K 个子结点的非叶子节点拥有 K-1 个键。（5）所有叶子结点都在同一层。（5）树节点上包含数据部分和子结点地址链接部分。</p><p>因为树节点上包含了关键字及数据，也就查询时间平均和最坏耗时 <code>O(logn)</code> 。但并不稳定，因为依据查询数据可能会使用更少次数就能查询到。这咋听之下是好事，但因为节点不止包含关键字还包含了数据，也就是一次磁盘 IO 读取可能只却出一个节点，但节点上可以包含的关键字数会有限制且较少，也就是磁盘 IO 读取次数会多。</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h3><p>B+ 树是 B 树的变种，B+ 树上非叶子节点不保存数据，只用来保存索引字段值。这样确保一个节点上能保存更多的索引字段值，让整颗树的高度相对于 B 树更低。因为叶子节点上是数据节点，也就是所有的搜索都会落到叶子节点上，所以搜索耗时保持 <code>O(logn)</code> 。而对于全数据遍历时，因为 B+ 树叶子节点有一个指针指向下一个节点，把所有叶子节点串在一起。B+ 树只需要遍历叶子结点链表，B 树需要复杂的中序遍历。</p><h3 id="B-树-2"><a href="#B-树-2" class="headerlink" title="B * 树"></a>B * 树</h3><p>B* 树是 B+ 树的变种。在 B+ 树的基础上在非根和非叶子节点再增加指向兄弟的指针。因为设置了兄弟的指针，所以在增加数据节点本树节点满时，B* 树会看兄弟节点是否有空位，有的话就会把数据节点加在兄弟节点上。兄弟节点也没有空间的话，则在原节点与兄弟节点之间增加新节点，并各复制1/3的数据到新节点，最后在父节点增加新节点的指针。而 B+ 树当一个节点满时，分配一个新的节点，并将原节点中1/2的数据复制到新节点，最后在父节点中增加新结点的指针；B+树的分裂只影响原节点和父节点，而不会影响兄弟节点。B* 树分配新接点的概率比 B+ 树要低，空间使用率更高。</p><blockquote><p>索引的离散型 <code>count(distinct column_name):count(*)</code> 比值越高，差别值占比越高，索引效率越高。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 查找 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 的垃圾回收器们</title>
      <link href="/2024/03/22/jvm-de-la-ji-hui-shou-qi-men/"/>
      <url>/2024/03/22/jvm-de-la-ji-hui-shou-qi-men/</url>
      
        <content type="html"><![CDATA[<h3 id="堆内存分配"><a href="#堆内存分配" class="headerlink" title="堆内存分配"></a>堆内存分配</h3><p>JVM 将堆内存划分为新生代、老年代和 metadata 空间。新生代被分为 eden 空间、Survivor From 空间、Survivor To 空间。垃圾回收基本是对 eden 空间、Survivor From 空间和老年代的内存回收。但是，不是每次垃圾回收都会触发老年代的内存回收，这个在 <a href="#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%BB%AC">垃圾回收器们</a> 会再次总结。</p><p><img src="/images/2024/jvm/JVM_1.png" alt="JVM_heap.png"></p><h3 id="回收对象"><a href="#回收对象" class="headerlink" title="回收对象"></a>回收对象</h3><p>当对象不再被引用时，此时对象被认为是<strong>垃圾对象</strong>，会在垃圾回收器运行时被回收。在 JVM 有强引用、弱引用、软引用和虚引用四种对象引用类型。其中，<strong>强引用</strong>，为最常见的引用类型，通过关键字 new 创建的对象默认是强引用。只要强引用指向一个对象就表示对象依旧活着。<strong>弱引用</strong>，将对象引用保存在弱引用对象中，如果垃圾回收器运行时，这个弱引用对象对垃圾回收器而言依旧会被回收。而弱引用使用场景，在没有强引用指向的对象时，在被 GC 前还能通过弱引用来获取对象，使用该对象并能再次用一个强引用指向它，不用重新运行逻辑装载对象。<strong>软引用</strong>，对象应用保存在软引用对象中，垃圾回收器运行时会判断堆内存是否充足。如果充足，垃圾回收器不会在当下回收被软引用对象指向的对象。如果不充足，垃圾回收器会立即回收被软引用对象指向的对象。<strong>虚引用</strong>，将对象引用保存在虚引用对象中，通过虚引用对象无法获取指向的对象，除非对象强引用未断连。如果垃圾回收器运行时，虚引用对象指向对象回收后，垃圾回收器会把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收，完成对象回收后的资源释放。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"test123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 弱引用</span><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> testWeakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>testWeakReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 软引用</span><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> testSoftReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>testSoftReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 虚引用</span><span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> referenceQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> testPhantomReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> referenceQueue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 虚引用通过队列 poll 判断 test 被回收.</span>referenceQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垃圾回收器算法"><a href="#垃圾回收器算法" class="headerlink" title="垃圾回收器算法"></a>垃圾回收器算法</h3><h4 id="标记-清理（Mark-Sweep"><a href="#标记-清理（Mark-Sweep" class="headerlink" title="标记-清理（Mark-Sweep)"></a>标记-清理（Mark-Sweep)</h4><p>首先，扫描整个空间通过对象可达性判断找到没有被引用的对象，标记这类对象需要清理。其次，扫描整个空间清理被标记的对象。缺点，直接清理标记对象，可能会照成内存空间碎片化。需要整个空间扫描两次。</p><p><img src="/images/2024/jvm/JVM_2.jpeg" alt="mark-sweep.jpg"></p><h4 id="复制（Copying）"><a href="#复制（Copying）" class="headerlink" title="复制（Copying）"></a>复制（Copying）</h4><p>将内存划分为两个大小相等的空间，保证每次仅有一个空间被使用。当被使用的空间快用完触发回收时，需要在当前空间扫描出活跃对象，将活跃对象拷贝到另一个未使用空间，清理使用空间（这时使用空间就会变成未被使用空间）。缺点，内存运行时被使用空间为 1/2。</p><p><img src="/images/2024/jvm/JVM_3.jpeg" alt="copying.jpg"></p><p>在 JVM 运行过程中，大部分对象是 “朝生夕死” 约占 98%。也就是说真正需要长期活着的对象占用少。也就说明这样的对半空间，不算浪费很多。其中，98% 对象在 eden 区域在内存划分中占大头默认比例为 80%。复制算法作用于 Survivor From 空间  和 Survivor To 空间，默认占用 10%。</p><h4 id="标记-整理（Mark-Compact）"><a href="#标记-整理（Mark-Compact）" class="headerlink" title="标记-整理（Mark-Compact）"></a>标记-整理（Mark-Compact）</h4><p>标记依旧是标记需要清理的对象。整理是将存货的对象向一端移动，然后将边界外的对象清理掉。这样没有内存碎片。与清理相比，整理后没有内存碎片。与拷贝相比，整理并没有划分出一半空闲空间。</p><p><img src="/images/2024/jvm/JVM_4.jpeg" alt="mark-compact.jpg"></p><h3 id="GC-术语"><a href="#GC-术语" class="headerlink" title="GC 术语"></a>GC 术语</h3><p>部分收集（Partial GC），目标不是完整收集整个 Java 堆的垃圾收集。其中，新生代收集（Minor GC/Young GC），目标只是新生代的垃圾收集。老年代收集（Major GC/Old GC），只是老年代的垃圾收集，目前只有 CMS 会有单独收集老年代的行为，另外请注意 Major GC 这个说法现在有点混淆，在不同资料上常有不同所指，读者需按上下文区分到底是指老年代的收集还是整堆收集。混合收集（Mixed GC），目标是收集整个新生代以及部分老年代的垃圾收集，目前只有 G1 s回收器会有这种行为。整堆收集（Full GC），收集整个 Java 堆的垃圾收集。</p><p>可以作为 GC Root 对象的有，虚拟机栈（栈帧中的本地变量表）中引用的对象、方法区中类静态属性引用的对象、方法区中常量引用的对象、本地方法栈中 JNI 引用的对象。</p><h3 id="垃圾回收器们"><a href="#垃圾回收器们" class="headerlink" title="垃圾回收器们"></a>垃圾回收器们</h3><p>以算法来说，分代回收是按照不同区域的特点，选用适合的垃圾回收算法和垃圾回收器，年轻代垃圾回收频繁追求响应时间短和程序终止时间短。分为年轻代回收器，Serial、ParNew、Parallel Scavenge、G1、ZGC。老年代回收器，SerialOld 、Parallel Old、CMS、G1。</p><h4 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h4><p>串行回收器，最古老、最简单的垃圾回收器。进行垃圾收集时只使用一个线程。使用的是标记复制算法。在标记和复制两个环节上，暂停所有应用线程（<code>stop-the-word</code>）。</p><h4 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h4><p>单线程串行老年代标记整理算法的垃圾回收。与 Serial 匹配的老年代垃圾回收器。如果老年代内存大，意味着垃圾回收耗时很长。</p><h4 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h4><p>使用标记复制算法及多线程进行年轻代垃圾回收。但与 ParNew 相比，它能达到一个可控的吞吐量。吞吐量 =  CPU 运行用户线程时间 / CPU 总时间。使用 <code>-XX:MaxGCPauseMillis</code> 最大垃圾收集停顿时间，<code>-XX:GCTimeRatio</code> 垃圾回收时间占总时间比例。如果设置时间变短，这意味着回收更加频繁，导致吞吐量降低。</p><h4 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h4><p>多线程并行老年代标记整理算法的垃圾回收，吞吐量优先的垃圾回收器。与 Parallel Scavenge 匹配的老年代垃圾回收器。使用 <code>-XX:UseParallelOldGC</code> 开启此垃圾回收器。</p><h4 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h4><p>使用标记复制算法及多线程进行年轻代垃圾回收。垃圾回收过程中，会暂停所有应用线程。<code>-XX:ParallelGCThreads</code> 设置垃圾回收器并行执行线程数，默认开启和 CPU 数据相同的线程数。</p><h4 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h4><p>CMS 采用标记清除算法，只会回收老年代空间。CMS 是一种预处理垃圾回收器，需要在老年代内存耗尽前完成垃圾回收，否则会导致并发回收失败，失败会退化为 SerialOld 垃圾回收器。因此 CMS 可设置 <code>-XX:CMSInitiatingOccupancyFraction</code> 确定开始垃圾回收启动阈值。<code>-XX:+UseConcMarkSweepGC</code> 启动 CMS 老年代垃圾回收。</p><p><strong>CMS 初始标记（STW）</strong>，标记老年代 GC Roots 直接引用对象，<code>-XX:+CMSParallelInitalMarkEnabled</code> 开启标记并行化，<code>-XX:ParallelGCThreads</code> 线程数不要超过 CPU 核数。</p><p><strong>CMS 并发标记</strong>，沿着初始标记的对象寻找存活对象，该阶段与应用程序并发运行。需要对并发标记过程中，对老年代对象引用关系发生变更，需要重新标记（会标记为 Dirty）。并发标记时，用不同颜色标记（三色标记法）老年代对象，黑色表示对象已经被扫描过且存活、灰色表示对象至少存在一个引用还没有被扫描过、白色表示对象没有被扫描过。</p><p><strong>并发预处理</strong>，并发预清理主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为Dirty 的 Card&nbsp;）。</p><p><strong>可终止预处理</strong>，可终止预处理阶段与并发预处理节点一样，主要是处理并发阶段因引用关系发生变更而未标记到的存活对象（即：扫描所有标记为 Dirty 的 Card&nbsp;）。但是可终止预处理是有条件触发的，触发条件由CMS的两个参数控制 <code>-CMSScheduleRemarkEdenSizeThreshold</code> 默认值 2M 和 <code>-CMSScheduleRemarkEdenPenetration</code> 默认值 50%，当 Eden 空间使用超过 2M 时，启动可终止预处理，当 Eden 空间使用率到达 50% 时中断，进入重新标记阶段。</p><p><strong>重新标记（STW）</strong>，主要是标记整个老年代的所有的存活对象，该阶段会扫描整个堆内存。扫描新生代的原因是因为老年代中的对象，如果被新生代中的对象引用，会被视为存活对象，即使新生代的对象已经不可达，也会使用这些不可达的对象当GC Root 来扫描老年代。重新标记阶段耗时较长，可以通过设置参数<code>-XX:+CMSScavengeBeforeRemark</code> 在重新标记前先执行一次 Minor GC，回收掉新生代中不可达对象，并将剩余对象转入幸存者区或晋升到老年代，这样在扫描新生代时，只需要扫描幸存者区对象即可，将大大减少扫描对象所需时长。</p><p>同时，可通过设置 <code>-CMSParallelRemarkEnabled</code> 开启并行重新标记，提高标记效率，减少重新标记处理时长。</p><p><strong>并发清除</strong>，主要是清除那些没有被标记的对象，回收内存空间。但过程中产生的垃圾只能在下次 GC 中处理。因为是清理方法产生的碎片，因变量 <code>-XX:UseCMSCompactAtFullCollection</code> 压缩开关， <code>-XX:CMSFullGCsBeforeCompaction</code> 决定经过多少次 FullGC 之后进行空间压缩。</p><p><strong>并发重置</strong>，主要是重置 CMS 数据结构，准备在下一个CMS生命周期中使用。</p><h4 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h4><p>G1 将 java 堆划分为多个大小相等的独立区域，JVM 建议将其分为 2048 个 Region，而 Region 大小为 堆大小/2048。G1 保留了年轻代和老年代概念，不再物理隔离，都是可以不连续 Region 集合。可以通过 <code>-XX:G1NewSizePercent</code> 设置新生代初始占比，通过 <code>-XX:G1MaxNewSizePercent</code> 设置新生代最大占比。一个 Region 可能之前是年轻代，如果 Region 进行了垃圾回收，之后可能又会变成老年代，也就是说Region的区域功能可能会动态变化。G1 有专门分配大对象的 Region 叫 <strong>Humongous 区</strong>（专门存放短期巨型对象不用直接进入老年代，可以节约老年代的空间，避免因为老年代空间不够的GC开销），大对象大小超过 150% Region 就会被放入 Humongous 区，如果一个对象太大会申请多个 Region，如果剩余 Region 不够对象空间，会触发一次 Full GC。Full GC 会收集年轻代、老年代和 Humongous 区。</p><p>G1 为每个分区各自分配一个 RSet（Remembered Set）它内部类似于一个反向指针，记录了其它&nbsp;Region 对当前&nbsp;Region 的引用情况。但因为如果引用源是本分区的对象，那么就不需要记录在 RSet 中、且同时 G1 每次 GC 时，所有的新生代都会被扫描，因此引用源是年轻代的对象，也不需要在 RSet 中记录，所以最终只需要记录老年代到新生代之间的引用即可。</p><p>Card，每个 Region 内部又被分成了若干个大小为512 Byte的 Card，标识堆内存最小可用粒度。分配的对象会占用物理上连续的若干个卡片。当查找对分区Region 内对象的引用时便可通过记录卡片来查找该引用对象。每个Region就有一个卡表来映射vRegion 中的卡页，整堆有个全局卡片表(<code>Global Card Table</code>) 存储所有Region的卡表情况。每一个Region的Card，都用一个 Byte 来记录是否修改过。卡表即这些byte的集合。实际上，如果把RS理解成一个概念模型，那么 Card Table 就可以说是 RSet 的一种实现方式。</p><p><img src="/images/2024/jvm/JVM_6.png" alt="G1.png"></p><p>垃圾回收过程，</p><ol><li>初始标记：标记 GC ROOT 能关联到的对象，需要STW</li><li>并发标记：从 GCRoots 的直接关联对象开始遍历整个对象图的过程，扫描完成后还会重新处理并发标记过程中产生变动的对象。使用三色标记法标记对象。</li><li>最终标记：短暂暂停用户线程，再处理一次，需要STW</li><li>复制回收：更新 Regio n的统计数据，对每个Region的回收价值和成本排序，根据用户设置的停顿时间制定回收计划。再把需要回收的 Region 中存活对象复制到空的Region，同时清理旧的Region。需要STW。</li></ol><p><strong>YongGC</strong> ，要么 eden 区放满，要么 G1 计算回收时间接近 <code>-XX:MaxGCPauseMills</code> 设置值会触发。G1会收集每个 Region 回收之后的空间大小、回收需要的时间。根据评估得到的价值，在后台维护一个优先级列表，然后基于我们设置的停顿时间优先回收<strong>价值收益最大</strong>的 Region。但 YongGC 的标记-复制是全过程 STW。</p><p><strong>MixedGC</strong>，老年代对占有率达到 <code>-XX:InitiatingHeapOccupancyPercent</code> 值触发，回收 Yong 和 部分Old（G1 优先队列的优先顺序）以及大对象区。主要使用复制算法，拷贝过程中发现没有足够的空 region 承载拷贝对象时触发 Full GC。</p><p><strong>FullGC</strong>，STW 采用单线程进行标记、清理和压缩整理。</p><p>G1 是 jdk9+ 的默认垃圾回收器。</p><h4 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h4><p>ZGC 是 jdk11 引入极低延迟的垃圾回收器，号称能处理 TB 级内存且停顿时间（STW）不超过 10ms，停顿时间不会随着堆大小或者活跃对象的大小而增加。ZGC 目前而言不分代。ZGC Region 分为三种容量，小型 Region 为 2MB 用于放置小于 256 KB 的小对象，中型 Region 为 32MB 放置大于等于 256KB 但小于 4MB 对象，大型 Region 容量不固定必须为 2MB 的整数倍放置 4MB 或以上的大对象且每个大型 Region 中只会存放一个大对象。</p><p>ZGC 在标记、转移和重定位阶段几乎都是并发的，这是 ZGC 实现停顿时间小于 10 ms 目标的最关键原因。ZGC 分为多个阶段，初始标记、并发标记、再标记、并发转移准备、初始转移、并发转移。可见只有 初始标记、再标记 和初始转移 会 STW。</p><p><img src="/images/2024/jvm/JVM_5.png" alt="ZGC.png"></p><p>ZGC 实现多个并发过程，是依据<strong>着色指针</strong> 实现，而且仅在 64 位操作系统上可用，将 64 位虚拟地址空间划分为 [0~4TB) 对应Java堆，[4TB ~ 8TB) 称为M0地址空间，[8TB ~ 12TB) 称为M1地址空间，[12TB ~ 16TB) 预留未使用，[16TB ~ 20TB) 称为Remapped空间。ZGC使用了内存多重映射（Multi-Mapping）将多个不同的虚拟内存地址映射到同一个物理内存地址上，这是一种多对一映射。</p><p><img src="/images/2024/jvm/jvm_7.png" alt="JVM_64bit.png"></p><p>初始标记和初始转移分别都只需要扫描所有GC Roots，其处理时间和GC Roots的数量成正比，一般情况耗时非常短。再标记阶段 STW 时间很短，最多1ms，超过1ms则再次进入并发标记阶段。即，ZGC 几乎所有暂停都只依赖于 GC Roots 集合大小，停顿时间不会随着堆的大小或者活跃对象的大小而增加。与ZGC对比，G1的转移阶段完全 STW，且停顿时间随存活对象的大小增加而增加。</p><p>从堆中读取对象，且对象中属性指向的对象，会加入读屏障。如果这时候对象在 GC 时被移动了，接下来 JVM 就会加上一个读屏障，这个屏障会把读出的指针更新到对象的新地址上，并且把堆里的这个指针“修正”到原本的字段里。这样就算 GC 把对象移动了，读屏障也会发现并修正指针，于是应用代码就永远都会持有更新后的有效指针，而且不需要 STW。</p><p>垃圾回收过程：</p><ol><li><p><strong>初始化</strong>：ZGC 初始化之后，整个内存空间的地址视图被设置为 Remapped，标记是在染色指针上。程序正常运行，在内存中分配对象，满足一定条件后垃圾回收启动，此时进入标记阶段。</p></li><li><p><strong>并发标记阶段</strong>：第一次进入标记阶段时视图为 M0，如果对象被GC标记线程或者应用线程访问过，那么就将对象的地址视图从 Remapped 调整为 M0。所以，在标记阶段结束之后，对象的地址要么是 M0 视图，要么是 Remapped。如果对象的地址是 M0 视图，那么说明对象是活跃的；如果对象的地址是Remapped 视图，说明对象是不活跃的。</p></li><li><p><strong>并发转移阶段</strong>：标记结束后就进入转移阶段，此时地址视图再次被设置为Remapped。如果对象被 GC 转移线程或者应用线程访问过，那么就将对象的地址视图从 M0 调整为 Remapped。</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://xstarcd.github.io/wiki/Java/JVM_Heap_Non-heap.html">JVM堆内存和非堆内存</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/111016492">万字详解，一文带你掌握 JVM 垃圾回收！</a></p></li><li><p><a href="https://mikechen.cc/16719.html">ZGC 垃圾回收分析</a></p></li><li><p><a href="https://blog.csdn.net/u011107814/article/details/118420893">垃圾回收器G1&amp;ZGC详解</a></p></li><li><p><a href="https://juejin.cn/post/7209266987049844791">G1 垃圾收集器详解 - 掘金</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1897189">CMS 垃圾回收</a></p></li><li><p><a href="https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html">新一代垃圾回收器ZGC的探索与实践 - 美团技术团队</a></p></li><li><p><a href="https://www.selinux.tech/java/core/jvm-zgc-memory">JVM ZGC 内存管理 | JustNote</a></p></li><li><p><a href="https://www.cnblogs.com/booksea/p/17665685.html">深入解析ZGC垃圾回收器 - Booksea - 博客园</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收 </tag>
            
            <tag> ZGC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A4 图纸上绘画&quot;定高&quot;表格</title>
      <link href="/2024/03/04/a4-tu-zhi-shang-hui-hua-ding-gao-biao-ge/"/>
      <url>/2024/03/04/a4-tu-zhi-shang-hui-hua-ding-gao-biao-ge/</url>
      
        <content type="html"><![CDATA[<p>A4 图纸上绘画定高表格。首先是表格内容数据组装和表格内容数据替换。表格内容数据替换有几种实现方式。一种，借助 html 绘制 table 模板，使用 thymeleaf 做元素替换。一种，借助 word 和 书签绘制模板，使用 poi 完成书签替换。一种，使用 word 绘制 ftl 模板，使用 freemarker 完成元素替换。以上几种的表格内容数据替换方案，相对来说 html 模板和 ftl 模板是有比较好的延展性。</p><p>至于表格内容数据组装，按照业务组装即可。最近有这种“定高”表格需求，故而在此分享。按两分列展示表格内容，每个分列占用 3 列，总共一行 6 列展示两个业务数据。</p><p><img src="/images/2024/a4_table_dinggao/A41.jpg" alt="A1.jpg"></p><p><img src="/images/2024/a4_table_dinggao/4A2.jpg" alt="A2.jpg"></p><h3 id="需求点识别"><a href="#需求点识别" class="headerlink" title="需求点识别"></a>需求点识别</h3><ol><li><p>要求在固定高度下尽可能展示的行数。</p></li><li><p>要求序号和页次不可换行，且跨页对齐。</p></li><li><p>要求单页内元素不够的用空行占据。</p></li><li><p>序号单页内左侧从n<del>m，序号单页内右侧从 m+1</del>2m。</p></li></ol><h3 id="设计及实现"><a href="#设计及实现" class="headerlink" title="设计及实现"></a>设计及实现</h3><h4 id="NO1，设计使用-html-模板"><a href="#NO1，设计使用-html-模板" class="headerlink" title="NO1，设计使用 html 模板"></a>NO1，设计使用 html 模板</h4><p>使用 html 模板 + thymeleaf 替换 <code>th:</code> 类标签。使用 html  模板是因为可以通过 css 调整样式，并且能够按定制需求完成分页。</p><p>其中， A4 对应像素 <code>794px * 1123px</code> ，表格的宽高设置为 A4 的 85%，即 <code>675px * 955px</code> 。设置表头内容无颜色居中。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>794px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>1123px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table-bordered table<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span> <span class="token property">border-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>表头描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css">    <span class="token selector">*</span> <span class="token punctuation">{</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> SimHei<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">.table</span> <span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> 85%<span class="token punctuation">;</span>            <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse <span class="token important">!important</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">.table th,.table td</span> <span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0.35rem<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token selector">.table-bordered th, .table-bordered td</span> <span class="token punctuation">{</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000000<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度"><a href="#NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度" class="headerlink" title="NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度"></a>NO2，序号、内容、页次，表格中单个元素组各个单元格的宽度和高度</h4><p>序号和页次高度只有一行，千万不要换行。内容会因为单元格内容长短可能存在换行。因为表格宽度为 675px，内容宽度 = 675 - 序号宽度 - 页次宽度。还有，半角字符占用 10 px，全角字符占用 18px。其中英文相关字符为半角字符，中文相关字符为全角字符。序号和页次使用阿拉伯数字表示，为半角字符。所以，序号和页次占用宽度为 长度 * 10px。序号的最大长度为元素组 size 长度，页次的最大长度为元素组最后一个的页次长度，序号和页次的高度为 <code>.table td</code> 样式高度 35 px。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluTreeNode</span><span class="token punctuation">&gt;</span></span> nonEmptyMulus <span class="token operator">=</span> muluJiegouParam<span class="token punctuation">.</span><span class="token function">getNonEmptyMulus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> muluNum <span class="token operator">=</span> nonEmptyMulus<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 序号宽度</span><span class="token keyword">int</span> xhWidth <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>muluNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 页次宽度</span><span class="token class-name">MuluTreeNode</span> lastMuluTreeNode <span class="token operator">=</span> nonEmptyMulus<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>muluNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> lastPageInfo <span class="token operator">=</span> lastMuluTreeNode<span class="token punctuation">.</span><span class="token function">getPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> yeciWidth <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> lastPageInfo<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内容高度，则是对单元格内容每个字符使用正则表达式 <code>[\x00-\xff]</code> 判断是否半角字符累计宽度，宽度不可大于内容定宽，循环累计几次后确定行数 lines。如果 lines 为单行则高度为 35 px，如果 lines 为 2+ 行则高度为 <code>21px * lines</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> tempContentWidthPx <span class="token operator">=</span> contentWidthPx<span class="token punctuation">;</span><span class="token class-name">String</span> content <span class="token operator">=</span> muluJiegouItem<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[\\x00-\\xff]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> line <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> length<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> contentIdx <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>contentIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> itemWidthPx <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">HALF_WIDTH_CHAR_PX</span> <span class="token operator">:</span> <span class="token constant">FULL_WIDTH_CHAR_PX</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nextContentWidthPx <span class="token operator">=</span> tempContentWidthPx <span class="token operator">-</span> itemWidthPx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextContentWidthPx <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempContentWidthPx <span class="token operator">=</span> nextContentWidthPx<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        line<span class="token operator">++</span><span class="token punctuation">;</span>        tempContentWidthPx <span class="token operator">=</span> contentWidthPx <span class="token operator">-</span> itemWidthPx<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">++</span>line<span class="token punctuation">;</span><span class="token comment">// 其中 35 为单行高度像素，21 * line 为多行高度像素，14 为 padding-top + padding-bottom</span><span class="token keyword">int</span> heightPx <span class="token operator">=</span> <span class="token punctuation">(</span>line <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">35</span> <span class="token operator">:</span> <span class="token number">21</span> <span class="token operator">*</span> line<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">14</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NO3，确定左侧能装载元素长度，索引位（0-length-1）"><a href="#NO3，确定左侧能装载元素长度，索引位（0-length-1）" class="headerlink" title="NO3，确定左侧能装载元素长度，索引位（0~length-1）"></a>NO3，确定左侧能装载元素长度，索引位（0~length-1）</h4><p>以单页定高 820 px 为上限，按照每个元素内容高度看单页左侧最多能装下多少元素。但是，元素集合高度总和小于 820 px时，需要用空行补充，至于多少个则是用 高度差值px/49px，其中 49px =  35px + 7px + 7px。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">confirmPageLeftLength</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> muluJiegouItemHeights<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token constant">PAGE_CONTENT_HEIGHT</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pageLength <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> muluJiegouItemHeights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tempHeight <span class="token operator">=</span> height <span class="token operator">-</span> muluJiegouItemHeights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempHeight <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pageLength <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            height <span class="token operator">=</span> tempHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageLength <span class="token operator">==</span> length <span class="token operator">&amp;&amp;</span> height <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pageLength <span class="token operator">+=</span> height<span class="token operator">/</span><span class="token number">49</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pageLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NO4，确定右侧能装载元素范围"><a href="#NO4，确定右侧能装载元素范围" class="headerlink" title="NO4，确定右侧能装载元素范围"></a>NO4，确定右侧能装载元素范围</h4><p>最多能装载的元素为 <strong>NO3</strong> 左侧 length，索引为 <code>length ~ 2*length-1</code> 。但前提是右侧索引范围元素高度之和必须<strong>小于</strong>单页定高。对于 <code>2*length</code> 小于元素集合长度，需要用空单行填充元素集合（当然得先拷贝集合，否则会影响元素集合）。对于右侧索引范围元素高度之和大于单页定高，需要减少右侧元素的起止位置 <code>length-1 ~ 2*length-3</code>，也就是向前挪动 2 个元素（即单行元素）。而右侧索引范围元素高度，每个元素高度需要取左内容高度和右内容高度最大值，原因很简单总不能左侧和右侧不一样，那样会 “大小眼”。</p><p>最终，确认的右侧能填充的元素长度 final_length，那单页的元素长度为 <code>2*final_length</code> 索引位 <code>0 ~ 2*final_length - 1</code> 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">confirmPageRightLength</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> muluJiegouItemHeights<span class="token punctuation">,</span> <span class="token keyword">int</span> leftPageLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> muluJiegouItemHeights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftPageLength <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> leftPageLength<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> pageLength <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> leftPageLength<span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> copyedHeights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>muluJiegouItemHeights<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageLength <span class="token operator">&gt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            copyedHeights<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> pageLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> <span class="token constant">SINGLE_ROW_OFFSETHEIGHT_PX</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 这段要改</span>        <span class="token keyword">int</span> finalLeftPageLength <span class="token operator">=</span> leftPageLength<span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>leftPageLength<span class="token punctuation">,</span> pageLength<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>copyedHeights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> copyedHeights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> finalLeftPageLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>height <span class="token operator">&gt;</span> <span class="token constant">PAGE_CONTENT_HEIGHT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftPageLength<span class="token operator">--</span><span class="token punctuation">;</span>            pageLength <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> leftPageLength<span class="token punctuation">;</span>            <span class="token keyword">int</span> finalLeftPageLength2 <span class="token operator">=</span> leftPageLength<span class="token punctuation">;</span>            height <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>leftPageLength<span class="token punctuation">,</span> pageLength<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>copyedHeights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> copyedHeights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index <span class="token operator">-</span> finalLeftPageLength2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> leftPageLength<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NO5，依据-NO4-提供的-final-length-组装单页表格元素"><a href="#NO5，依据-NO4-提供的-final-length-组装单页表格元素" class="headerlink" title="NO5，依据 NO4 提供的 final_length 组装单页表格元素"></a>NO5，依据 NO4 提供的 final_length 组装单页表格元素</h4><p>到这里就没什么好说的就是组装左元素和右元素，到这里就相当简单啦，但是要记得删除已经处理过的元素，否则计算下一页的时候还要做索引偏移。哈哈，要说再见了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluJiegouLineItem</span><span class="token punctuation">&gt;</span></span> <span class="token function">buildMuluJiegouPage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> muluJiegouItemHeights<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluJiegouItem</span><span class="token punctuation">&gt;</span></span> muluJiegouItemList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> pageLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmPageLength</span><span class="token punctuation">(</span>muluJiegouItemHeights<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> removePageLength <span class="token operator">=</span> pageLength<span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> muluJiegouItemHeights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageLength <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            removePageLength <span class="token operator">=</span> length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluJiegouLineItem</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pageLength <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">MuluJiegouItem</span> left <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> muluJiegouItemList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">MuluJiegouItem</span> right <span class="token operator">=</span> <span class="token function">getItem</span><span class="token punctuation">(</span>index <span class="token operator">+</span> pageLength<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> muluJiegouItemList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">MuluJiegouLineItem</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> muluJiegouItemHeightIter <span class="token operator">=</span> muluJiegouItemHeights<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluJiegouItem</span><span class="token punctuation">&gt;</span></span> muluJiegouItemIter <span class="token operator">=</span> muluJiegouItemList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> removePageLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> index <span class="token operator">&lt;</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>index <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            muluJiegouItemIter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            muluJiegouItemIter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            muluJiegouItemHeightIter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            muluJiegouItemHeightIter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> page<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="NO6，倒序描述的最后"><a href="#NO6，倒序描述的最后" class="headerlink" title="NO6，倒序描述的最后"></a>NO6，倒序描述的最后</h4><p>倒序描述的最后是方法的入口，所以要测试的话，顺序得是 <code>NO1 =&gt; NO2 =&gt; NO6 =&gt; NO5 =&gt; NO3 =&gt; NO4</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildMuluJiegouPages</span><span class="token punctuation">(</span><span class="token class-name">MuluJiegouItems</span> muluJiegouItems<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluTreeNode</span><span class="token punctuation">&gt;</span></span> nonEmptyMulus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> widthPx <span class="token operator">=</span> muluJiegouItems<span class="token punctuation">.</span><span class="token function">getContentWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MuluJiegouItem</span><span class="token punctuation">&gt;</span></span> muluJiegouItemList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>nonEmptyMulus<span class="token punctuation">,</span> widthPx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> muluJiegouItemHeights <span class="token operator">=</span> muluJiegouItemList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">MuluJiegouItem</span><span class="token operator">::</span><span class="token function">getHeightPx</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MuluJiegouLineItem</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>muluJiegouItemHeights<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">buildMuluJiegouPage</span><span class="token punctuation">(</span>muluJiegouItemHeights<span class="token punctuation">,</span> muluJiegouItemList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        muluJiegouItems<span class="token punctuation">.</span><span class="token function">setPages</span><span class="token punctuation">(</span>pages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> A4 </tag>
            
            <tag> 分页 </tag>
            
            <tag> 定高 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 通过 OpenCV 提取答题卡选择题答案</title>
      <link href="/2024/02/24/java-tong-guo-opencv-ti-qu-da-ti-qia-xuan-ze-ti-da-an/"/>
      <url>/2024/02/24/java-tong-guo-opencv-ti-qu-da-ti-qia-xuan-ze-ti-da-an/</url>
      
        <content type="html"><![CDATA[<h3 id="答题卡识别技术选型"><a href="#答题卡识别技术选型" class="headerlink" title="答题卡识别技术选型"></a>答题卡识别技术选型</h3><p>OpenCV（Open Source Computer Vision Library） 是一种开源计算机视觉库，它提供了一些用于处理图像和视频的工具和算法。用于处理图片的纠偏。</p><p>tesseract-OCR，识别印刷体文字是轻量的 OCR 引擎。用于识别问题号。测试过 tesseract 的 java SDK <code>tess4j</code> 识别结果和直接使用 tesseract 命令识别结果不一样。最终我选了直接使用 tesseract 命令识别。</p><h3 id="答题卡识别前置约束"><a href="#答题卡识别前置约束" class="headerlink" title="答题卡识别前置约束"></a>答题卡识别前置约束</h3><ol><li><p>需要以固定的格式设置问卷</p><ul><li><p>答题区的宽度大于问题的宽度</p><p><img src="/images/2024/opencv_tesseract_answerarea/openCV_1.jpg" alt="openCV_1.jpg"></p></li><li><p>需要固定部分宽度的比例</p><p><img src="/images/2024/opencv_tesseract_answerarea/openCV_2.png" alt="openCV_2.jpg"></p></li></ul></li><li><p>识别结果的好坏都和扫描图片的质量有关，建议是灰度 300dpi 扫描设置</p></li></ol><h3 id="答题卡识别关键代码"><a href="#答题卡识别关键代码" class="headerlink" title="答题卡识别关键代码"></a>答题卡识别关键代码</h3><h4 id="获取答题区题号识别"><a href="#获取答题区题号识别" class="headerlink" title="获取答题区题号识别"></a>获取答题区题号识别</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAnsTitles</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AnswerTitleException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> outPath <span class="token operator">=</span> filePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> filePath<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>outPath <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> command <span class="token operator">=</span> <span class="token string">"tesseract "</span> <span class="token operator">+</span>  filePath <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> outPath <span class="token operator">+</span><span class="token string">" -l chi_sim "</span><span class="token punctuation">;</span>            <span class="token class-name">Process</span> ps <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 读取文件</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> line<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token constant">EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} result: {}"</span><span class="token punctuation">,</span> command<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"答\\s*\\d+\\s*[-]*\\s*\\d*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ansTitles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ansTitles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} result pattern: {}"</span><span class="token punctuation">,</span> command<span class="token punctuation">,</span> ansTitles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ansTitles<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AnswerTitleException</span><span class="token punctuation">(</span><span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"{0} answer-title-identify"</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">deleteQuietly</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过-openCV-截取答题卡区域"><a href="#通过-openCV-截取答题卡区域" class="headerlink" title="通过 openCV 截取答题卡区域"></a>通过 openCV 截取答题卡区域</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">loadLibrary</span><span class="token punctuation">(</span><span class="token class-name">Core</span><span class="token punctuation">.</span><span class="token constant">NATIVE_LIBRARY_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recognize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 获取识别内容，确定答题号</span>            <span class="token class-name">Mat</span> srcImgMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Mat</span> cvtMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Mat</span> correctImgMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ansTitles <span class="token operator">=</span> <span class="token function">getAnsTitles</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                srcImgMat <span class="token operator">=</span> <span class="token class-name">Imgcodecs</span><span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                cvtMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 灰度</span>                <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>srcImgMat<span class="token punctuation">,</span> cvtMat<span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">COLOR_BGR2GRAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 矫正</span>                correctImgMat <span class="token operator">=</span> imgCorrector<span class="token punctuation">.</span><span class="token function">correct</span><span class="token punctuation">(</span>cvtMat<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 截答题区</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Mat</span><span class="token punctuation">&gt;</span></span> answerAreaMats <span class="token operator">=</span> answerCutter<span class="token punctuation">.</span><span class="token function">answerCut</span><span class="token punctuation">(</span>correctImgMat<span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ansTitles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> answerAreaMats<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    answerAreaMats<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ansAreaMat <span class="token operator">-&gt;</span> <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>ansAreaMat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AnswerCutException</span><span class="token punctuation">(</span><span class="token string">"答题数和答案区数量不一致，跳过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerArea</span><span class="token punctuation">&gt;</span></span> answerAreas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ansTitles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ansTitles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    answerAreas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnswerArea</span><span class="token punctuation">(</span>ansTitles<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> answerAreaMats<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> answerAreas<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CorrectException</span> <span class="token operator">|</span> <span class="token class-name">AnswerCutException</span> <span class="token operator">|</span> <span class="token class-name">AnswerTitleException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"file:{}"</span><span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>srcImgMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>cvtMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>correctImgMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnswerArea</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Mat</span> areaMat<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="图片纠偏"><a href="#图片纠偏" class="headerlink" title="图片纠偏"></a>图片纠偏</h5><p>图片纠偏，纠正角度超过 10 度的图片。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgCorrector</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Scalar</span> <span class="token constant">WHITE_PAGE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scalar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANNY_KERNEL_SIZE</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANNY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CANNY_THRESHOLD_RATIO</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STRAIGHT_PINGJIAO</span> <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STRAIGHT_ZHIJIAO</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THRESHOLD_300</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THRESHOLD_200</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THRESHOLD_100</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 矫正图片，当倾斜度超过 10 度都是不合理的矫正.     * 保持原长宽，不适合大角度纠偏.     * @param cvtMat 灰度Mat     * @param filePath 文件路径     * @return 矫正后的Mat     */</span>    <span class="token keyword">public</span> <span class="token class-name">Mat</span> <span class="token function">correct</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> cvtMat<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CorrectException</span> <span class="token punctuation">{</span>        <span class="token class-name">Mat</span> mat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> degree <span class="token operator">=</span> <span class="token function">calcSlope</span><span class="token punctuation">(</span>cvtMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 当倾斜度超过 10 度都是不合理的矫正.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.0d</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>degree<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10.0d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} correct, if degree({}) is zero or bigger than 10 then no correct."</span><span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> degree<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> cvtMat<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} correct, degree({})"</span><span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> degree<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Mat</span> correctImgMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> length <span class="token operator">=</span> cvtMat<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> cvtMat<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> cvtMat<span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> cvtMat<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 确定翻转切入点</span>            <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mat <span class="token operator">=</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">getRotationMatrix2D</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> degree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">warpAffine</span><span class="token punctuation">(</span>cvtMat<span class="token punctuation">,</span> correctImgMat<span class="token punctuation">,</span> mat<span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token class-name">Size</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">INTER_LINEAR</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">WHITE_PAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">saveToTempFile</span><span class="token punctuation">(</span>correctImgMat<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> <span class="token string">"correct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> correctImgMat<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CorrectException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计算图片倾斜角度.     * 1. Canny 提取图像边缘检测     * 2. HoughLines 提取直线     * @param cvtMat 灰度图片mat     * @return 倾斜角度     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">calcSlope</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> cvtMat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Mat</span> cannyMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> blurMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> straightLineMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            blurMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3x3 内核降噪</span>            <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>cvtMat<span class="token punctuation">,</span> blurMat<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// canny 射线</span>            cannyMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Imgproc<span class="token punctuation">.</span>Canny</span><span class="token punctuation">(</span>blurMat<span class="token punctuation">,</span> cannyMat<span class="token punctuation">,</span>                    <span class="token constant">CANNY_THRESHOLD</span><span class="token punctuation">,</span> <span class="token constant">CANNY_THRESHOLD</span> <span class="token operator">*</span> <span class="token constant">CANNY_THRESHOLD_RATIO</span><span class="token punctuation">,</span> <span class="token constant">CANNY_KERNEL_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// houghLines</span>            straightLineMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Imgproc<span class="token punctuation">.</span>HoughLines</span><span class="token punctuation">(</span>cannyMat<span class="token punctuation">,</span> straightLineMat<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token constant">STRAIGHT_PINGJIAO</span><span class="token punctuation">,</span>  <span class="token constant">THRESHOLD_300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            if(straightLineMat.rows() == 0 || straightLineMat.cols() == 0) {</span><span class="token comment">//                Imgproc.HoughLines(cannyMat, straightLineMat, 1, Math.PI/STRAIGHT_PINGJIAO, THRESHOLD_300);</span><span class="token comment">//            }</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>straightLineMat<span class="token punctuation">.</span><span class="token function">rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> straightLineMat<span class="token punctuation">.</span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Imgproc<span class="token punctuation">.</span>HoughLines</span><span class="token punctuation">(</span>cannyMat<span class="token punctuation">,</span> straightLineMat<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token constant">STRAIGHT_PINGJIAO</span><span class="token punctuation">,</span> <span class="token constant">THRESHOLD_200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>straightLineMat<span class="token punctuation">.</span><span class="token function">rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> straightLineMat<span class="token punctuation">.</span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Imgproc<span class="token punctuation">.</span>HoughLines</span><span class="token punctuation">(</span>cannyMat<span class="token punctuation">,</span> straightLineMat<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token constant">STRAIGHT_PINGJIAO</span><span class="token punctuation">,</span> <span class="token constant">THRESHOLD_100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>straightLineMat<span class="token punctuation">.</span><span class="token function">rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> straightLineMat<span class="token punctuation">.</span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没检测到直线，不纠偏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0.0d</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">float</span> average <span class="token operator">=</span> <span class="token function">getLineSlopeAvg</span><span class="token punctuation">(</span>straightLineMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> average <span class="token operator">/</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token constant">STRAIGHT_PINGJIAO</span> <span class="token operator">-</span> <span class="token constant">STRAIGHT_ZHIJIAO</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>blurMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>cannyMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>straightLineMat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0.0d</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> <span class="token function">getLineSlopeAvg</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> xIsX <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lines<span class="token punctuation">.</span><span class="token function">rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span><span class="token function">rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vec <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isX <span class="token operator">=</span> <span class="token function">isX</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexs <span class="token operator">=</span> xIsX<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>isX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>xIsX<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>isX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                indexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                xIsX<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>isX<span class="token punctuation">,</span> indexs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            indexs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> xIndexs <span class="token operator">=</span> xIsX<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> yIndexs <span class="token operator">=</span> xIsX<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> countX <span class="token operator">=</span> xIndexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> countY <span class="token operator">=</span> yIndexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexs <span class="token operator">=</span> countX <span class="token operator">&gt;</span> countY <span class="token operator">?</span> xIndexs <span class="token operator">:</span> countX <span class="token operator">&lt;</span> countY <span class="token operator">?</span> yIndexs<span class="token operator">:</span> <span class="token class-name">ListUtils</span><span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>xIndexs<span class="token punctuation">,</span> yIndexs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token operator">:</span> indexs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vec <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> theta <span class="token operator">=</span> vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> theta<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token operator">/</span>indexs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isX</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vec<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> rho <span class="token operator">=</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> theta <span class="token operator">=</span> vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> x0 <span class="token operator">=</span> a<span class="token operator">*</span>rho<span class="token punctuation">,</span> y0 <span class="token operator">=</span> b<span class="token operator">*</span>rho<span class="token punctuation">;</span>        <span class="token keyword">double</span> point1x <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x0 <span class="token operator">+</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> point1y <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>y0 <span class="token operator">+</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> point2x <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>x0 <span class="token operator">-</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> point2y <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>y0 <span class="token operator">-</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>point1x<span class="token operator">-</span> point2x<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>point1y <span class="token operator">-</span> point2y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">releaseMat</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> imgMat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imgMat <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            imgMat<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="截取答题卡区域"><a href="#截取答题卡区域" class="headerlink" title="截取答题卡区域"></a>截取答题卡区域</h5><p>答题卡区域与问题区域的区别是在设置的答题卡区长度大于问题区域。这样就能简单的截取到答题卡区</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgAnswerCutter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THRESHOLD_MAX</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STRUCTURE_WIDTH</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STRUCTURE_HEIGHT</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">POINT_HALF</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">POINT_EIGHT</span> <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">POINT_NIGHTEIGHT</span> <span class="token operator">=</span> <span class="token number">0.98</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">FILTER_HEIGHT</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">DOUBLE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 答题区切割.     * @param correctImgMat 矫正后的图片Mat     * @param filePath 文件路径     * @return 答题区切割后的 Mat 集合     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Mat</span><span class="token punctuation">&gt;</span></span> <span class="token function">answerCut</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> correctImgMat<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AnswerCutException</span> <span class="token punctuation">{</span>        <span class="token class-name">Mat</span> binaryMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> noiseMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> erodeMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> reverseMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> edgeMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            binaryMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 二值化 Mat</span>            <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">threshold</span><span class="token punctuation">(</span>correctImgMat<span class="token punctuation">,</span> binaryMat<span class="token punctuation">,</span> <span class="token constant">THRESHOLD_MAX</span><span class="token punctuation">,</span> <span class="token constant">THRESHOLD_MAX</span><span class="token punctuation">,</span>                    <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">THRESH_OTSU</span> <span class="token operator">|</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">THRESH_BINARY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 定义膨化 Mat</span>            noiseMat <span class="token operator">=</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span><span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">MORPH_RECT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token constant">STRUCTURE_WIDTH</span><span class="token punctuation">,</span> <span class="token constant">STRUCTURE_HEIGHT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            erodeMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">erode</span><span class="token punctuation">(</span>binaryMat<span class="token punctuation">,</span> erodeMat<span class="token punctuation">,</span> noiseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            reverseMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反值化 Mat</span>            <span class="token class-name">Core</span><span class="token punctuation">.</span><span class="token function">bitwise_not</span><span class="token punctuation">(</span>erodeMat<span class="token punctuation">,</span> reverseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> matOfPoints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            edgeMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 发现矩形条件</span>            <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">findContours</span><span class="token punctuation">(</span>reverseMat<span class="token punctuation">,</span> matOfPoints<span class="token punctuation">,</span> edgeMat<span class="token punctuation">,</span>                    <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">RETR_LIST</span><span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">CHAIN_APPROX_SIMPLE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 合并小矩形</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> rects <span class="token operator">=</span> <span class="token function">mergeInnerAndTransRect</span><span class="token punctuation">(</span>matOfPoints<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 过滤掉离谱的矩形</span>            <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">filterAnswerRect</span><span class="token punctuation">(</span>rects<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>rect <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                        <span class="token class-name">Mat</span> ansAreaMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span>correctImgMat<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> num <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">saveToTempFile</span><span class="token punctuation">(</span>ansAreaMat<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> <span class="token string">"anscut-"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> ansAreaMat<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AnswerCutException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>binaryMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>noiseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>erodeMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>reverseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">releaseMat</span><span class="token punctuation">(</span>edgeMat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 只留下长度最长的举证，兼容 2% 的宽度差.     * @param rects 矩阵集合.     * @return 最长的.     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> <span class="token function">filterAnswerRect</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> rects<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>  maxHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> secHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        rects <span class="token operator">=</span> rects<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rect1<span class="token punctuation">,</span> rect2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>rect1<span class="token punctuation">.</span>height<span class="token punctuation">,</span> rect2<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Rect</span> rect<span class="token operator">:</span> rects<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxWidth <span class="token operator">&lt;</span> rect<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>height <span class="token operator">&gt;</span> maxHeight <span class="token operator">*</span> <span class="token constant">POINT_HALF</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxWidth <span class="token operator">=</span> rect<span class="token punctuation">.</span>width<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxHeight <span class="token operator">&lt;</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>                secHeight <span class="token operator">=</span> maxHeight<span class="token punctuation">;</span>                maxHeight <span class="token operator">=</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>minHeight <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> minHeight <span class="token operator">&gt;</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>height<span class="token operator">&gt;</span> <span class="token constant">FILTER_HEIGHT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                minHeight <span class="token operator">=</span> rect<span class="token punctuation">.</span>height<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 处理同一页有多行答案和单行答案,仅处理同一也只有一个多行多个单行的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxHeight <span class="token operator">&gt;</span> minHeight <span class="token operator">*</span> <span class="token constant">DOUBLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxHeight <span class="token operator">=</span> secHeight<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> height <span class="token operator">=</span> maxHeight<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> finalMaxWidth <span class="token operator">=</span> maxWidth<span class="token punctuation">;</span>        <span class="token keyword">return</span> rects<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>rect <span class="token operator">-&gt;</span> rect<span class="token punctuation">.</span>width <span class="token operator">&gt;</span> finalMaxWidth <span class="token operator">*</span> <span class="token constant">POINT_NIGHTEIGHT</span> <span class="token operator">&amp;&amp;</span>                        rect<span class="token punctuation">.</span>height <span class="token operator">&gt;</span> height <span class="token operator">*</span> <span class="token constant">POINT_EIGHT</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rect1<span class="token punctuation">,</span> rect2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>rect1<span class="token punctuation">.</span>y<span class="token punctuation">,</span> rect2<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 转型为 MatOfPoint,合并inner的小矩形.     * @param matOfPoints mat 点.     * @return 矩形集合.     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> <span class="token function">mergeInnerAndTransRect</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> matOfPoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> sortedRects <span class="token operator">=</span> matOfPoints<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Imgproc</span><span class="token operator">::</span><span class="token function">boundingRect</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rec1<span class="token punctuation">,</span> rec2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rec1<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> rec2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rec1<span class="token punctuation">.</span>y <span class="token operator">==</span> rec2<span class="token punctuation">.</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rec1<span class="token punctuation">.</span>width <span class="token operator">&lt;</span> rec2<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rec1<span class="token punctuation">.</span>height <span class="token operator">&lt;</span> rec2<span class="token punctuation">.</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> rects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Rect</span> rect<span class="token operator">:</span> sortedRects<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canMergeInner</span><span class="token punctuation">(</span>rects<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rects<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 判断当前 rect 的长宽高是否在范围内, x.y都在范围内，且x+width和 y+height都在范围内则能合并.     * @param rects 矩形集合     * @param rect 对比矩形     * @return 是否可merge     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">canMergeInner</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Rect</span><span class="token punctuation">&gt;</span></span> rects<span class="token punctuation">,</span> <span class="token class-name">Rect</span> rect<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> rects<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>rect1 <span class="token operator">-&gt;</span> rect1<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> rect<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> rect1<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> rect<span class="token punctuation">.</span>y <span class="token operator">&amp;&amp;</span>                        rect1<span class="token punctuation">.</span>x<span class="token operator">+</span>rect1<span class="token punctuation">.</span>width <span class="token operator">&gt;=</span> rect<span class="token punctuation">.</span>x <span class="token operator">+</span> rect<span class="token punctuation">.</span>width <span class="token operator">&amp;&amp;</span> rect1<span class="token punctuation">.</span>y<span class="token operator">+</span>rect1<span class="token punctuation">.</span>height <span class="token operator">&gt;</span> rect<span class="token punctuation">.</span>y<span class="token operator">+</span>rect<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">releaseMat</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> imgMat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>imgMat <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            imgMat<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="得到答题区的选择项目"><a href="#得到答题区的选择项目" class="headerlink" title="得到答题区的选择项目"></a>得到答题区的选择项目</h4><p>通过 openCV 对答题区的二值、膨胀、canny 之后确定填图区域，并计算他与边的差值处于选项之间的差值确定是填涂的第几个答案。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecognizeShadow</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">MAINQ_PECENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0.0197d</span><span class="token punctuation">,</span> <span class="token number">0.0388d</span><span class="token punctuation">,</span> <span class="token number">0.0116d</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">SUBQ_PECENT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0.0205d</span><span class="token punctuation">,</span> <span class="token number">0.0403d</span><span class="token punctuation">,</span> <span class="token number">0.0120d</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 小问题的选项区占答题区的百分占比.     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> subPercent<span class="token punctuation">;</span>    <span class="token comment">/**     * 大问题的三个占比，     * num_0,第一个选项到竖线占选项区的百分比     * num_1,选项占选项区的百分比     * num_2,选项之间占选项区的百分比     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mainqPercent<span class="token punctuation">;</span>    <span class="token comment">/**     * 小问题的三个占比，     * num_0,第一个选项到竖线占选项区的百分比     * num_1,选项占选项区的百分比     * num_2,选项之间占选项区的百分比     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subqPercent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RecognizeShadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subPercent <span class="token operator">=</span> <span class="token number">0.88d</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainqPercent <span class="token operator">=</span> <span class="token constant">MAINQ_PECENT</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subqPercent <span class="token operator">=</span> <span class="token constant">SUBQ_PECENT</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">RecognizeShadow</span><span class="token punctuation">(</span><span class="token keyword">double</span> subPercent<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mainqPercent<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> subqPercent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mainqPercent<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">3</span> <span class="token operator">||</span> subqPercent<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"选项区的百分比必须是3个。num_0，第一个选项到竖线占选项区的百分比。"</span>                    <span class="token operator">+</span> <span class="token string">"num_1，选项占选项区的百分比。num_2，选项之间占选项区的百分比。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subPercent <span class="token operator">=</span> subPercent<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mainqPercent <span class="token operator">=</span> mainqPercent<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subqPercent <span class="token operator">=</span> subqPercent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     *     * @param qPercent     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">parseQPercent</span><span class="token punctuation">(</span><span class="token class-name">String</span> qPercent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        qPercent <span class="token operator">=</span> qPercent<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> percents <span class="token operator">=</span> qPercent<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>percents<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">",字符长度不为3， 不符合要求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>percents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>percents<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>percents<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 识别阴影，并定位.     * @param answerAreas 阴影     * @param filePath 文件路径     * @return 结果识别     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">recognizeShadow</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerArea</span><span class="token punctuation">&gt;</span></span> answerAreas<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> answerAreas<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>answerArea <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">Mat</span> splitMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> noiseMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> erodeMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> dilateMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> edgeMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> contourMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> optionMat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token class-name">Mat</span> areaMat <span class="token operator">=</span> answerArea<span class="token punctuation">.</span><span class="token function">getAreaMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        splitMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 二值化</span>                        <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">threshold</span><span class="token punctuation">(</span>areaMat<span class="token punctuation">,</span> splitMat<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">THRESH_OTSU</span> <span class="token operator">|</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">THRESH_BINARY_INV</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取选项区域</span>                        <span class="token class-name">Option</span> option <span class="token operator">=</span> <span class="token function">optionArea</span><span class="token punctuation">(</span>splitMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        noiseMat <span class="token operator">=</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">getStructuringElement</span><span class="token punctuation">(</span><span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">MORPH_RECT</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        erodeMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        optionMat <span class="token operator">=</span> option<span class="token punctuation">.</span><span class="token function">getOptionMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">erode</span><span class="token punctuation">(</span>optionMat<span class="token punctuation">,</span> erodeMat<span class="token punctuation">,</span> noiseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        dilateMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 膨胀</span>                        <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">dilate</span><span class="token punctuation">(</span>erodeMat<span class="token punctuation">,</span> dilateMat<span class="token punctuation">,</span> noiseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        edgeMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// canny</span>                        <span class="token class-name">Imgproc<span class="token punctuation">.</span>Canny</span><span class="token punctuation">(</span>dilateMat<span class="token punctuation">,</span> edgeMat<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> chapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        contourMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">findContours</span><span class="token punctuation">(</span>edgeMat<span class="token punctuation">,</span> chapter<span class="token punctuation">,</span> contourMat<span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">RETR_EXTERNAL</span><span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">CHAIN_APPROX_SIMPLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">drawContours</span><span class="token punctuation">(</span>optionMat<span class="token punctuation">,</span> chapter<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">saveToTempFile</span><span class="token punctuation">(</span>option<span class="token punctuation">.</span><span class="token function">getOptionMat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> <span class="token string">"shadow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> <span class="token function">calcAnswer</span><span class="token punctuation">(</span>chapter<span class="token punctuation">,</span> option<span class="token punctuation">,</span> answerArea<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>optionMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>splitMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>noiseMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>erodeMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>dilateMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>edgeMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>contourMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">MatUtil</span><span class="token punctuation">.</span><span class="token function">releaseMat</span><span class="token punctuation">(</span>areaMat<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token operator">::</span><span class="token function">isNotBlank</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 通过选项的偏移量计算答案位置.     * @param chapter 被填涂的MatOfPoint     * @param option 选项区情况     * @param answerTitle 答题目     * @return 答题结果     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">calcAnswer</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> chapter<span class="token punctuation">,</span> <span class="token class-name">Option</span> option<span class="token punctuation">,</span> <span class="token class-name">String</span> answerTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> optionalPer <span class="token operator">=</span> option<span class="token punctuation">.</span>optionPercent <span class="token operator">&lt;</span> subPercent <span class="token operator">?</span> subqPercent<span class="token operator">:</span> mainqPercent<span class="token punctuation">;</span>        <span class="token keyword">double</span> optionAllWidth <span class="token operator">=</span> option<span class="token punctuation">.</span><span class="token function">getOptionWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> optionAllHeight <span class="token operator">=</span> option<span class="token punctuation">.</span><span class="token function">getOptionHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> leftGrapWidth <span class="token operator">=</span> optionAllWidth <span class="token operator">*</span> optionalPer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ansWidth <span class="token operator">=</span> optionAllWidth <span class="token operator">*</span> optionalPer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> ansGapWidth <span class="token operator">=</span> optionAllWidth <span class="token operator">*</span> optionalPer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> preAnsWidth <span class="token operator">=</span> ansWidth <span class="token operator">+</span> ansGapWidth<span class="token punctuation">;</span>        <span class="token comment">// 最小填涂覆盖宽度.</span>        <span class="token keyword">double</span> minMatchWidth <span class="token operator">=</span> ansWidth <span class="token operator">*</span> <span class="token number">0.6</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SingleAnswerArea</span><span class="token punctuation">&gt;</span></span> ttAnsAreas <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>chapter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lineCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span> optionAllWidth <span class="token operator">-</span>leftGrapWidth<span class="token punctuation">)</span> <span class="token operator">/</span>preAnsWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> answer <span class="token operator">=</span> ttAnsAreas<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ttAnsArea <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> yStart <span class="token operator">=</span> ttAnsArea<span class="token punctuation">.</span><span class="token function">getYStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> height <span class="token operator">=</span> ttAnsArea<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 小于最小的填涂覆盖宽度则认为是无效的填涂.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ttAnsArea<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> minMatchWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} ttAnsArea:{}宽度{} 小于{}，无效填涂"</span><span class="token punctuation">,</span> answerTitle<span class="token punctuation">,</span> ttAnsArea<span class="token punctuation">,</span> ttAnsArea<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minMatchWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 算出的跳过选项，此处使用 四舍五入 原则.</span>            <span class="token keyword">int</span> skipXCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ttAnsArea<span class="token punctuation">.</span><span class="token function">getXStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span>leftGrapWidth<span class="token punctuation">)</span> <span class="token operator">/</span>preAnsWidth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            skipXCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>yStart <span class="token operator">&gt;</span> optionAllHeight <span class="token operator">*</span> <span class="token number">0.5</span> <span class="token operator">&amp;&amp;</span> height <span class="token operator">&lt;</span> optionAllHeight <span class="token operator">*</span> <span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                skipXCount <span class="token operator">+=</span> lineCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>skipXCount <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> skipXCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 认为大于 9 的是以A-Z标记，所以选项不超过 35 个选项.</span>            <span class="token keyword">return</span> skipXCount <span class="token operator">+</span> <span class="token number">55</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"题号:{0}，答案:{1}"</span><span class="token punctuation">,</span>                <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replaceIgnoreCase</span><span class="token punctuation">(</span>answerTitle<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 从MatOfPoint多个点，转换为 minX-&gt;maxX,minY-&gt;maxY.     * @param chapters chapters     * @return SingleAnswerArea集合.     */</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SingleAnswerArea</span><span class="token punctuation">&gt;</span></span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> chapters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> chapters<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>chapter <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> points <span class="token operator">=</span> chapter<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> xStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> xEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> yStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> yEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Point</span> point<span class="token operator">:</span> points<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">double</span> x <span class="token operator">=</span> point<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                <span class="token keyword">double</span> y <span class="token operator">=</span> point<span class="token punctuation">.</span>y<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xStart <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xStart <span class="token operator">=</span> x<span class="token punctuation">;</span>                    yStart <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> xEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xEnd <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> xStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    xStart <span class="token operator">=</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> yEnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    yEnd <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> yStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    yStart <span class="token operator">=</span> y<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SingleAnswerArea</span><span class="token punctuation">(</span>xStart<span class="token punctuation">,</span> xEnd<span class="token punctuation">,</span> yStart<span class="token punctuation">,</span> yEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">SingleAnswerArea</span><span class="token operator">::</span><span class="token function">getYStart</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">SingleAnswerArea</span><span class="token operator">::</span><span class="token function">getHeight</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">thenComparing</span><span class="token punctuation">(</span><span class="token class-name">SingleAnswerArea</span><span class="token operator">::</span><span class="token function">getXStart</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token annotation punctuation">@ToString</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">SingleAnswerArea</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> xStart<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> xEnd<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> yStart<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> yEnd<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> xEnd <span class="token operator">-</span> xStart<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> yEnd <span class="token operator">-</span> yStart<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 确定答题区中选项区域与答题区的宽度占比，用以确定是大题还是小题，且后续的每个选项的占比也会因为大题、小题而不同.     * @param srcMat 答题区，二值化后的Mat     * @return {@link Option}     */</span>    <span class="token keyword">private</span> <span class="token class-name">Option</span> <span class="token function">optionArea</span><span class="token punctuation">(</span><span class="token class-name">Mat</span> srcMat<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> chapter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> contourMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">findContours</span><span class="token punctuation">(</span>srcMat<span class="token punctuation">,</span> chapter2<span class="token punctuation">,</span> contourMat<span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">RETR_LIST</span><span class="token punctuation">,</span> <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token constant">CHAIN_APPROX_SIMPLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pointGroup <span class="token operator">=</span> chapter2<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>matOfPoint <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> points <span class="token operator">=</span> matOfPoint<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>point <span class="token operator">-&gt;</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> minPoint <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>            <span class="token keyword">double</span> maxPoint <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>maxPoint <span class="token operator">-</span> minPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> maxWidth <span class="token operator">=</span> <span class="token number">0.0d</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> optionWidth <span class="token operator">=</span> <span class="token number">0.0d</span><span class="token punctuation">;</span>        <span class="token class-name">MatOfPoint</span> maxMatPoint <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">MatOfPoint</span> optionMatPoint <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pointEntry<span class="token operator">:</span> pointGroup<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Double</span> width <span class="token operator">=</span> pointEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MatOfPoint</span><span class="token punctuation">&gt;</span></span> matOfPoints <span class="token operator">=</span> pointEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>maxWidth <span class="token operator">==</span> <span class="token number">0.0d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                maxWidth <span class="token operator">=</span> width<span class="token punctuation">;</span>                maxMatPoint <span class="token operator">=</span> matOfPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxWidth <span class="token operator">&lt;</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>                optionWidth <span class="token operator">=</span> maxWidth<span class="token punctuation">;</span>                maxWidth <span class="token operator">=</span> width<span class="token punctuation">;</span>                optionMatPoint <span class="token operator">=</span> maxMatPoint<span class="token punctuation">;</span>                maxMatPoint <span class="token operator">=</span> matOfPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">Imgproc</span><span class="token punctuation">.</span><span class="token function">drawContours</span><span class="token punctuation">(</span>srcMat<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>optionMatPoint<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> xPoints <span class="token operator">=</span> optionMatPoint<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>point <span class="token operator">-&gt;</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> yPoints <span class="token operator">=</span> optionMatPoint<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>point <span class="token operator">-&gt;</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Range</span> colRange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span>xPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span>xPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>xPoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Range</span> rowRange <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span>yPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">)</span>yPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>yPoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mat</span> optionMat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mat</span><span class="token punctuation">(</span>srcMat<span class="token punctuation">,</span> rowRange<span class="token punctuation">,</span> colRange<span class="token punctuation">)</span><span class="token punctuation">;</span>        contourMat<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> optionHeight <span class="token operator">=</span> yPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>yPoints<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y <span class="token operator">-</span> yPoints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Option</span><span class="token punctuation">(</span>optionMat<span class="token punctuation">,</span> optionWidth<span class="token operator">/</span>maxWidth<span class="token punctuation">,</span> optionWidth<span class="token punctuation">,</span> optionHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 选项区的结构.     */</span>    <span class="token annotation punctuation">@Getter</span>    <span class="token annotation punctuation">@Setter</span>    <span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Option</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * 选项Mat.         */</span>        <span class="token keyword">private</span> <span class="token class-name">Mat</span> optionMat<span class="token punctuation">;</span>        <span class="token comment">/**         * 选项区/答题区占比.         */</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> optionPercent<span class="token punctuation">;</span>        <span class="token comment">/**         * 选项区宽度.         */</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> optionWidth<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">double</span> optionHeight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> tesseract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出乎意外的 &quot;系统宕机&quot;</title>
      <link href="/2024/02/22/chu-hu-yi-wai-de-xi-tong-dang-ji/"/>
      <url>/2024/02/22/chu-hu-yi-wai-de-xi-tong-dang-ji/</url>
      
        <content type="html"><![CDATA[<p>出乎意外的 “系统宕机”</p><p>我徒弟一个刚毕业的精神小伙，近期处理现场提交的工单问题。驻地告诉他系统每天在用户下班后会宕机，需要他每天上班启动系统。徒弟没什么经验，就让线程调大内存参数 <code>-Xmx 16g -Xms 8g</code> 观察。第二天，驻地还是告诉他依旧是用户下班后会宕机。徒弟也是摸不到头脑找到了我。</p><p><img src="/images/2024/notinmind_systemexit/3641708614410_.pic.jpg"></p><h3 id="出乎意外，情理之中"><a href="#出乎意外，情理之中" class="headerlink" title="出乎意外，情理之中"></a>出乎意外，情理之中</h3><p>首先，确定是否内存 OOM 导致宕机。在图片中是通过 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 启动 OOM 是生成堆 dump 文件， OOM 是堆 dump 文件 <code>-XX:HeapDumpPath</code> 配置指定位置。 是否存在堆 dump 文件。<strong>驻地回答说目录下没有任何文件。难道 OOM 启动配置是后加的？</strong></p><p><img src="/images/2024/notinmind_systemexit/cocall61708612842881.jpg"></p><p>其次，让驻地通过 linux 系统日志看能不能找到 OOM 的蛛丝马迹。随即发去搜索命令 <code>dmesg | grep -i -B10 'killed process'</code> 和 <code>grep -i 'killed process' /var/log/messages</code> 。<strong>驻地回答说没有任何内容输出。</strong></p><p>再想想驻地说的话，都是下班后宕机，下班后系统业务并不多，想再看看系统日志，确定什么时候宕机的。结果发现直到 <code>23:59:59</code> 都有数据库链接的测试日志。那是凌晨宕机？但是日志已经被驻地手动启动覆盖了。<span class="github-emoji"><span>🌟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <strong>手动启动</strong> ，回看图片驻地的启动方式是命令行里输入 <code>java -jar xxx.jar &amp;</code> 这是同步启动非后台启动，如果出现窗口失效断开连接的话，是会让程序走正常系统退出，驻地发回来的退出系统照片能匹配上。</p><p>最终，让他修改成 <code>nohup java -jar xxx.jar &gt; /dev/null 2&gt;&amp;1 &amp;</code> 启动，第二天不再出现所谓的 “系统宕机”。</p><p><img src="/images/2024/notinmind_systemexit/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> exception </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么实现 mybatis 自动设置创建时间更新时间</title>
      <link href="/2024/02/18/zen-me-shi-xian-mybatis-zi-dong-she-zhi-chuang-jian-shi-jian-geng-xin-shi-jian/"/>
      <url>/2024/02/18/zen-me-shi-xian-mybatis-zi-dong-she-zhi-chuang-jian-shi-jian-geng-xin-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么实现-mybatis-自动设置创建时间更新时间"><a href="#怎么实现-mybatis-自动设置创建时间更新时间" class="headerlink" title="怎么实现 mybatis 自动设置创建时间更新时间"></a>怎么实现 mybatis 自动设置创建时间更新时间</h2><h4 id="mag-相对流行方案弊端"><a href="#mag-相对流行方案弊端" class="headerlink" title=":mag: 相对流行方案弊端"></a><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 相对流行方案弊端</h4><p>mybatis 提供 Interceptor 接口以插件方式提供扩展能力。互联网上大都是对数据表映射类对象中关于时间属性设置当前时间的解决方案。但这种方法无法解决 mapper.xml 写更新 SQL 或 @XXXProvider 拼 SQL 的方式插入或更新数据表。但是依托于数据表映射类本身没有问题，因为需要知道创建时间和更新时间对应的数据库字段信息，这是光拦截到 SQL 而无法判断时间相关的字段是否存在并赋值。</p><h4 id="mortar-board-更好的选择"><a href="#mortar-board-更好的选择" class="headerlink" title=":mortar_board: 更好的选择"></a><span class="github-emoji"><span>🎓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 更好的选择</h4><p>如果你项目中使用了 mybatis-plus 组件，恭喜你做这个决定你足够明智。 mybatis-plus 提供 MetaObjectHandler 抽象类实现公共字段自动写入能力。其大体思路是针对 @XXXProvider 拼 SQL 时将实体中标记需要自动填充的字段拼入 SQL 中，通过 metaObjectHandler 对实体属性字段填充相应值，最后带有自动填充字段的 PrepareStatement SQL 插入/更新数据表数据。</p><p>但，项目上使用自写 <code>BaseMapper&lt;E,ID&gt;</code> 接口和 @XXXProvider 注解实现 BaseMapperSqlSourceBuilder 类完成 SQL 拼接。但未提供对公用字段自动写入能力。</p><h4 id="mushroom-在现状上解决问题"><a href="#mushroom-在现状上解决问题" class="headerlink" title=":mushroom: 在现状上解决问题"></a><span class="github-emoji"><span>🍄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在现状上解决问题</h4><p>Interceptor 拦截的位置是执行 SQL 之前，也就是 <code>@Signature(type = Executor.class, method="update", args={MappedStatement.class, Object.class})</code> ，在 SQL 里拼接时间的字段和字段值。字段值可以直接设置的 <code>now()</code> 数据库函数，缺点是强依赖数据库。这个缺点需要通过 driver 信息找确切的数据库类型，切换时间函数。时间字段信息则是通过 <code>BaseMapper&lt;E,ID&gt;</code> 获取泛型 E 指向的 Class，通过属性名匹配（没办法老代码只能匹配属性名）或注解匹配找到时间字段。SQL 里拼接时间字段是通过包装 SqlSource 通过 <code>SqlSource#getBoundSql</code> 替换最终 SQL 和当前时间函数。</p><ul><li><code>mappedStatement#getId()</code>，id 的值对应类全路径，从这个类全路径获取类信息并确定 <code>BaseMapper&lt;E,ID&gt;</code> E 指向的泛型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 表的创建时间和更新时间会随着表的更新或插入行为进行赋值. 因为需要确定表中是否有创建时间或更新时间且确定时间字段名，所以需要使用的地方 * 的 mapper 继承 {@link BaseMapper}&lt;br&gt; * 思路，从 BaseMapper 的泛型 T 获取实体类，从实体类里面解析出创建时间和更新时间字段对应的数据库字段名，这里创建时间和更新时间是通过名称 * 匹配的，大小写不论包含匹配.针对插入行为会增加创建时间和更新时间，针对更新行为会更新更新时间.&lt;br&gt; * &lt;lu&gt; * &lt;li&gt;创建时间，dCjsj、cjsj、dtCjsj、dCjrq、cjrq、dtCjrq、createTime、dCreateTime、dtCreateTime&lt;/li&gt; * &lt;li&gt;更新时间，dGxsj, gxsj, dtGxsj, dXgsj, xgsj, dtXgsj, dZhxgsj、zhxgsj、dtZhxgsj、updateTime、dUpdateTime、dtUpdateTime&lt;/li&gt; * &lt;/lu&gt; * * @author liulili * @date 2024/1/25 11:24 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"update"</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutofillCreateOrUpdateTimeInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CJSJ_COLUMN_NAMES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"cjsj"</span><span class="token punctuation">,</span> <span class="token string">"dCjsj"</span><span class="token punctuation">,</span> <span class="token string">"dtCjsj"</span><span class="token punctuation">,</span> <span class="token string">"cjrq"</span><span class="token punctuation">,</span> <span class="token string">"dCjrq"</span><span class="token punctuation">,</span> <span class="token string">"dtCjrq"</span><span class="token punctuation">,</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token string">"dCreateTime"</span><span class="token punctuation">,</span> <span class="token string">"dtCreateTime"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">GXSJ_COLUMN_NAMES</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"gxsj"</span><span class="token punctuation">,</span> <span class="token string">"dGxsj"</span><span class="token punctuation">,</span> <span class="token string">"dtGxsj"</span><span class="token punctuation">,</span> <span class="token string">"xgsj"</span><span class="token punctuation">,</span> <span class="token string">"dXgsj"</span><span class="token punctuation">,</span> <span class="token string">"dtXgsj"</span><span class="token punctuation">,</span> <span class="token string">"zhxgsj"</span><span class="token punctuation">,</span> <span class="token string">"dZhxgsj"</span><span class="token punctuation">,</span> <span class="token string">"dtZhxgsj"</span><span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token string">"dUpdateTime"</span><span class="token punctuation">,</span> <span class="token string">"dtUpdateTime"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">StatementType</span> statement <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">==</span> <span class="token class-name">StatementType</span><span class="token punctuation">.</span><span class="token constant">CALLABLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"【自动填充创建或修改时间】不支持在存储过程类型业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SqlCommandType</span> command <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> id <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> id<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> mapperClazz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mapperClazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"className[{}]不是Class无法继续【自动填充创建或修改时间】的工作"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Class</span> entityClazz <span class="token operator">=</span> <span class="token function">findEntityClazz</span><span class="token punctuation">(</span>mapperClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"class[{}]非接口/未继承BaseMapper接口"</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">CUTimeDTO</span> cuTimeDTO <span class="token operator">=</span> <span class="token function">findCreateAndUpdateTimeColumn</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getCreateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"class[{}]无匹配的创建时间和更新时间字段， 请参考 AutofillCreateOrUpdateTimeInterceptor#CJSJ_COLUMN_NAMES 和 AutofillCreateOrUpdateTimeInterceptor#GXSJ_COLUMN_NAMES"</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillInsert</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token class-name">SqlCommandType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillUpdate</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> entityClazz<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillUpdate</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> updateTimeColumn <span class="token operator">=</span> cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>updateTimeColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> updateTimeColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillUTime</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSqlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSource</span> decoderSqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoFillUTimeUpdateSqlSource</span><span class="token punctuation">(</span>sqlSource<span class="token punctuation">,</span> updateTimeColumn<span class="token punctuation">,</span> <span class="token string">"now()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> <span class="token string">"sqlSource"</span><span class="token punctuation">,</span> decoderSqlSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillInsert</span><span class="token punctuation">(</span><span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> createColumnName <span class="token operator">=</span> cuTimeDTO<span class="token punctuation">.</span><span class="token function">getCreateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> updateColumnName <span class="token operator">=</span> cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> addColumn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>createColumnName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> createColumnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            addColumn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createColumnName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>updateColumnName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> updateColumnName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            addColumn<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>updateColumnName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>addColumn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> columnName <span class="token operator">=</span> addColumn<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> columnValue <span class="token operator">=</span> addColumn<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>column <span class="token operator">-&gt;</span> <span class="token string">"now()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSource</span> sqlSource <span class="token operator">=</span> mappedStatement<span class="token punctuation">.</span><span class="token function">getSqlSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSource</span> decoderSqlSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoFillCUTimeInsertSqlSource</span><span class="token punctuation">(</span>sqlSource<span class="token punctuation">,</span> columnName<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> <span class="token string">"sqlSource"</span><span class="token punctuation">,</span> decoderSqlSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getCreateTimePropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>createColumnName <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> createColumnName<span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimePropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>updateColumnName <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> updateColumnName<span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Collection</span> paramColl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            paramColl<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sparam <span class="token operator">-&gt;</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>sparam<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span> paramMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-&gt;</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>paramArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> property <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                property <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"param[{}]属性【{}】获取属性值失败"</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">autofillCUTime</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">,</span> <span class="token class-name">CUTimeDTO</span> cuTimeDTO<span class="token punctuation">,</span> <span class="token class-name">Class</span> entityClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>cuTimeDTO<span class="token punctuation">.</span><span class="token function">getUpdateTimePropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>updateColumnName <span class="token operator">-&gt;</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> updateColumnName<span class="token punctuation">,</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Collection</span> paramColl <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            paramColl<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sparam <span class="token operator">-&gt;</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span>sparam<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param <span class="token keyword">instanceof</span> <span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span> paramMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> paramMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entries<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-&gt;</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramArr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> param<span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>paramArr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token function">autofillUTime</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> property <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                property <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"param[{}]属性【{}】获取属性值失败"</span><span class="token punctuation">,</span> param<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">autofillUTime</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> cuTimeDTO<span class="token punctuation">,</span> entityClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">CUTimeDTO</span> <span class="token function">findCreateAndUpdateTimeColumn</span><span class="token punctuation">(</span><span class="token class-name">Class</span> entityClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> entityClazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> fieldMap <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">Field</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> field <span class="token operator">-&gt;</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldKeys <span class="token operator">=</span> fieldMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CUTimeDTO</span> <span class="token class-name">CUTimeDTO</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cjsjFieldNameOptional <span class="token operator">=</span> fieldKeys<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fieldKey <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token constant">CJSJ_COLUMN_NAMES</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>columnName <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> fieldKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cjsjFieldNameOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>cjsjFieldName <span class="token operator">-&gt;</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setCreateTimePropertyName</span><span class="token punctuation">(</span>cjsjFieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setCreateTimeColumnName</span><span class="token punctuation">(</span><span class="token function">getColumnNameByColumnAnno</span><span class="token punctuation">(</span>cjsjFieldNameOptional<span class="token punctuation">,</span> fieldMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> gxsjFieldNameOptional <span class="token operator">=</span> fieldKeys<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fieldKey <span class="token operator">-&gt;</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token constant">GXSJ_COLUMN_NAMES</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>columnName <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>columnName<span class="token punctuation">,</span> fieldKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gxsjFieldNameOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>gxsjFieldName <span class="token operator">-&gt;</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setUpdateTimePropertyName</span><span class="token punctuation">(</span>gxsjFieldName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CUTimeDTO</span><span class="token punctuation">.</span><span class="token function">setUpdateTimeColumnName</span><span class="token punctuation">(</span><span class="token function">getColumnNameByColumnAnno</span><span class="token punctuation">(</span>gxsjFieldNameOptional<span class="token punctuation">,</span> fieldMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">CUTimeDTO</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getColumnNameByColumnAnno</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fieldNameOptional<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Field</span><span class="token punctuation">&gt;</span></span> fieldMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> columnName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fieldNameOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> fieldName <span class="token operator">=</span> fieldNameOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> fieldMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Column</span> column <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Column</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            columnName <span class="token operator">=</span> column<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> columnName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span> <span class="token function">findEntityClazz</span><span class="token punctuation">(</span><span class="token class-name">Class</span> mapperClazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mapperClazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> mapperClazz<span class="token punctuation">.</span><span class="token function">getGenericInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">&gt;</span></span> baseMapperTypeOptional <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>iface <span class="token operator">-&gt;</span> iface <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>iface <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> iface<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>iface <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> iface<span class="token punctuation">.</span><span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">BaseMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>baseMapperTypeOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ParameterizedType</span> baseMapperType <span class="token operator">=</span> baseMapperTypeOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> baseMapperType<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设计的 DTO 用于确定属性对应的创建时间字段属性和更新时间字段属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CUTimeDTO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createTimePropertyName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> updateTimePropertyName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> createTimeColumnName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> updateTimeColumnName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包装对应的 SqlSource 在获取最后的 SQL （<code>SqlSource#getBoundSql</code>）中拼接创建和更新时间脚本。不在具体的 SqlSource 里面完成字段拼接加上预处理字段，是因为 mybatis 支持多种 SqlSource 包含 <code>StaticSqlSource</code>、<code>ProviderSqlSource</code>、<code>RawSqlSource</code>、<code>DynamicSqlSource</code>，且他们可以组合出现，可见还是有一定的复杂度的。所以才选择用包装类完成字段填充。这种是不建议自动填充那种包含不同值的字段的，因为这样会让预处理 SQL 没有发挥作用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillUTimeUpdateSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnValue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span><span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newSql <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replaceIgnoreCase</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token string">"set "</span><span class="token punctuation">,</span> <span class="token string">"set "</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> columnValue <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">,</span> <span class="token string">"sql"</span><span class="token punctuation">,</span> newSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillCUTimeInsertSqlSource</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSource</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SqlSource</span> sqlSource<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> columnValue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">BoundSql</span> <span class="token function">getBoundSql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSource<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> boundSql<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replaceBoundSql</span><span class="token punctuation">(</span><span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newSql <span class="token operator">=</span> sql<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newSql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sql<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">indexOfIgnoreCase</span><span class="token punctuation">(</span>newSql<span class="token punctuation">,</span> <span class="token string">"values"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index1 <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token string">"values"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index1 <span class="token operator">&lt;</span> newSql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> index1 <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index1 <span class="token operator">=</span> index1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> next <span class="token operator">=</span> newSql<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">||</span> next <span class="token operator">==</span> <span class="token char">'\\'</span> <span class="token operator">||</span> next <span class="token operator">==</span> <span class="token char">'n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            index1 <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">indexOfIgnoreCase</span><span class="token punctuation">(</span>newSql<span class="token punctuation">,</span> <span class="token string">"values"</span><span class="token punctuation">,</span> index1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> replace <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>newSql<span class="token punctuation">,</span> index<span class="token punctuation">,</span> index1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newSql <span class="token operator">=</span> newSql<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>replace<span class="token punctuation">,</span> replace <span class="token operator">+</span> columnValue <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>boundSql<span class="token punctuation">,</span> <span class="token string">"sql"</span><span class="token punctuation">,</span> newSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="question-猜测你会有这样的疑问"><a href="#question-猜测你会有这样的疑问" class="headerlink" title=":question: 猜测你会有这样的疑问"></a><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 猜测你会有这样的疑问</h4><p>为什么不让项目直接集成 mybatis-plus 修改 pojo 就能快速解决问题，不用这么复杂。当然我统一这个思路，但这个思路适合于 pojo 少，且使用 <code>@Table</code> 、<code>@Column</code> 等数据库型的注解的项目。否则，在大项目中还是工作量及风险还是比较高。但这不影响我推荐使用 mybatis-plus。</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis-plus </tag>
            
            <tag> 自动填充 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁你续约了吗</title>
      <link href="/2024/01/31/redis-fen-bu-shi-suo-ni-xu-yue-liao-ma/"/>
      <url>/2024/01/31/redis-fen-bu-shi-suo-ni-xu-yue-liao-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-分布式锁你续期了吗？"><a href="#Redis-分布式锁你续期了吗？" class="headerlink" title="Redis 分布式锁你续期了吗？"></a>Redis 分布式锁你续期了吗？</h2><p>服务在集群情况下，线程锁是无法满足服务之间逻辑隔离。分布式锁概念应运而生，它需要具备互斥性、防止死锁、高可用性、可重入性、唯一标识的特点。</p><ul><li><p>互斥性：任意时刻，只能有一个服务才能获取锁。</p></li><li><p>防止死锁：分布式锁应该在服务逻辑运行异常或崩溃时能够自动释放。一般的做法是给锁设定超时时间避免死锁。</p></li><li><p>高可用性：确保锁提供方节点故障时也能正常工作，确保锁的可靠性。</p></li><li><p>可重入性：允许同一个线程或服务在持有锁的情况下多次获取同一个锁，而不会出现死锁或阻塞。</p></li><li><p>唯一标识：分布式锁应该具备唯一的标识。</p></li></ul><p>分布式锁方案大体有几种，使用基于唯一索引的数据库表、zookeeper/etcd、redis。为达到分布式锁的互斥性和防止死锁这两个特性，方案是设定超时时间配合<strong>定时续期</strong>以达到目的。如果你用 Redis 实现分布式锁，请问你项目中 Redis 分布式锁有<strong>定时续期</strong>吗？</p><p>Jedis 主要包含数据结构操作和队列 PUB/SUB 操作。Redisson 组件除此之外还包含分布式锁的实现。Redisson 关于获取锁有六种方式，<code>lock()</code> 、<code>tryLock()</code>、<code>lockInterruptibly()</code> 、<code>tryLock(long waitTime, TimeUnit unit)</code>、 <code>lock(long leaseTime, TimeUnit unit)</code> 、<code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code>。区分点在于 是否等待获取锁、等待获取锁时长，是否有过期、过期时间。好像没有看到续期相关的内容。</p><h4 id="mag-续期藏在细节里"><a href="#mag-续期藏在细节里" class="headerlink" title=":mag: 续期藏在细节里"></a><span class="github-emoji"><span>🔍</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 续期藏在细节里</h4><p>就像老夫老妻一样，<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 爱是藏在细节里，续期藏在锁获取的细节里。</p><blockquote><p><span class="github-emoji"><span>🚦</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 代码是以 redisson-3.18.0 版本为例，估计总体思路差不多。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RedissonLock</span><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryAcquireAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ttlRemainingFuture<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_LONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ttlRemainingFuture <span class="token operator">=</span> <span class="token function">tryLockInnerAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> internalLockLeaseTime<span class="token punctuation">,</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> threadId<span class="token punctuation">,</span> <span class="token class-name">RedisCommands</span><span class="token punctuation">.</span><span class="token constant">EVAL_LONG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> ttlRemainingFuture<span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>ttlRemaining <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// lock acquired</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlRemaining <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                internalLockLeaseTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ttlRemaining<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CompletableFutureWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，没有设置过期时间时，redisson 会使用 <code>internalLockLeaseTime</code> （它指 lock 内置过期时间，lock 对象初始化时从配置类 <code>org.redisson.config.Config#lockWatchdogTimeout</code> 中获取，默认 30 s）作为过期时间来申请分布式锁。第一次申请锁成功后 <code>ttlRemainingFuture.thenApply</code> ，如果自定义过期时间有值，则重新设置 <code>internalLockLeaseTime</code>。没有设置的话，则需要定时续期，保证锁能被本线程一直持有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RedissonBaseLock</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ExpirationEntry</span> entry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpirationEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ExpirationEntry</span> oldEntry <span class="token operator">=</span> <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEntry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 可重入位置，因为不存在获取锁之后，同一线程的并发问题，所以这里使用 LinkedHashMap</span>        oldEntry<span class="token punctuation">.</span><span class="token function">addThreadId</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        entry<span class="token punctuation">.</span><span class="token function">addThreadId</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ExpirationEntry</span> ee <span class="token operator">=</span> <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ee <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Timeout</span> task <span class="token operator">=</span> commandExecutor<span class="token punctuation">.</span><span class="token function">getConnectionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Timeout</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token class-name">ExpirationEntry</span> ent <span class="token operator">=</span> <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Long</span> threadId <span class="token operator">=</span> ent<span class="token punctuation">.</span><span class="token function">getFirstThreadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>threadId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">CompletionStage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> <span class="token function">renewExpirationAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Can't update lock "</span> <span class="token operator">+</span> <span class="token function">getRawName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" expiration"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token constant">EXPIRATION_RENEWAL_MAP</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getEntryName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// reschedule itself</span>                    <span class="token function">renewExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> internalLockLeaseTime <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ee<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单概括，就是未设置过期时间的分布式锁，是以 30s 过期时间先获取分布式锁，程序中使用时间片方式在每 10s (30s * 1/3) 续期。设置过期时间的分布式锁反而不能享受续期。</strong></p><p><span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 本来大家在实战过程中，就是怕锁不释放，基本上都会被建议使用 <code>tryLock(long waitTime, long leaseTime, TimeUnit unit)</code> ，结果只有这种设置 leaseTime 的获取锁没有续期。多少有点被背 (feng) 刺 (ci) <span class="github-emoji"><span>🐝</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。我们需要解决这个问（feng）题（ci），希望在 leaseTime 设置时，也能享受续期功效。</p><h4 id="balance-scale-超时与续期兼得"><a href="#balance-scale-超时与续期兼得" class="headerlink" title=":balance_scale: 超时与续期兼得"></a><span class="github-emoji"><span>⚖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2696.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 超时与续期兼得</h4><p>好在 <code>RedissonBaseLock</code> 中关于续期的方法 <code>scheduleExpirationRenewal</code> 和 <code>cancelExpirationRenewal</code> 都是 <code>protected</code> 修饰符修饰。可以建立 <code>RedissonBaseLock</code> 的包装类，在获取锁和释放锁的时候对 leaseTime 设置的续期补足即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>redisson</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RFuture</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * 分布式锁.&lt;br&gt; * 用装饰者模式给所有 lock 加上时间过期前的续期操作.&lt;br&gt; * redis 作为分布式锁方案一定会有弊端，比如出现哨兵模式的 redis 集群，就可能因为锁信息在主节点同步从节点时出现的主节点中断，导致从节点成为主节点之后 * 无锁信息，导致的其他线程申请到锁，此时就会出现两个线程获取到同一把锁的 ganga 场景.&lt;br&gt; * 请注意合理使用锁，获取锁后一定在 finally 中释放锁，程序运行时间长之后一定会出现内存溢出问题. * * @author liulili * @since 20243-01-19 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RenewalLock</span> <span class="token keyword">implements</span> <span class="token class-name">RLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedissonBaseLock</span> lock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RenewalLock</span><span class="token punctuation">(</span><span class="token class-name">RLock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock <span class="token keyword">instanceof</span> <span class="token class-name">RenewalLock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"lock 本就是续期锁，不需要二次装饰！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lock <span class="token keyword">instanceof</span> <span class="token class-name">RedissonBaseLock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RedissonBaseLock</span><span class="token punctuation">)</span> lock<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"分布式锁续期的功能至少是 RedissonBaseLock 的实例，到 redisson 3.18.0 版本，RedissonMultiLock 是不能被 DistributedLock 装饰的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"renewal_"</span> <span class="token operator">+</span> lock<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">RedissonBaseLock</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"internalLockLeaseTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"RedissonBaseLock 类没有 internalLockLeaseTime 属性，请注意版本"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lock<span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> getLockSuccess <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getLockSuccess <span class="token operator">&amp;&amp;</span> leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> getLockSuccess<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">forceUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">forceUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHeldByThread</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByThread</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isHeldByCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">getHoldCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">remainTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">remainTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 还是默认的超时时间</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">forceUnlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> unlockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">forceUnlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unlockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unlockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> unlockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unlockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unlockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">unlockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> unlockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">unlockAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        unlockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelExpirationRenewal</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unlockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">lockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">lockAsync</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">tryLockAsync</span><span class="token punctuation">(</span><span class="token keyword">long</span> waitTime<span class="token punctuation">,</span> <span class="token keyword">long</span> leaseTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token keyword">long</span> threadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> lockFuture <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLockAsync</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">,</span> leaseTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        lockFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unlockStatus<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaseTime <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">scheduleExpirationRenewal</span><span class="token punctuation">(</span>leaseTime<span class="token punctuation">,</span> threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lockFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHoldCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">getHoldCountAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">isLockedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">isLockedAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">RFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">remainTimeToLiveAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lock<span class="token punctuation">.</span><span class="token function">remainTimeToLiveAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有三个注意点：首先，这个装饰类需要放在 <code>org.redisson</code> 只有这样才能使用 <code>proteced void scheduleExpirationRenewal()</code> 和 <code>protected void cancelExpirationRenewal()</code> 方法。其次，续期依旧是按照 <code>internalLockLeaseTime</code> /3 间隔触发，但因为是申请锁完结之后的续期，所以此时的 <code>internalLockLeaseTime</code> 为第一次申请锁的 <code>leaseTime</code> 。第三，因 Redisson 版本不一样，可能不会有 RedissonBaseLock 基类，你可以升级版本后使用装饰类。</p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
            <tag> redis </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json 工具我应该怎么选？</title>
      <link href="/2023/05/18/json-gong-ju-wo-ying-gai-zen-me-xuan/"/>
      <url>/2023/05/18/json-gong-ju-wo-ying-gai-zen-me-xuan/</url>
      
        <content type="html"><![CDATA[<p>编程多年，其实适合项目/自己/团队才是合适的。JSON 在 B/S 应用下，作为轻量级的数据交换方式。也应运而生不少序列化反序列化的 JSON 工具包。<br>比如，json-lib、fastjson、gson、jackson 等。我用过的，主要是这几个就说说我的选择场景及依据。</p><h3 id="json-lib"><a href="#json-lib" class="headerlink" title="json-lib"></a>json-lib</h3><p>这是我<strong>被迫</strong>使用的 JSON 工具包。不是主动选择，也是因为确实觉得很坑。<strong>首先</strong>，序列化和反序列化耗时很慢。<strong>其次</strong>，<code>JSONObject.getXXX(key)</code> JSONObject<br>的 get 系方法都必须要求 key 必须在 JSON 串中且非空。也就是被使用的 key 都必须是非空值，所以就逼迫设置默认值。但这样可能会导致业务被”逼不得已”的默认值覆盖。<strong>第三</strong>，<code>JSONObject.put(key,value)</code> 方法会针对 value 类型为 String 且符合 JSON 格式时，会将 value 反序列化。这个特性看似很好，其实在特定场景下，给人误导，<br>以为 value 是 JSONObject 结果发现是 String。Oh my god ！！总结，坑比较多，不建议使用。</p><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><p>阿里巴巴出品，使用是很简单，基于类属性 get/set 来序列化和非序列化。包括也支持很多选项 <code>FastJsonConfig</code> 、 <code>SerializerFeature</code>。对研发来说，序列化反序列化使用<br>起来也很简单，性能也偏好。以为应该是很受欢迎，但 github 上 issue 很多。传说中源码写的不好，也没什么注释。所以，不是最受欢迎，在中国很有地位。</p><h3 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h3><p>被 spring-web 用作默认的 <code>application/json</code> 序列化和反序列化 JSON 选型。依赖的 jar 包少，提供扩展选项/高级功能很多。对我而言，相比较 fastjson 而言，使用<br>不方便。对于 String 转 Date 时，必须指定 <code>@JsonProperty(format='xxxx')</code> 格式化字段。</p><h3 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h3><p>google 推出 JSON 工具包，符合 JSON 格式定义，是依据属性进行序列化和反序列化，包含 public、private、protected 修饰字段。转 List、Set 集合类，相比 fastjson 支持<br>的很好。但是性能相比而言会弱一些。</p><h3 id="如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。"><a href="#如果需要功能完善，易上手建议-fastjson-gson。jackson-就结合-spring-web-使用。" class="headerlink" title="如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。"></a><strong>如果需要功能完善，易上手建议 fastjson/gson。jackson 就结合 spring-web 使用。</strong></h3>]]></content>
      
      
      <categories>
          
          <category> 选型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> 选型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-boot-security OAuth2应用实现</title>
      <link href="/2023/04/10/spring-boot-security-oauth2-ying-yong-shi-xian/"/>
      <url>/2023/04/10/spring-boot-security-oauth2-ying-yong-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="mouse-背景"><a href="#mouse-背景" class="headerlink" title=":mouse: 背景"></a><span class="github-emoji"><span>🐭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>项目上一直使用 CAS + 应用 session + nginx IP hash 组合方式实现伪集群部署。但这种方式也有一定的缺点，请求不够平均，应用使用异步处理方式，还必须将结果返回给发起的应用，否则前端无法拿到结果。这些都是 IP 绑定固定应用导致的。2023 年为止，在网上搜索到主要解决方式有两个: 1. session 共享（需要依赖 redis）2. 签发 JWT 授权。不想引入 redis，所以选择签发 JWT 授权。技术选型上使用 <code>spring-scurity</code> + <code>CAS</code> + <code>oauth2</code> 组合方式。</p><h2 id="tiger-应用实现"><a href="#tiger-应用实现" class="headerlink" title=":tiger: 应用实现"></a><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 应用实现</h2><p>使用 <code>spring-security</code> + <code>CAS</code> + <code>Oauth2</code> 组合方式，spring-boot 中提供了很多 starter 可以使用。以下使用 maven 仓库管理为例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- spring-security 基础 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- CAS 相关 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-cas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- security-jwt相关 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-oauth2-jose<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- JWT 签发 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-security-oauth2-resource-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>spring-boot-starter-security</code>，是 <code>spring-security</code> 的基础包，主要包含 <code>spring-security-config</code> 和 <code>spring-security-web</code></li><li><code>spring-security-cas</code>，是 <code>spring-security</code> 的 CAS 相关，包含 CAS validation 及验证通过或不通过的处理</li><li><code>spring-security-oauth2-jose</code>，是 <code>spring-security</code> 的 token 验证相关</li><li><code>spring-security-oauth2-resource-server</code>，是 <code>spring-security</code> 的 token 签发及 web token 验证。</li></ul><h3 id="elephant-怎么集成"><a href="#elephant-怎么集成" class="headerlink" title=":elephant: 怎么集成"></a><span class="github-emoji"><span>🐘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 怎么集成</h3><p>集成之前，建议先看看<a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html"> spring-security 的架构</a>，<span class="github-emoji"><span>😸</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 很容易理解。当然集成一个组件，需要有集成思路或步骤，</p><h4 id="PART1-选定用户校验方式"><a href="#PART1-选定用户校验方式" class="headerlink" title="PART1. 选定用户校验方式"></a>PART1. 选定用户校验方式</h4><p>spring-security 目前有支持的集中方式，</p><ul><li>伪验证（<code>AbstractPreAuthenticatedProcessingFilter</code>）其中假设委托人已经由外部系统进行了身份验证，实现类完成简单的校验</li><li>CAS 验证（<code>CasAuthenticationFilter</code>）</li><li>本地登录验证（<code>UsernamePasswordAuthenticationFilter</code>）应用本地数据库验证，非独立验证服务</li><li>token 验证（<code>BearerTokenAuthenticationFilter</code>）OAuth2 JWT 签发的 token 应用服务验证</li><li>其他验证（<code>AbstractAuthenticationProcessingFilter</code>）实现此类来完成定制验证，比如约定好请求授权的验证方式。</li></ul><p>当然，此处只是选择 Filter 并非真正验证的位置。所以，spring-security 支持的 CAS 或  UsernamePassword 验证方式也是把你的验证器默认设置了。</p><h4 id="PART2-组装待校验元素（principal-credentials）"><a href="#PART2-组装待校验元素（principal-credentials）" class="headerlink" title="PART2. 组装待校验元素（principal/credentials）"></a>PART2. 组装待校验元素（principal/credentials）</h4><p>principal，被验证主体。credentials，被验证证书，也可以是密码。</p><p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装待验证元素，有默认实现。就拿 CAS 来比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CASAuthenticationFilter</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token comment">//,,,</span>  <span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">.</span><span class="token function">unauthenticated</span><span class="token punctuation">(</span>      username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//,,,</span><span class="token punctuation">}</span><span class="token comment">// UsernamePasswordAuthenticationToken</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAuthenticationToken</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span><span class="token class-name">Object</span> principal<span class="token punctuation">,</span> <span class="token class-name">Object</span> credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//,,,,</span><span class="token keyword">this</span><span class="token punctuation">.</span>principal <span class="token operator">=</span> principal<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>credentials <span class="token operator">=</span> credentials<span class="token punctuation">;</span><span class="token function">setAuthenticated</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是使用 <code>AbstractPreAuthenticatedProcessingFilter</code> 时，则需要覆盖方法 <code>getPreAuthenticatedPrincipal()</code> 和 <code>getPreAuthenticatedPrincipal()</code> 来确定主体和证书。</p><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果是使用 <code>BearerTokenAuthenticationFilter</code> 时，默认是从请求中获取 Authorization header 值。我在实现时使用 cookie 方式，只需要实现 <code>BearerTokenResolver</code> 接口。</p><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果是使用 <code>AbstractAuthenticationProcessingFilter</code> 时，就自己在 <code>attemptAuthentication()</code> 方法中实现。</p><h4 id="PART3-组装授权令牌"><a href="#PART3-组装授权令牌" class="headerlink" title="PART3. 组装授权令牌"></a>PART3. 组装授权令牌</h4><p>如果是使用 CAS 或 UsernamePassword 验证，可以跳过这里，因为组装令牌的事情，Filter 里已经实现。就拿 CAS 来比如</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CASAuthenticationFilter</span><span class="token keyword">public</span> <span class="token class-name">Authentication</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span><span class="token keyword">boolean</span> serviceTicketRequest <span class="token operator">=</span> <span class="token function">serviceTicketRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> username <span class="token operator">=</span> serviceTicketRequest <span class="token operator">?</span> <span class="token constant">CAS_STATEFUL_IDENTIFIER</span> <span class="token operator">:</span> <span class="token constant">CAS_STATELESS_IDENTIFIER</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">obtainArtifact</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token class-name">UsernamePasswordAuthenticationToken</span> authRequest <span class="token operator">=</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">.</span><span class="token function">unauthenticated</span><span class="token punctuation">(</span>      username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font color="blue"><strong>在令牌未被验证之前，令牌的初始化必须指定令牌并未完成验证。即 authenticated 属性为 false 。</strong></font></p><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果是其他验证方式，则需要自己组装校验令牌，继承 <code>AbstractAuthenticationToken</code> 类。</p><h4 id="PART4-验证及验证后用户权限信息组装"><a href="#PART4-验证及验证后用户权限信息组装" class="headerlink" title="PART4. 验证及验证后用户权限信息组装"></a>PART4. 验证及验证后用户权限信息组装</h4><p>如果是使用 CAS 验证，需要选择一下 <code>AbstractCasProtocolUrlBasedTicketValidator</code> 验证器。当然你也可以实现此 abstract 类，完成 ticket 验证。验证器的调用方是 <code>CasAuthenticationProvider</code>。为什么在此介绍 <code>CasAuthenticationProvider</code> ？<span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 因为基本上所有的验证都一定是实现 <code>AuthenticationProvider</code> 接口。<span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 用户权限信息的组装，是实现 <code>AuthenticationUserDetailsService&lt;T extends Authentication&gt;</code> 接口，从缓存或是数据库中查询用户或权限点信息组装 UserDetails。</p><p><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font color="blue"><strong>验证通过后，可以通过在 Controller 方法上使用 <code>@AuthenticationPrincipal</code>&nbsp;注解，或请求线程里 <code>SecurityContextHolder.getContext().getAuthentication()</code>来获取用户授权信息。<code>@AuthenticationPrincipal</code>&nbsp;注解对应 UserDetails 对象，<code>@CurrentSecurityContext</code>&nbsp;注解对应 SecurityContext 对象。</strong></font></p><h4 id="PART5-验证成功或失败的处理实现"><a href="#PART5-验证成功或失败的处理实现" class="headerlink" title="PART5. 验证成功或失败的处理实现"></a>PART5. 验证成功或失败的处理实现</h4><p>验证成功或失败后的处理方式，一般有几种，重定向首页或登录页面，注册或撤销 JWT token，放行后面的 filter 或 Controller。<span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 而 JWT token 签发注销的功能，只需实现 <code>AuthenticationSuccessHandler</code> 和 <code>AuthenticationFailureHandler</code> 两个接口。</p><h4 id="PART6-以上内容配置组装"><a href="#PART6-以上内容配置组装" class="headerlink" title="PART6. 以上内容配置组装"></a>PART6. 以上内容配置组装</h4><p><span class="github-emoji"><span>🎃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 配置组装通过继承 <code>WebSecurityConfigurerAdapter</code> 类，覆盖 <code>init(WebSecurity builder)</code> 方法完成 Filter、provider、handler 等注入。此处不多说，看代码应该就懂了。</p><p>以下以 CAS + OAuth2 组合方式的完整代码片段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TuscCasTicketValidator</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractCasProtocolUrlBasedTicketValidator</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">TuscCasTicketValidator</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> casServerUrlPrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设定 CAS server</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>casServerUrlPrefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getUrlSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// 验证路径</span>      <span class="token keyword">return</span> <span class="token string">"validate"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">Assertion</span> <span class="token function">parseResponseFromServer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> response<span class="token punctuation">)</span>      <span class="token keyword">throws</span> <span class="token class-name">TicketValidationException</span> <span class="token punctuation">{</span>        <span class="token comment">// 判定验证通过成果及结果反馈</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// bearer 验证需要</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookieBearerTokenResolver</span> <span class="token keyword">implements</span> <span class="token class-name">BearerTokenResolver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COOKIE_NAME_BEARER</span> <span class="token operator">=</span> <span class="token string">"bearer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>cookie <span class="token operator">-&gt;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsAnyIgnoreCase</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">COOKIE_NAME_BEARER</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Cookie</span><span class="token operator">::</span><span class="token function">getValue</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MakeTokenHandler</span> <span class="token keyword">extends</span> <span class="token class-name">FilterAuthSuccessHandler</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>    <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> jwtEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>      <span class="token class-name">JwtEncoderParameters</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>jwsHeader<span class="token punctuation">,</span> jwtClaimsSetBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>cookieTimeoutSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>cookie<span class="token punctuation">.</span><span class="token function">setHttpOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAuthFailHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationFailureHandler</span><span class="token punctuation">,</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>    <span class="token class-name">AuthenticationException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">InvalidBearerTokenException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/plain;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"登录已过期或被推出，需要重新登录验证！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 记住登出或访问前的地址</span>    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"登录页面地址"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 重新签发 token</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtRenewFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>                                  <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                                  <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span>     <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//...</span>    <span class="token class-name">String</span> bearerToken <span class="token operator">=</span> bearerTokenResolver<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Jwt</span> jwt <span class="token operator">=</span> jwtDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>bearerToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Instant</span> expiresAt <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getExpiresAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>expiresAt<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> ticket <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getClaimAsString</span><span class="token punctuation">(</span><span class="token string">"st"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                casTicketValidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>ticket<span class="token punctuation">,</span> serviceUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">renewJwt</span><span class="token punctuation">(</span>jwt<span class="token punctuation">,</span> response<span class="token punctuation">,</span> jwtEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TicketValidationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token class-name">LoginBaseConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">HttpSecurity</span> httpSecurity<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationManager</span> authenticationManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">MakeTokenHandler</span> makeTokenHandler    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">DefaultAuthFailHandler</span> defaultAuthFailHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationDetailsSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">,</span> <span class="token class-name">WebAuthenticationDetails</span><span class="token punctuation">&gt;</span></span> webAuthenticationDetailsSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxxx}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> applicationServerUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${xxxx}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token class-name">CASServerUrl</span><span class="token punctuation">;</span>    <span class="token comment">// 12h</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${login.jwt.cookieTimeoutSecond:43200}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cookieTimeoutSecond<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${login.jwt.casDurationSecond:600}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> casDurationSecond<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">WebSecurity</span> builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">BearerTokenAuthenticationFilter</span> bearerTokenFilter <span class="token operator">=</span>           <span class="token keyword">new</span> <span class="token class-name">BearerTokenAuthenticationFilter</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>      bearerTokenFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationDetailsSource</span><span class="token punctuation">(</span>        dzdaWebAuthenticationDetailsSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BearerTokenResolver</span> bearerTokenResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CookieBearerTokenResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bearerTokenFilter<span class="token punctuation">.</span><span class="token function">setBearerTokenResolver</span><span class="token punctuation">(</span>makeTokenHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        bearerTokenFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationFailureHandler</span><span class="token punctuation">(</span>defaultAuthFailHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractAuthenticationProcessingFilter</span> casAuthenticationFilter          <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationFailureHandler</span><span class="token punctuation">(</span>defaultAuthFailHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setFilterProcessesUrl</span><span class="token punctuation">(</span><span class="token string">"/login/cas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationDetailsSource</span><span class="token punctuation">(</span>        dzdaWebAuthenticationDetailsSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      casAuthenticationFilter<span class="token punctuation">.</span><span class="token function">setAuthenticationSuccessHandler</span><span class="token punctuation">(</span>        dzdaCasAuthenticationSuccessHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JwtRenewFilter</span> jwtRenewFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtRenewFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>          <span class="token function">setBearerTokenResolver</span><span class="token punctuation">(</span>bearerTokenResolver<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCasTicketValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TuscCasTicketValidator</span><span class="token punctuation">(</span>casServerUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setServiceUrl</span><span class="token punctuation">(</span>applicationServerUrl<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCookieTimeoutSecond</span><span class="token punctuation">(</span>cookieTimeoutSecond<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setCasDurationSecond</span><span class="token punctuation">(</span>casDurationSecond<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">setLocalDurationSecond</span><span class="token punctuation">(</span>localDurationSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpSecurity<span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span>authenticationManager<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>casAuthenticationFilter<span class="token punctuation">,</span>                                  <span class="token class-name">X509AuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtRenewFilter<span class="token punctuation">,</span> <span class="token class-name">BearerTokenAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>bearerTokenFilter<span class="token punctuation">,</span> <span class="token class-name">X509AuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeHttpRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">deleteCookies</span><span class="token punctuation">(</span><span class="token string">"bearer"</span><span class="token punctuation">,</span> <span class="token string">"JESSIONID"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">invalidateHttpSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"logoutroute"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultAuthFailHandler</span><span class="token punctuation">(</span>                  applicationServerUrl<span class="token punctuation">,</span> casServerUrl<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">addSecurityFilterChainBuilder</span><span class="token punctuation">(</span>httpSecurity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsConfigurationSource</span> <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CorsConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedHeaders</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationProvider</span> <span class="token function">casAuthenticationProvider</span><span class="token punctuation">(</span><span class="token class-name">LoginServiceImpl</span> loginService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CasAuthenticationProvider</span> casAuthenticationProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setAuthenticationUserDetailsService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XXXCasUserDetailsService</span><span class="token punctuation">(</span>loginService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setTicketValidator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TuscCasTicketValidator</span><span class="token punctuation">(</span>ssoUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServiceProperties</span> serviceProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceProperties<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span>applicationServerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setServiceProperties</span><span class="token punctuation">(</span>serviceProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        casAuthenticationProvider<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token string">"casAuthenticationProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> casAuthenticationProvider<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="github-emoji"><span>🔆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <font color="blue"><strong>需要明确 Filter 的先后顺序，顺序不对可能会造成验证 bug，比如 renewFilter 应该在 BearerTokenAuthenticationFilter 之前。否则 renewFilter 就没有意义了。</strong></font></p>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-security </tag>
            
            <tag> cas </tag>
            
            <tag> oauth2 </tag>
            
            <tag> pre-security </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-security中遇见的耗时小坑</title>
      <link href="/2023/04/10/spring-security-zhong-yu-jian-de-hao-shi-xiao-keng/"/>
      <url>/2023/04/10/spring-security-zhong-yu-jian-de-hao-shi-xiao-keng/</url>
      
        <content type="html"><![CDATA[<h2 id="pear-背景"><a href="#pear-背景" class="headerlink" title=":pear: 背景"></a><span class="github-emoji"><span>🍐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>客户现场运维同事反馈某系统输入正确的用户名、密码后，无法进入系统首页。地址栏中地址却在 SSO server 和系统地址之间来回跳转，系统日志中也没有相关的日志提供线索。听到这里就晓得，不是一个运维同学在白盒的情况下，能解决的问题了。</p><h2 id="orange-问题跟进"><a href="#orange-问题跟进" class="headerlink" title=":orange: 问题跟进"></a><span class="github-emoji"><span>🍊</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题跟进</h2><h3 id="one-明确运维说『来回跳转』到底涉及那些地址"><a href="#one-明确运维说『来回跳转』到底涉及那些地址" class="headerlink" title=":one: 明确运维说『来回跳转』到底涉及那些地址"></a><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 明确运维说『来回跳转』到底涉及那些地址</h3><p>让运维同学 F12 打开 chrome 浏览器开发者模式，切换 Network 页签勾选 <code>Preserve log</code>（保留请求日志），就能记录浏览器『来回跳转』网络请求。</p><pre class="line-numbers language-none"><code class="language-none">${应用}/login/cas?st=xxxxx${SSO-server}/login?service=encodeURIComponent(${应用}/login/cas)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就是这两个地址『来回跳转』。从这里能得做出如下推断:</p><ol><li>SSO server 服务依据 cookie 中的 TGT 验证是通过的。否则，此处展示的就是登录页面。</li><li>应用 <code>/login/cas</code> 请求，通过后台调用 SSO server 的 validate 接口完成 st（<code>service ticket</code>）验证，显然这里是不通过的。否则，此处展示的就是应用首页面。</li></ol><p>总结，说明问题出在应用 <code>/login/cas</code> 请求认证中，虽然不敢相信但『事实胜于雄辩』。</p><h3 id="two-在应用后端找找原因"><a href="#two-在应用后端找找原因" class="headerlink" title=":two: 在应用后端找找原因"></a><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 在应用后端找找原因</h3><p>为什么上面说 <code>/login/cas</code> 不敢相信有问题，因为应用后端使用 <code>spring-security-cas</code> 组件，而这个组件怕是有成千上万的项目使用已经是很优秀的组件，难道被我碰见开源的 BUG 了？</p><p><code>spring-security-cas</code> 组件，有几个重要组成类：</p><ul><li><code>CasAuthenticationFilter</code>：<code>CAS</code> 验证过滤器，<code>/login/cas</code> 请求验证入口。其中， <code>attemptAuthentication()</code> 其中包含验证方法 ，验证不通过则抛出 <code>AuthenticationException</code>。<code>successfulAuthentication</code> 则是验证通过后执行逻辑，可以是重定向到首页，或是继续访问后续逻辑。<code>unsuccessfulAuthentication</code> 则是验证失败后执行逻辑，是重定向到 <code>/login</code> 登录请求。</li><li><code>CasAuthenticationProvider</code>：真正的 CAS 验证入口，主要完成 CAS 验证和用户权限信息组装。</li><li><code>AbstractCasProtocolUrlBasedTicketValidator</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成调用 SSO server validate 接口验证<code>serviceTicket</code>。</li><li><code>AbstractCasAssertionUserDetailsService</code>：被 <code>CasAuthenticationProvider</code> 类调用，完成用户及权限信息的装载。</li></ul><p>关键代码如下，其中会导致进入 <code>unsuccessfulAuthentication()</code> 逻辑的，是抛出 <code>TicketValidationException</code> 异常。那也就是 <code>ticketValidator.validate()</code> 、 <code>authenticationUserDetailsService.loadUserDetails()</code> 或 <code>userDetailsChecker.check()</code> 逻辑点抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// CasAuthenticationProvider</span><span class="token keyword">private</span> <span class="token class-name">CasAuthenticationToken</span> <span class="token function">authenticateNow</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Assertion</span> assertion <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ticketValidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getServiceUrl</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> <span class="token function">loadUserByAssertion</span><span class="token punctuation">(</span>assertion<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsChecker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CasAuthenticationToken</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span> userDetails<span class="token punctuation">,</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authoritiesMapper<span class="token punctuation">.</span><span class="token function">mapAuthorities</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">,</span> assertion<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TicketValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>getMessage<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByAssertion</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Assertion</span> assertion<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">CasAssertionAuthenticationToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CasAssertionAuthenticationToken</span><span class="token punctuation">(</span>assertion<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationUserDetailsService<span class="token punctuation">.</span><span class="token function">loadUserDetails</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而后，现场通过 <code>arthas</code> 工具代码 <code>watch</code> 命令，监听代码明确异常抛出位置。最后，是在 <code>authenticationUserDetailsService.loadUserDetails()</code> 应用自己实现类上抛出了  <code>UsernameNotFoundException</code> 异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserDetails</span><span class="token punctuation">(</span><span class="token class-name">CasAssertionAuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attributes <span class="token operator">=</span> <span class="token function">getPrincipalAttributes</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MapUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} 没有额外的元数据"</span><span class="token punctuation">,</span> token<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"没有额外的元数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> loginId <span class="token operator">=</span> <span class="token function">getLoginId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>loginId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"{} 没有登录标识"</span><span class="token punctuation">,</span> loginId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s没有登录标识"</span><span class="token punctuation">,</span> loginId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> corpId <span class="token operator">=</span> <span class="token function">getCorpId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDO</span> userDO <span class="token operator">=</span> <span class="token function">loadUserDO</span><span class="token punctuation">(</span>loginId<span class="token punctuation">,</span> corpId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> grantedAuthorities <span class="token operator">=</span> <span class="token function">getDefaultUserAuthorities</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonUserDetails</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> grantedAuthorities<span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="three-到底是为什么有异常没有日志输出呢？"><a href="#three-到底是为什么有异常没有日志输出呢？" class="headerlink" title=":three: 到底是为什么有异常没有日志输出呢？"></a><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 到底是为什么有异常没有日志输出呢？</h3><p>最终，还是要回到文首『破』代码有异常，日志文件却无记录问题。回头细看 <code>AbstractAuthenticationProcessingFilter.unsuccessfulAuthentication()</code> 方法，异常日志打印居然是  trace 级别，现场日志级别配置的 error 级别，故代码有异常，日志文件却无记录问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">clearContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to process authentication request"</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Cleared SecurityContextHolder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Handling authentication failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rememberMeServices<span class="token punctuation">.</span><span class="token function">loginFail</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>failureHandler<span class="token punctuation">.</span><span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="banana-未提及的基础知识"><a href="#banana-未提及的基础知识" class="headerlink" title=":banana: 未提及的基础知识"></a><span class="github-emoji"><span>🍌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 未提及的基础知识</h3><ul><li><a href="https://apereo.github.io/cas/6.6.x/index.html">CAS 官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-security </tag>
            
            <tag> cas </tag>
            
            <tag> relogin </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm-link VUEX watch 怎么不生效</title>
      <link href="/2023/04/02/npm-link-vuex-watch-zen-me-bu-sheng-xiao/"/>
      <url>/2023/04/02/npm-link-vuex-watch-zen-me-bu-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<h2 id="cat-背景"><a href="#cat-背景" class="headerlink" title=":cat: 背景"></a><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p>前端项目 <code>package.json</code> 相当于后端 maven 项目 pom.xml 文件管理项目组件依赖。需要走 <code>npm install --save-dev xxxx</code> 引入方式。<br>对于项目中存在多项目共用的前端组件开发，不希望每次修改以发布版本再 <code>npm install</code> 下载包调试。<br>可以选用 <a href="https://docs.npmjs.com/cli/v9/commands/npm-link/">npm-link 方式</a> 将前端组件 link 到场景 UI 中完成开发/联调/bug 修改工作。<br>最近前端同学发现，npm-link 方式引入的前端组件中引入 VUEX，且对 store 属性 watch 事件是不会生效。<br>个人觉得不应该，npm-link 就简单的将前端组件 link 到 UI，可以说是<strong>原封</strong>不动，包括 <code>node_modules</code>（最后发现也坏在此处）。<br>搜索 google 和百度都没有有效的帖子。</p><h2 id="tiger-问题跟进"><a href="#tiger-问题跟进" class="headerlink" title=":tiger: 问题跟进"></a><span class="github-emoji"><span>🐯</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 问题跟进</h2><h3 id="one-搞懂-VUEX-store-的-watch-原理"><a href="#one-搞懂-VUEX-store-的-watch-原理" class="headerlink" title=":one: 搞懂 VUEX store 的 watch 原理"></a><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 搞懂 VUEX store 的 watch 原理</h3><p><strong>store watch 的初始化</strong></p><p><code>vue</code> 初始化时，会调用 <code>initState</code> 其中，会针对本 <code>vue</code> 的 watch 完成 <code>initWatch</code> 初始化。其中初始化过程中会调用 <code>Vue.prototype.$watch</code> (注意，此处初始化用到的还是 vue 原型方法 $watch) 其中会触发一次 <code>watch handler</code> 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$watch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token string">"callback for immediate watcher \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">;</span>      <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">invokeWithErrorHandling</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">[</span>watcher<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">unwatchFn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>new Watcher</code> 对象第一次获取 <code>watcher.value</code> 时，触发 <code>watcher</code> 对象的 Dep 依赖。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Watcher</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">Watcher</span> <span class="token punctuation">(</span><span class="token parameter">vm<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">,</span>  cb<span class="token punctuation">,</span>  options<span class="token punctuation">,</span>  isRenderWatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 隐藏不需要关注的代码</span>  <span class="token comment">// parse expression for getter</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> noop<span class="token punctuation">;</span>    <span class="token comment">// 隐藏不需要关注的代码</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy    <span class="token operator">?</span> <span class="token keyword">undefined</span>    <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 指定 Dep.target 为 watcher</span>  <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> value<span class="token punctuation">;</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"getter for watcher \""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> e    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 退出 Dep.target 的指向  </span>    <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 触发真实 get 时，完成了 watcher 的 Dep 依赖</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 忽略 set</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>                childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 完成 Dep.target 添加依赖，此时的 Dep.target 是 watther 本身。而 this 为 store 的 dep 对象。</span><span class="token class-name">Dep</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">depend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">depend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// watcher 完成 addDep时，除了给自身 depId和 deps 加上 store dep对象，同样把自身watcher作为 store dep 的子关联</span><span class="token class-name">Watcher</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addDep</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">addDep</span> <span class="token punctuation">(</span><span class="token parameter">dep</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Dep.prototype.depend</code> 完成调用时，store watcher 已经完成与 store 的 dep 对象的绑定过程。以上 <code>store watch init</code> 的链路如下，</p><pre class="line-numbers language-none"><code class="language-none">depend (vue.common.dev.js:726)reactiveGetter (vue.common.dev.js:1038)prototypeAccessors$1.state.get (vuex.esm.js:438)（匿名） (vue.common.dev.js:514)get (vue.common.dev.js:4490)Watcher (vue.common.dev.js:4479)Vue.$watch (vue.common.dev.js:4953)createWatcher (vue.common.dev.js:4913)initWatch (vue.common.dev.js:4895)initState (vue.common.dev.js:4656)Vue._init (vue.common.dev.js:5010)VueComponent (vue.common.dev.js:5157)createComponentInstanceForVnode (vue.common.dev.js:3307)init (vue.common.dev.js:3136)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>store watch 的触发</strong></p><p><code>this.$store.commit('xxx', xxxx)</code> 触发时，在改值的同事会触发本 store Dep 的 notify （通知）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 忽略 get</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> <span class="token function">getter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">:</span> val<span class="token punctuation">;</span>        <span class="token comment">/* eslint-disable no-self-compare */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment">/* eslint-enable no-self-compare */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// #7981: for accessor properties without setter</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            val <span class="token operator">=</span> newVal<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 触发通知</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Dep</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">notify</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 忽略不重要代码</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// watcher update</span>    subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>notify</code> 的中遍历 Dep 的 subs 并更新，此处回想 watcher 初始化时 <code>watcher#addDep</code> 可见 subs 是包含 watcher 的，所以 store 属性变化也就能通知到 watcher 了。<code>store watch notify</code> 的链路如下，</p><pre class="line-numbers language-none"><code class="language-none">handler (list_left.vue:411)invokeWithErrorHandling (vue.common.dev.js:1868)run (vue.common.dev.js:4579)flushSchedulerQueue (vue.common.dev.js:4323)（匿名） (vue.common.dev.js:1994)flushCallbacks (vue.common.dev.js:1920)Promise.then（异步）timerFunc (vue.common.dev.js:1947)nextTick (vue.common.dev.js:2004)queueWatcher (vue.common.dev.js:4415)update (vue.common.dev.js:4555)notify (vue.common.dev.js:741)reactiveSetter (vue.common.dev.js:1066)proxySetter (vue.common.dev.js:4639)changeAjlb (nav.vue:431)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上，<strong>watcher init</strong> 和 <strong>watcher 触发</strong> 总结来说就是这个图。</p><p><img src="/images/2023/npm_link_vuex_watch/link.png"></p><h3 id="two-为啥-npm-link-不能触发-store-watch"><a href="#two-为啥-npm-link-不能触发-store-watch" class="headerlink" title=":two: 为啥 npm-link 不能触发 store watch"></a><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 为啥 npm-link 不能触发 store watch</h3><p>搞懂了，store watcher 这摊子事情，排查就相对简单了。**抓住 1 个位置即可，在 <code>initWatcher</code> 的时候是否完成了 <code>Watcher#addDep</code>。<br>** 结果发现，在 <code>Watcher.prototype.get</code>方法中 <code>pushTarget(this)</code>  Dep 指向 <code>webpack://${web_app}/./node_nodules/vue/dist/vue,common.dev.js</code>。<br>而在 <code>Object.defineProperty#get</code> 方法中 <code>Dep.target</code> 代码 Dep 指向<br><code>webpack://${web_app}/${web_component}/node_modules/vue/dist/vue.common.dev.js</code>。<br>摆明 Dep 已经不是原来的 Dep 了，导致 store Dep 与 watcher 没加成，导致 store watcher 不被触发。</p><p><strong>此时，我回想幸好是个女生，不然我就去楼下抽根烟了。这个后端 jar 包冲突可太像了。</strong></p><h3 id="three-如何解决问题"><a href="#three-如何解决问题" class="headerlink" title=":three: 如何解决问题"></a><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如何解决问题</h3><p>在场景层将 vue 定义成 window 全局对象。在组件内使用 <code>window.Vue</code> 装载  vuex。自此，问题终结。修改方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在前端应用入口文件中</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>Vue <span class="token operator">=</span> vue<span class="token punctuation">;</span>vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在被引用的组件入口文件中</span><span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rabbit-总结"><a href="#rabbit-总结" class="headerlink" title=":rabbit: 总结"></a><span class="github-emoji"><span>🐰</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 总结</h2><ol><li>npm-link 固然解决了不用老改组件版本号调试的问题，但因为 npm-link 的组件会使用自身的 node_modules 导致，部分原本期望与场景 ui 共享的对象可能不共享。</li><li>前端代码排查确是不如后端代码排查方便，啥 <code>console.warn</code> 都么得耗时长。</li></ol><h2 id="sheep-附件"><a href="#sheep-附件" class="headerlink" title=":sheep: 附件"></a><span class="github-emoji"><span>🐑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 附件</h2><ul><li><a href="https://segmentfault.com/a/1190000016208088">Vue源码解读之Dep,Observer和Watcher</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm-link </tag>
            
            <tag> code </tag>
            
            <tag> npm </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab 上和项目大仓库说再见</title>
      <link href="/2023/03/27/gitlab-shang-he-xiang-mu-da-cang-ku-shuo-zai-jian/"/>
      <url>/2023/03/27/gitlab-shang-he-xiang-mu-da-cang-ku-shuo-zai-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="cat-背景"><a href="#cat-背景" class="headerlink" title=":cat: 背景"></a><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 背景</h2><p><code>git clone</code> 项目耗时很长。原因，网速慢或是代码仓库文件很大(n+ G)。本篇文章就讲述如何给 <code>gitlab</code> 代码仓库减负。</p><h3 id="dog-基础知识"><a href="#dog-基础知识" class="headerlink" title=":dog: 基础知识"></a><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 基础知识</h3><p>项目在 gitlab 中显示的仓库大小 = 项目文件总大小 + <code>.git</code> （隐藏）目录下文件大小。请认真关注你项目目录文件大小（windows 可以用 <a href="https://www.jam-software.com/treesize_free">treesize free</a> / <a href="http://www.uderzo.it/main_products/space_sniffer/download_alt.html">SpaceSniffer</a> 工具，linux 可以用命令 <code>du -h –max-depth=1 *</code>，mac 命令 <code>du -h -d 1 *</code> ），一般 <code>.git</code> 目录下文件大小 &gt;= 项目文件大小。意味着，项目整体下载空间占用 &gt;= 2 * 项目文件大小。所以，如果项目中包含比较大的文件，例如视频，高清照片等，把 gitlab 当做了<strong>共享备份存储空间</strong>是项目文件大的罪魁祸手。所以，项目初期代码一定和需求文档做剥离，除非你的项目足够的小。</p><h3 id="fish-拯救-git-仓库"><a href="#fish-拯救-git-仓库" class="headerlink" title=":fish: 拯救 git 仓库"></a><span class="github-emoji"><span>🐟</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 拯救 git 仓库</h3><p>对于需求文档类项目而言，建议用 <code>git lfs</code> 做大文件管理（此处 <code>git lfs</code> 不做过多介绍，请点击<a href="https://git-lfs.github.com/">链接</a>了解）。请多想想后面加入的需求人，给他们的加入减少一些绊脚石。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 仅使用几次，过一个月之后基本不翻的东西、无需版本管理、内容超过 100 MB 的视频，请慎重放入 git 仓库</p></blockquote><h3 id="whale-分析-git-大仓库"><a href="#whale-分析-git-大仓库" class="headerlink" title=":whale: 分析 git 大仓库"></a><span class="github-emoji"><span>🐳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 分析 git 大仓库</h3><ul><li><p>windows 上使用 <code>TreeSize Free</code>  看看文件大小占比分布。发现，项目本身文件大小大约 900 MB ，<code>.git</code> 目录吃掉 2.6 GB。原因，其实上面基础知识算是解答了一部分，感兴趣的同学可以参考附件<strong>git 原理</strong>找答案。</p><p><img src="/images/2023/gitlab_bigcodes/directory_image.png"></p></li><li><p>使用 <code>git verify-pack</code>  命令运行  <code>git verify-pack -v .git/objects/pack/pack-f0fa1a09cd9ebf8874e4ecafa9e56be7816097de.idx|sort -k 3 -n| tail -10</code> ，查找出文件大小在前 10 的文件 hash 标识。注意，windows 上请使用 <code>git Bash Here </code> 运行。</p><p><img src="/images/2023/gitlab_bigcodes/git_xpack.png"></p></li><li><p>使用命令 <code>git rev-list</code> 运行 <code>git rev-list --objects --all|grep  hashId </code> 定位大文件路径。此处，处理文件大小超过 100 MB。</p><p><img src="/images/2023/gitlab_bigcodes/directory_file.png"></p></li><li><p>按照路径和 <code>git log</code> 查找提交人，确定文件是否存在，且是否需要存在。确定需要清理的为 <code>xxxx.asf</code> 和 <code>xxx.asf</code> 两个文件。已经删除的文件，却在日志里能搜索出来，原因是防止你执行 <code>git revert</code> 还原到删除前的 commitId 版本。所以，清理原则就是需要<strong>明确</strong>哪些文件要删除，没有机会还原的话，就删除吧。</p><blockquote><p><span class="github-emoji"><span>💡</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 有重命名/移动目录需求，请使用 <code>git mv</code>  命令，而达到目录变更及命名功能。不要使用 <code>git mv</code> 和 <code>git add</code> 的方式，完成文件重命名或移动目录。这样会造成有删除的用不到的记录。</p></blockquote></li></ul><h2 id="dolphin-如何清理"><a href="#dolphin-如何清理" class="headerlink" title=":dolphin: 如何清理"></a><span class="github-emoji"><span>🐬</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如何清理</h2><blockquote><p>在清理之前，建议所有人的分支都 push 到远端。否则，其他人的每次的 push 都会让你的清理都需要重新来一次。</p></blockquote><p>目前，主要有两种方法：</p><ul><li><p>git 原生支持的 <code>filter-branch</code> 分支文件，命令 <code>git filter-branch --force --tree-filter 'rm -f path/to/big_file.mpg' HEAD</code> 。（不推荐。对于超多 commit 的项目，<code>filter-branch</code> 慢的怀疑人生，小编就是从 <code>git filter-branch</code> 放弃，转投 <code>BFG</code>）</p></li><li><p><code>BFG</code> 工具</p><ul><li><p>执行命令 <code>git clone --mirror git-repository-url</code>  clone git 仓库</p></li><li><p>执行命令 <code>java -jar bfg.jar --massive-non-file-objects-sized-up-to 100M --delete-files '{xxx.asf,xxx.asf}' thunisoft-mvd.git</code>。</p><blockquote><p><code>BFG</code> 对于需要清理的 history 会更改涉及文件的提交的 commit-id。具体老新 commit-id 的对应关系文件在 <code>thunisoft-mvd.git.bfg-report\2020-07-17\16-14-13\object-id-map.old-new.txt</code> 中<br>此时，<code>.git/objects</code> 下的  <code>pack/xxxxx.pack</code>  文件会被解压为  n 个 <code>git objects</code> 对象文件</p></blockquote></li></ul><p>  <img src="/images/2023/gitlab_bigcodes/log_for_bfg.png"></p></li><li><p>执行命令 <code>git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</code> ，将 git object 对象压缩。而后，执行命令 <code>git push</code> 推送远端。</p><blockquote><p>注意：推送之前解除仓库的 <code>Protected Branches</code> 的配置</p></blockquote></li></ul><p>  <img src="/images/2023/gitlab_bigcodes/git_compress.png"></p><ul><li>请项目组所有成员放弃原本的本地项目仓库，重新 clone git 项目。因为，如果用原来的仓库你会发现本地 <code>.git</code> 会更大，因为除了 <code>git gc</code> 重新生成的 <code>pack</code> 文件之外，还有本地本身老的 <code>pack</code> 文件。</li></ul><p><strong>最终和派生项目对比，除 <code>.git</code> 目录外其他相同。</strong></p><p><img src="/images/2023/gitlab_bigcodes/gitcode_compare.png"></p><p><strong>为什么存在不到 1 KB 的文件？因为，本项目使用 <code>git lfs</code> 做了大文件管理，使用 <code>git lfs pull</code> 可以从远端拉下 1 KB 映射的原文件</strong><br><strong><font color="red">清理完成，2.4 GB -&gt; 1.1 GB 的转身</font></strong></p><h2 id="lion-特别说明"><a href="#lion-特别说明" class="headerlink" title=":lion: 特别说明"></a><span class="github-emoji"><span>🦁</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f981.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 特别说明</h2><ul><li>项目使用 <code>git lfs</code> 管理大文件之后，使用 <code>BFG</code> 清理完对项目本身没有任何影响。照样，可以使用 <code>git lfs</code> 命令管理文件。</li><li>真实项目在清理前，请先按照本文先 <code>clone</code> 出一份，熟悉一下清理流程，更有底气。</li></ul><h2 id="horse-附录"><a href="#horse-附录" class="headerlink" title=":horse: 附录"></a><span class="github-emoji"><span>🐴</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 附录</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/10/git-internals.html">git 原理-阮一峰</a></li><li><a href="https://zhuanlan.zhihu.com/p/45510461">git 原理</a></li><li><a href="https://docs.github.com/cn/github/managing-large-files/removing-files-from-git-large-file-storage#removing-a-single-file">git 大文件清理-github</a></li><li><a href="http://gitlab.thunisoft.com/help/user/project/repository/reducing_the_repo_size_using_git.md">git 大文件清理-gitlab</a>，目前不用上传 <code>object-id-map.old-new.txt</code> 文件，走 “开始清理” 这步骤</li><li><a href="https://rtyley.github.io/bfg-repo-cleaner/">git BFG</a></li><li><a href="https://learngitbranching.js.org/?locale=zh_CN">git 练习场</a></li><li><a href="https://git-scm.com/book/zh/v2">git 学习文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
            <tag> gitlab </tag>
            
            <tag> BFG </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
